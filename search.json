[{"title":"AddressSanitizer - A Tool for Programmers to Detect Memory Access Errors","url":"/en/2022/04/22/ASAN-intro/","content":"<p>Memory access errors are the most common software errors that often cause program crashes. The AddressSanitizer tool, developed by Google engineers in 2012, has become the first choice of C/C++ programmers for its wide coverage, high efficiency, and low overhead. Here is a brief introduction to its principle and usage.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>One man's \"magic\" is another man's engineering. \"Supernatural\" is a null word.</strong><br> <strong>— <em>Robert Anson Heinlein</em> (American science fiction author, aeronautical engineer, and naval officer)</strong></p>\n</div>\n<h3 id=\"tool-overview\">Tool Overview</h3>\n<p>The C/C++ language allows programmers to have low-level control over memory, and this direct memory management has made it possible to write efficient application software. However, this has also made memory access errors, including buffer overflows, accesses to freed memory, and memory leaks, a serious problem that must be coped with in program design and implementation. While there are tools and software that provide the ability to detect such errors, their operational efficiency, and functional coverage are often less than ideal.</p>\n<p>In 2012, Google engineer Konstantin Serebryany and team members released an open-source memory access error detector for C/C++ programs called AddressSanitizer<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a>. AddressSanitizer (ASan) applies new memory allocation, mapping, and code stubbing techniques to detect almost all memory access errors efficiently. Using the SPEC 2006 benchmark analysis package, ASan runs with an average slowdown of less than 2 and memory consumption of about 2.4 times. In comparison, another well-known detection tool <a href=\"http://valgrind.org/\">Valgrind</a> has an average slowdown of 20, which makes it almost impossible to put into practice.</p>\n<p>The following table summarizes the types of memory access errors that ASan can detect for C/C++ programs:</p>\n<table>\n<colgroup>\n<col style=\"width: 22%\" />\n<col style=\"width: 41%\" />\n<col style=\"width: 35%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Error Type</th>\n<th style=\"text-align: center;\">Abbreviation</th>\n<th style=\"text-align: center;\">Notes</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">heap use after free</td>\n<td style=\"text-align: center;\">UAF</td>\n<td style=\"text-align: center;\">Access freed memory (dangling pointer dereference)</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">heap buffer overflow</td>\n<td style=\"text-align: center;\">Heap OOB</td>\n<td style=\"text-align: center;\">Dynamic allocated memory out-of-bound read/write</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">heap memory leak</td>\n<td style=\"text-align: center;\">HML</td>\n<td style=\"text-align: center;\">Dynamic allocated memory not freed after use</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">global buffer overflow</td>\n<td style=\"text-align: center;\">Global OOB</td>\n<td style=\"text-align: center;\">Global object out-of-bound read/write</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">stack use after scope</td>\n<td style=\"text-align: center;\">UAS</td>\n<td style=\"text-align: center;\">Local object out-of-scope access</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">stack use after return</td>\n<td style=\"text-align: center;\">UAR</td>\n<td style=\"text-align: center;\">Local object out-of-scope access after return</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">stack buffer overflow</td>\n<td style=\"text-align: center;\">Stack OOB</td>\n<td style=\"text-align: center;\">Local object out-of-bound read/write</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note info\"><p>ASan itself cannot detect heap memory leaks. But when ASan is integrated into the compiler, as it replaces the memory allocation/free functions, the original leak detection feature of the compiler tool is consolidated with ASan. So, adding the ASan option to the compilation command line also turns on the leak detection feature by default.</p>\n</div>\n<p>This covers all common memory access errors except for \"uninitialized memory reads\" (UMR). ASan detects them with a false positive rate of 0, which is quite impressive. In addition, ASan detects several C++-specific memory access errors such as</p>\n<ul>\n<li><a href=\"https://isocpp.org/wiki/faq/ctors#static-init-order\"><em>Initialization Order Fiasco</em></a>: When two static objects are defined in different source files and the constructor of one object calls the method of the other object, a program crash will occur if the former compilation unit is initialized first.</li>\n<li><em>Container Overflow</em>: Given libc++/libstdc++ container, access [container.end(), container.begin() + container.capacity())], which crosses the [container.begin(), container.end()] range but still within the dynamically allocated memory area.</li>\n<li><em>Delete Mismatch</em>: For the array object created by <code>new foo[n]</code>, should not call <code>delete foo</code> for deletion, use <code>delete [] foo</code> instead.</li>\n</ul>\n<p>ASan's high reliability and performance have made it the preferred choice of compiler and IDE developers since its introduction. Today ASan is integrated into all four major compilation toolsets:</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Compiler/IDE</th>\n<th style=\"text-align: center;\">First Support Version</th>\n<th style=\"text-align: center;\">OS</th>\n<th style=\"text-align: center;\">Platform</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Clang/LLVM<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a></td>\n<td style=\"text-align: center;\">3.1</td>\n<td style=\"text-align: center;\">Unix-like</td>\n<td style=\"text-align: center;\">Cross-platform</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">GCC</td>\n<td style=\"text-align: center;\">4.8</td>\n<td style=\"text-align: center;\">Unix-like</td>\n<td style=\"text-align: center;\">Cross-platform</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Xcode</td>\n<td style=\"text-align: center;\">7.0</td>\n<td style=\"text-align: center;\">Mac OS X</td>\n<td style=\"text-align: center;\">Apple products</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">MSVC</td>\n<td style=\"text-align: center;\">16.9</td>\n<td style=\"text-align: center;\">Windows</td>\n<td style=\"text-align: center;\">IA-32, x86-64 and ARM</td>\n</tr>\n</tbody>\n</table>\n<p>ASan's developers first used the Chromium open-source browser for routine testing and found more than 300 memory access errors over 10 months. After integration into mainstream compilation tools, it reported long-hidden bugs in numerous popular open-source software, such as Mozilla Firefox, Perl, Vim, PHP, and MySQL. Interestingly, ASan also identified some memory access errors in the LLVM and GCC compilers' code. Now, many software companies have added ASan run to their mandatory quality control processes.</p>\n<h3 id=\"working-principle\">Working Principle</h3>\n<p>The USENIX conference paper <a href=\"#fn3\" class=\"footnote-ref\" id=\"fnref3\" role=\"doc-noteref\"><sup>3</sup></a>, published by Serebryany in 2012, comprehensively describes the design principles, algorithmic ideas, and programming implementation of ASan. In terms of the overall structure, ASan consists of two parts.</p>\n<ol type=\"1\">\n<li>Compiler instrumentation - modifies the code to verify the shadow memory state at each memory access and creates poisoned red zones at the edges of global and stack objects to detect overflows or underflows.</li>\n<li>Runtime library replacement - replaces <code>malloc/free</code> and its related functions to create poisoned red zones at the edge of dynamically allocated heap memory regions, delay the reuse of memory regions after release, and generate error reports.</li>\n</ol>\n<p>Here shadow memory, compiler instrumentation, and memory allocation function replacement are all previously available techniques, so how has ASan innovatively applied them for efficient error detection? Let's take a look at the details.</p>\n<h4 id=\"shadow-memory\">Shadow Memory</h4>\n<p>Many inspection tools use separated shadow memory to record metadata about program memory, and then apply instrumentation to check the shadow memory during memory accesses to confirm that reads and writes are safe. The difference is that ASan uses a more efficient <strong>direct mapping shadow memory</strong>.</p>\n<p>The designers of ASan noted that typically the <code>malloc</code> function returns a memory address that is at least 8-byte aligned. For example, a request for 20 bytes of memory would divide 24 bytes of memory, with the last 3 bits of the actual return pointer being all zeros. in addition, any aligned 8-byte sequence would only have 9 different states: the first <span class=\"math inline\">\\(k\\,(0\\leq k \\leq 8)\\)</span> bytes are accessible, and the last <span class=\"math inline\">\\(8-k\\)</span> are not. From this, they came up with a more compact shadow memory mapping and usage scheme:</p>\n<ul>\n<li>Reserve one-eighth of the virtual address space for shadow memory</li>\n<li>Directly map application memory to shadow memory using a formula that divides by 8 plus an offset\n<ul>\n<li>32-bit application: <code>Shadow = (Mem &gt;&gt; 3) + 0x20000000;</code></li>\n<li>64-bit application: <code>Shadow = (Mem &gt;&gt; 3) + 0x7fff8000;</code></li>\n</ul></li>\n<li>Each byte of shadow memory records one of the 9 states of the corresponding 8-byte memory block\n<ul>\n<li>0 means all 8 bytes are addressable</li>\n<li>Any negative value indicates that the entire 8-byte word is unaddressable (poisoned )</li>\n<li>k (1 ≤ k ≤ 7) means that the first k bytes are addressable</li>\n</ul></li>\n</ul>\n<p>The following figure shows the address space layout and mapping relationship of ASan. Pay attention to the Bad area in the middle, which is the address segment after the shadow memory itself is mapped. Because shadow memory is not visible to the application, ASan uses a page protection mechanism to make it inaccessible.</p>\n<p><img src=\"asan-mm.png\" style=\"width:40.0%;height:40.0%\" /></p>\n<h4 id=\"compiler-instrumentation\">Compiler Instrumentation</h4>\n<p>Once the shadow memory design is determined, the implementation of compiler instrumentation to detect dynamic memory access errors is easy. For memory accesses of 8 bytes, the shadow memory bytes are checked by inserting instructions before the original read/write code, and an error is reported if they are not zero. For memory accesses of less than 8 bytes, the instrumentation is a bit more complicated, where the shadow memory byte values are compared with the last three bits of the read/write address. This situation is also known as the \"slow path\" and the sample code is as follows.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Check the cases where we access first k bytes of the qword</span></span><br><span class=\"line\"><span class=\"comment\">// and these k bytes are unpoisoned.</span></span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">SlowPathCheck</span><span class=\"params\">(shadow_value, address, kAccessSize)</span> &#123;</span><br><span class=\"line\">  last_accessed_byte = (address &amp; <span class=\"number\">7</span>) + kAccessSize - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (last_accessed_byte &gt;= shadow_value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">byte *shadow_address = MemToShadow(address);</span><br><span class=\"line\">byte shadow_value = *shadow_address;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (shadow_value) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SlowPathCheck(shadow_value, address, kAccessSize)) &#123;</span><br><span class=\"line\">    ReportError(address, kAccessSize, kIsWrite);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*address = ...;  <span class=\"comment\">// or: ... = *address;</span></span><br></pre></td></tr></table></figure>\n<p>For global and stack (local) objects, ASan has designed different instrumentation to detect their out-of-bounds access errors. The red zone around a global object is added by the compiler at compile time and its address is passed to the runtime library at application startup, where the runtime library function then poisons the red zone and writes down the address needed in error reporting. The stack object is created at function call time, and accordingly, its red zone is created and poisoned at runtime. In addition, because the stack object is deleted when the function returns, the instrumentation code must also zero out the shadow memory it is mapped to.</p>\n<p>In practice, the ASan compiler instrumentation process is placed at the end of the compiler optimization pipeline so that instrumentation only applies to the remaining memory access instructions after variable and loop optimization. In the latest GCC distribution, the ASan compiler stubbing code is located in two files in the gcc subdirectory <code>gcc/asan.[ch]</code>.</p>\n<h4 id=\"runtime-library-replacement\">Runtime Library Replacement</h4>\n<p>The runtime library needs to include code to manage shadow memory. The address segment to which shadow memory itself is mapped is to be initialized at application startup to disable access to shadow memory by other parts of the program. The runtime library replaces the old memory allocation and free functions and also adds some error reporting functions such as <code>__asan_report_load8</code>.</p>\n<p>The newly replaced memory allocation function <code>malloc</code> will allocate additional storage as a red zone before and after the requested memory block and set the red zone to be non-addressable. This is called the poisoning process. In practice, because the memory allocator maintains a list of available memory corresponding to different object sizes, if the list of a certain object is empty, the OS will allocate a large set of memory blocks and their red zones at once. As a result, the red zones of the preceding and following memory blocks will be connected, as shown in the following figure, where <span class=\"math inline\">\\(n\\)</span> memory blocks require only <span class=\"math inline\">\\(n+1\\)</span> red zones to be allocated.</p>\n<p><img src=\"asan-redzone.png\" /></p>\n<p>The new <code>free</code> function needs to poison the entire storage area and place it in a quarantine queue after the memory is freed. This prevents the memory region from being allocated any time soon. Otherwise, if the memory region is reused immediately, there is no way to detect incorrect accesses to the recently freed memory. The size of the quarantine queue determines how long the memory region is in quarantine, and the larger it is the better its capability of detecting UAF errors!</p>\n<p>By default, both the <code>malloc</code> and <code>free</code> functions log their call stacks to provide more detailed information in the error reports. The call stack for <code>malloc</code> is kept in the red zone to the left of the allocated memory, so a large red zone can retain more call stack frames. The call stack for <code>free</code> is stored at the beginning of the allocated memory region itself.</p>\n<p>Integrated into the GCC compiler, the source code for the ASan runtime library replacement is located in the libsanitizer subdirectory <code>libsanitizer/asan/*</code>, and the resulting runtime library is compiled as <code>libasan.so</code>.</p>\n<h3 id=\"application-examples\">Application Examples</h3>\n<p>ASan is very easy to use. The following is an example of an Ubuntu Linux 20.4 + GCC 9.3.0 system running on an x86_64 virtual machine to demonstrate the ability to detect various memory access errors.</p>\n<h4 id=\"test-cases\">Test Cases</h4>\n<p>As shown below, the test program writes seven functions, each introducing a different error type. The function names are cross-referenced with the error types one by one:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * PakcteMania https://www.packetmania.net</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * gcc asan-test.c -o asan-test -fsanitize=address -g</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;strings.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">/* #include &lt;sanitizer/lsan_interface.h&gt; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> ga[<span class=\"number\">10</span>] = &#123;<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">global_buffer_overflow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ga[<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">heap_leak</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* k = (<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>*<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">heap_use_after_free</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* u = (<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>*<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    u[<span class=\"number\">9</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> u[<span class=\"number\">9</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">heap_buffer_overflow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>* h = (<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">10</span>*<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    h[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h[<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">stack_buffer_overflow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> s[<span class=\"number\">10</span>];</span><br><span class=\"line\">    s[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s[<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> *gp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">stack_use_after_return</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> r[<span class=\"number\">10</span>];</span><br><span class=\"line\">    r[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    gp = &amp;r[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">stack_use_after_scope</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">        gp = &amp;c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *gp = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The test program calls the <code>getopt</code> library function to support a single-letter command line option that allows the user to select the type of error to be tested. The command line option usage information is as follows.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">\b$ ./asan-test</span><br><span class=\"line\"></span><br><span class=\"line\">Test AddressSanitizer</span><br><span class=\"line\">usage: asan-test [ -bfloprs ]</span><br><span class=\"line\"></span><br><span class=\"line\">-b\theap buffer overflow</span><br><span class=\"line\">-f\theap use after free</span><br><span class=\"line\">-l\theap memory leak</span><br><span class=\"line\">-o\tglobal buffer overflow</span><br><span class=\"line\">-p\tstack use after scope</span><br><span class=\"line\">-r\tstack use after <span class=\"built_in\">return</span></span><br><span class=\"line\">-s\tstack buffer overflow</span><br></pre></td></tr></table></figure>\n<p>The GCC compile command for the test program is simple, just add two compile options</p>\n<ul>\n<li><code>-fsanitize=address</code>: activates the ASan tool</li>\n<li><code>-g</code>: enable debugging and keep debugging information</li>\n</ul>\n<h4 id=\"oob-test\">OOB Test</h4>\n<p>For Heap OOB error, the run result is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./asan-test -b</span><br><span class=\"line\">=================================================================</span><br><span class=\"line\">==57360==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x604000000038 at pc 0x55bf46fd64ed bp 0x7ffced908dc0 sp 0x7ffced908db0</span><br><span class=\"line\">READ of size 4 at 0x604000000038 thread T0</span><br><span class=\"line\">    <span class=\"comment\">#0 0x55bf46fd64ec in heap_buffer_overflow /home/zixi/coding/asan-test.c:34</span></span><br><span class=\"line\">    <span class=\"comment\">#1 0x55bf46fd6a3f in main /home/zixi/coding/asan-test.c:88</span></span><br><span class=\"line\">    <span class=\"comment\">#2 0x7fd16f6560b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)</span></span><br><span class=\"line\">    <span class=\"comment\">#3 0x55bf46fd628d in _start (/home/zixi/coding/asan-test+0x128d)</span></span><br><span class=\"line\"></span><br><span class=\"line\">0x604000000038 is located 0 bytes to the right of 40-byte region [0x604000000010,0x604000000038)</span><br><span class=\"line\">allocated by thread T0 here:</span><br><span class=\"line\">    <span class=\"comment\">#0 0x7fd16f92ebc8 in malloc (/lib/x86_64-linux-gnu/libasan.so.5+0x10dbc8)</span></span><br><span class=\"line\">    <span class=\"comment\">#1 0x55bf46fd646c in heap_buffer_overflow /home/zixi/coding/asan-test.c:32</span></span><br><span class=\"line\">    <span class=\"comment\">#2 0x55bf46fd6a3f in main /home/zixi/coding/asan-test.c:88</span></span><br><span class=\"line\">    <span class=\"comment\">#3 0x7fd16f6560b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">SUMMARY: AddressSanitizer: heap-buffer-overflow /home/zixi/coding/asan-test.c:34 <span class=\"keyword\">in</span> heap_buffer_overflow</span><br><span class=\"line\">Shadow bytes around the buggy address:</span><br><span class=\"line\">  0x0c087fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c087fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c087fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c087fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c087fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">=&gt;0x0c087fff8000: fa fa 00 00 00 00 00[fa]fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c087fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c087fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c087fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c087fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c087fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class=\"line\">  Addressable:           00</span><br><span class=\"line\">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class=\"line\">  Heap left redzone:       fa</span><br><span class=\"line\">  Freed heap region:       fd</span><br><span class=\"line\">  ...</span><br><span class=\"line\">==57360==ABORTING</span><br></pre></td></tr></table></figure>\n<p>Referring to the <code>heap-buffer-overflow</code> function implementation, you can see that it requests 40 bytes of memory to hold 10 32-bit integers. However, on the return of the function, the code overruns to read the data after the allocated memory. As the above run log shows, the program detects a Heap OOB error and aborts immediately. ASan reports the name of the source file and line number <code>asan-test.c:34</code> where the error occurred, and also accurately lists the original allocation function call stack for dynamically allocated memory. The \"SUMMARY\" section of the report also prints the shadow memory data corresponding to the address in question (observe the lines marked by <code>=&gt;</code>). The address to be read is 0x604000000038, whose mapped shadow memory address 0x0c087fff8007 holds the negative value 0xfa (poisoned and not addressable). Because of this, ASan reports an error and aborts the program.</p>\n<p>The Stack OOB test case is shown below. ASan reports an out-of-bounds read error for a local object. Since the local variables are located in the stack space, the starting line number <code>asan-test.c:37</code> of the function <code>stack_buffr_overflow</code> is listed. Unlike the Heap OOB report, the shadow memory poisoning values for the front and back redzone of the local variable are different, with the previous <code>Stack left redzone</code> being 0xf1 and the later <code>Stack right redzone</code> being 0xf3. Using different poisoning values (both negative after 0x80) helps to quickly distinguish between the different error types.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./asan-test -s</span><br><span class=\"line\">=================================================================</span><br><span class=\"line\">==57370==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7f1cf5044058 at pc 0x55d8b7e9d601 bp 0x7ffc830c29e0 sp 0x7ffc830c29d0</span><br><span class=\"line\">READ of size 4 at 0x7f1cf5044058 thread T0</span><br><span class=\"line\">    <span class=\"comment\">#0 0x55d8b7e9d600 in stack_buffer_overflow /home/zixi/coding/asan-test.c:40</span></span><br><span class=\"line\">    <span class=\"comment\">#1 0x55d8b7e9daec in main /home/zixi/coding/asan-test.c:108</span></span><br><span class=\"line\">    <span class=\"comment\">#2 0x7f1cf87760b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)</span></span><br><span class=\"line\">    <span class=\"comment\">#3 0x55d8b7e9d28d in _start (/home/zixi/coding/asan-test+0x128d)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Address 0x7f1cf5044058 is located <span class=\"keyword\">in</span> stack of thread T0 at offset 88 <span class=\"keyword\">in</span> frame</span><br><span class=\"line\">    <span class=\"comment\">#0 0x55d8b7e9d505 in stack_buffer_overflow /home/zixi/coding/asan-test.c:37</span></span><br><span class=\"line\"></span><br><span class=\"line\">  This frame has 1 object(s):</span><br><span class=\"line\">    [48, 88) <span class=\"string\">&#x27;s&#x27;</span> (line 38) &lt;== Memory access at offset 88 overflows this variable</span><br><span class=\"line\">HINT: this may be a <span class=\"literal\">false</span> positive <span class=\"keyword\">if</span> your program uses some custom stack unwind mechanism, swapcontext or vfork</span><br><span class=\"line\">      (longjmp and C++ exceptions *are* supported)</span><br><span class=\"line\">SUMMARY: AddressSanitizer: stack-buffer-overflow /home/zixi/coding/asan-test.c:40 <span class=\"keyword\">in</span> stack_buffer_overflow</span><br><span class=\"line\">Shadow bytes around the buggy address:</span><br><span class=\"line\">  0x0fe41ea007b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe41ea007c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe41ea007d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe41ea007e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe41ea007f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">=&gt;0x0fe41ea00800: f1 f1 f1 f1 f1 f1 00 00 00 00 00[f3]f3 f3 f3 f3</span><br><span class=\"line\">  0x0fe41ea00810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe41ea00820: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe41ea00830: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe41ea00840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe41ea00850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class=\"line\">  Addressable:           00</span><br><span class=\"line\">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class=\"line\">  Heap left redzone:       fa</span><br><span class=\"line\">  Freed heap region:       fd</span><br><span class=\"line\">  Stack left redzone:      f1</span><br><span class=\"line\">  Stack mid redzone:       f2</span><br><span class=\"line\">  Stack right redzone:     f3</span><br><span class=\"line\">  ...</span><br><span class=\"line\">==57370==ABORTING</span><br></pre></td></tr></table></figure>\n<p>The following Global OOB test result also clearly shows the error line <code>asan-test.c:16</code>, the global variable name <code>ga</code> and its definition code location <code>asan-test.c:13:5</code>, and you can also see that the global object has a red zone poisoning value of 0xf9.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./asan-test -o</span><br><span class=\"line\">=================================================================</span><br><span class=\"line\">==57367==ERROR: AddressSanitizer: global-buffer-overflow on address 0x564363ea4048 at pc 0x564363ea1383 bp 0x7ffc0d6085d0 sp 0x7ffc0d6085c0</span><br><span class=\"line\">READ of size 4 at 0x564363ea4048 thread T0</span><br><span class=\"line\">    <span class=\"comment\">#0 0x564363ea1382 in global_buffer_overflow /home/zixi/coding/asan-test.c:16</span></span><br><span class=\"line\">    <span class=\"comment\">#1 0x564363ea1a6c in main /home/zixi/coding/asan-test.c:98</span></span><br><span class=\"line\">    <span class=\"comment\">#2 0x7f8cb43890b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)</span></span><br><span class=\"line\">    <span class=\"comment\">#3 0x564363ea128d in _start (/home/zixi/coding/asan-test+0x128d)</span></span><br><span class=\"line\"></span><br><span class=\"line\">0x564363ea4048 is located 0 bytes to the right of global variable <span class=\"string\">&#x27;ga&#x27;</span> defined <span class=\"keyword\">in</span> <span class=\"string\">&#x27;asan-test.c:13:5&#x27;</span> (0x564363ea4020) of size 40</span><br><span class=\"line\">SUMMARY: AddressSanitizer: global-buffer-overflow /home/zixi/coding/asan-test.c:16 <span class=\"keyword\">in</span> global_buffer_overflow</span><br><span class=\"line\">Shadow bytes around the buggy address:</span><br><span class=\"line\">  0x0ac8ec7cc7b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0ac8ec7cc7c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0ac8ec7cc7d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0ac8ec7cc7e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0ac8ec7cc7f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">=&gt;0x0ac8ec7cc800: 00 00 00 00 00 00 00 00 00[f9]f9 f9 f9 f9 f9 f9</span><br><span class=\"line\">  0x0ac8ec7cc810: 00 00 00 00 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9</span><br><span class=\"line\">  0x0ac8ec7cc820: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9</span><br><span class=\"line\">  0x0ac8ec7cc830: f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 00 00 00 00</span><br><span class=\"line\">  0x0ac8ec7cc840: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0ac8ec7cc850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class=\"line\">  Addressable:           00</span><br><span class=\"line\">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class=\"line\">  Heap left redzone:       fa</span><br><span class=\"line\">  Freed heap region:       fd</span><br><span class=\"line\">  Stack left redzone:      f1</span><br><span class=\"line\">  Stack mid redzone:       f2</span><br><span class=\"line\">  Stack right redzone:     f3</span><br><span class=\"line\">  Stack after <span class=\"built_in\">return</span>:      f5</span><br><span class=\"line\">  Stack use after scope:   f8</span><br><span class=\"line\">  Global redzone:          f9</span><br><span class=\"line\">  ...</span><br><span class=\"line\">==57367==ABORTING</span><br></pre></td></tr></table></figure>\n<p>Note that in this example, the global array <code>int ga[10] = &#123;1&#125;;</code> is initialized, what happens if it is uninitialized? Change the code slightly</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> ga[<span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">global_buffer_overflow</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    ga[<span class=\"number\">0</span>] = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ga[<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Surprisingly, ASan does not report the obvious Global OOB error here. Why?</p>\n<p>The reason has to do with the way GCC treats global variables. The compiler treats functions and initialized variables as Strong symbols, while <strong>uninitialized variables are Weak symbols</strong> by default. Since the definition of weak symbols may vary from source file to source file, the size of the space required is unknown. <u>The compiler cannot allocate space for weak symbols in the BSS segment, so it uses the COMMON block mechanism so that all weak symbols share a COMMON memory region, thus ASan cannot insert the red zone</u>. During the linking process, after the linker reads all the input target files, it can determine the size of the weak symbols and allocate space for them in the BSS segment of the final output file.</p>\n<p>Fortunately, GCC's <code>-fno-common</code> option turns off the COMMON block mechanism, allowing the compiler to add all uninitialized global variables directly to the BSS segment of the target file, also allowing ASan to work properly. This option also disables the linker from merging weak symbols, so the linker reports an error directly when it finds a compiled unit with duplicate global variables defined in the target file.</p>\n<p>This is confirmed by a real test. Modify the GCC command line for the previous code segment</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc asan-test.c -o asan-test -fsanitize=address -fno-common -g</span><br></pre></td></tr></table></figure>\n<p>then compile, link, and run. ASan successfully reported the Global OOB error.</p>\n<h4 id=\"uaf-test\">UAF Test</h4>\n<p>The following is a running record of UAF error detection. Not only is the information about the code that went wrong reported here, but also the call stack of the original allocation and free functions of the dynamic memory is given. The log shows that the memory was allocated by <code>asan-test.c:25</code>, freed at <code>asan-test.c:27</code>, and yet read at <code>asan-test.c:28</code>. The shadow memory data printed later indicates that the data filled is negative 0xfd, which is also the result of the poisoning of the memory after it is freed.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ \u0007./asan-test -\bf</span><br><span class=\"line\">=================================================================</span><br><span class=\"line\">==57363==ERROR: AddressSanitizer: heap-use-after-free on address 0x604000000034 at pc 0x558b4a45444e bp 0x7ffccf4ca790 sp 0x7ffccf4ca780</span><br><span class=\"line\">READ of size 4 at 0x604000000034 thread T0</span><br><span class=\"line\">    <span class=\"comment\">#0 0x558b4a45444d in heap_use_after_free /home/zixi/coding/asan-test.c:28</span></span><br><span class=\"line\">    <span class=\"comment\">#1 0x558b4a454a4e in main /home/zixi/coding/asan-test.c:91</span></span><br><span class=\"line\">    <span class=\"comment\">#2 0x7fc7cc98b0b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)</span></span><br><span class=\"line\">    <span class=\"comment\">#3 0x558b4a45428d in _start (/home/zixi/coding/asan-test+0x128d)</span></span><br><span class=\"line\"></span><br><span class=\"line\">0x604000000034 is located 36 bytes inside of 40-byte region [0x604000000010,0x604000000038)</span><br><span class=\"line\">freed by thread T0 here:</span><br><span class=\"line\">    <span class=\"comment\">#0 0x7fc7ccc637cf in __interceptor_free (/lib/x86_64-linux-gnu/libasan.so.5+0x10d7cf)</span></span><br><span class=\"line\">    <span class=\"comment\">#1 0x558b4a454412 in heap_use_after_free /home/zixi/coding/asan-test.c:27</span></span><br><span class=\"line\">    <span class=\"comment\">#2 0x558b4a454a4e in main /home/zixi/coding/asan-test.c:91</span></span><br><span class=\"line\">    <span class=\"comment\">#3 0x7fc7cc98b0b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">previously allocated by thread T0 here:</span><br><span class=\"line\">    <span class=\"comment\">#0 0x7fc7ccc63bc8 in malloc (/lib/x86_64-linux-gnu/libasan.so.5+0x10dbc8)</span></span><br><span class=\"line\">    <span class=\"comment\">#1 0x558b4a4543bd in heap_use_after_free /home/zixi/coding/asan-test.c:25</span></span><br><span class=\"line\">    <span class=\"comment\">#2 0x558b4a454a4e in main /home/zixi/coding/asan-test.c:91</span></span><br><span class=\"line\">    <span class=\"comment\">#3 0x7fc7cc98b0b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">SUMMARY: AddressSanitizer: heap-use-after-free /home/zixi/coding/asan-test.c:28 <span class=\"keyword\">in</span> heap_use_after_free</span><br><span class=\"line\">Shadow bytes around the buggy address:</span><br><span class=\"line\">  0x0c087fff7fb0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c087fff7fc0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c087fff7fd0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c087fff7fe0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0c087fff7ff0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">=&gt;0x0c087fff8000: fa fa fd fd fd fd[fd]fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c087fff8010: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c087fff8020: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c087fff8030: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c087fff8040: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">  0x0c087fff8050: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa</span><br><span class=\"line\">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class=\"line\">  Addressable:           00</span><br><span class=\"line\">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class=\"line\">  Heap left redzone:       fa</span><br><span class=\"line\">  Freed heap region:       fd</span><br><span class=\"line\">  ...</span><br><span class=\"line\">==57363==ABORTING</span><br></pre></td></tr></table></figure>\n<h4 id=\"hml-test\">HML Test</h4>\n<p>The results of the memory leak test are as follows. Unlike the other test cases, <code>ABORTING</code> is not printed at the end of the output record. This is because, by default, ASan only generates a memory leak report when the program terminates (process ends). If you want to check for leaks on the fly, you can call ASan's library function <code>__lsan_do_recoverable_leak_check</code>, whose definition is located in the header file <code>sanitizer/lsan_interface.h</code>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./asan-test -l</span><br><span class=\"line\">=================================================================</span><br><span class=\"line\">==57365==ERROR: LeakSanitizer: detected memory leaks</span><br><span class=\"line\"></span><br><span class=\"line\">Direct leak of 40 byte(s) <span class=\"keyword\">in</span> 1 object(s) allocated from:</span><br><span class=\"line\">    <span class=\"comment\">#0 0x7f06b85b1bc8 in malloc (/lib/x86_64-linux-gnu/libasan.so.5+0x10dbc8)</span></span><br><span class=\"line\">    <span class=\"comment\">#1 0x5574a8bcd3a0 in heap_leak /home/zixi/coding/asan-test.c:20</span></span><br><span class=\"line\">    <span class=\"comment\">#2 0x5574a8bcda5d in main /home/zixi/coding/asan-test.c:94</span></span><br><span class=\"line\">    <span class=\"comment\">#3 0x7f06b82d90b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)</span></span><br><span class=\"line\"></span><br><span class=\"line\">SUMMARY: AddressSanitizer: 40 byte(s) leaked <span class=\"keyword\">in</span> 1 allocation(s).</span><br></pre></td></tr></table></figure>\n<h4 id=\"uas-test\">UAS Test</h4>\n<p>See the <code>stack_use_after_scope</code> function code, where the memory unit holding the local variable <code>c</code> is written outside of its scope. The test log accurately reports the line number <code>line 54</code> where the variable is defined and the location of the incorrect writing code <code>asan-test.c:57</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./asan-test -\bp</span><br><span class=\"line\">=================================================================</span><br><span class=\"line\">==57368==ERROR: AddressSanitizer: stack-use-after-scope on address 0x7f06f0a9b020 at pc 0x56121a7548d9 bp 0x7ffd1de0d050 sp 0x7ffd1de0d040</span><br><span class=\"line\">WRITE of size 4 at 0x7f06f0a9b020 thread T0</span><br><span class=\"line\">    <span class=\"comment\">#0 0x56121a7548d8 in stack_use_after_scope /home/zixi/coding/asan-test.c:57</span></span><br><span class=\"line\">    <span class=\"comment\">#1 0x56121a754a7b in main /home/zixi/coding/asan-test.c:101</span></span><br><span class=\"line\">    <span class=\"comment\">#2 0x7f06f42cd0b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)</span></span><br><span class=\"line\">    <span class=\"comment\">#3 0x56121a75428d in _start (/home/zixi/coding/asan-test+0x128d)</span></span><br><span class=\"line\"></span><br><span class=\"line\">Address 0x7f06f0a9b020 is located <span class=\"keyword\">in</span> stack of thread T0 at offset 32 <span class=\"keyword\">in</span> frame</span><br><span class=\"line\">    <span class=\"comment\">#0 0x56121a7547d0 in stack_use_after_scope /home/zixi/coding/asan-test.c:52</span></span><br><span class=\"line\"></span><br><span class=\"line\">  This frame has 1 object(s):</span><br><span class=\"line\">    [32, 36) <span class=\"string\">&#x27;c&#x27;</span> (line 54) &lt;== Memory access at offset 32 is inside this variable</span><br><span class=\"line\">HINT: this may be a <span class=\"literal\">false</span> positive <span class=\"keyword\">if</span> your program uses some custom stack unwind mechanism, swapcontext or vfork</span><br><span class=\"line\">      (longjmp and C++ exceptions *are* supported)</span><br><span class=\"line\">SUMMARY: AddressSanitizer: stack-use-after-scope /home/zixi/coding/asan-test.c:57 <span class=\"keyword\">in</span> stack_use_after_scope</span><br><span class=\"line\">Shadow bytes around the buggy address:</span><br><span class=\"line\">  0x0fe15e14b5b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe15e14b5c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe15e14b5d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe15e14b5e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe15e14b5f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">=&gt;0x0fe15e14b600: f1 f1 f1 f1[f8]f3 f3 f3 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe15e14b610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe15e14b620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe15e14b630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe15e14b640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0fe15e14b650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class=\"line\">  Addressable:           00</span><br><span class=\"line\">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class=\"line\">  Heap left redzone:       fa</span><br><span class=\"line\">  Freed heap region:       fd</span><br><span class=\"line\">  Stack left redzone:      f1</span><br><span class=\"line\">  Stack mid redzone:       f2</span><br><span class=\"line\">  Stack right redzone:     f3</span><br><span class=\"line\">  Stack after <span class=\"built_in\">return</span>:      f5</span><br><span class=\"line\">  Stack use after scope:   f8</span><br><span class=\"line\">  ...</span><br><span class=\"line\">==57368==ABORTING</span><br></pre></td></tr></table></figure>\n<h4 id=\"uar-test\">UAR Test</h4>\n<p>The UAR test has its peculiarities. Because the stack memory of a function is reused immediately after it returns, to detect local object access errors after return, a \"pseudo-stack\" of dynamic memory allocation must be set up, for details check the relevant Wiki page of ASan<a href=\"#fn4\" class=\"footnote-ref\" id=\"fnref4\" role=\"doc-noteref\"><sup>4</sup></a>. Since this algorithm change has some performance impact, ASan does not detect UAR errors by default. If you really need to, you can set the environment variable <code>ASAN_OPTIONS</code> to <code>detect_stack_use_after_return=1</code> before running. The corresponding test logs are as follows.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ export ASAN_OPTIONS=detect_stack_use_after_return=1</span><br><span class=\"line\">$ env | grep ASAN</span><br><span class=\"line\">ASAN_OPTIONS=detect_stack_use_after_return=1</span><br><span class=\"line\">$ ./asan-test -\br</span><br><span class=\"line\">=================================================================</span><br><span class=\"line\">==57369==ERROR: AddressSanitizer: stack-use-after-return on address 0x7f5493e93030 at pc 0x55a356890ac9 bp 0x7ffd22c5cf30 sp 0x7ffd22c5cf20</span><br><span class=\"line\">READ of size 4 at 0x7f5493e93030 thread T0</span><br><span class=\"line\">    #0 0x55a356890ac8 in main /home/zixi/coding/asan-test.c:105</span><br><span class=\"line\">    #1 0x7f54975c50b2 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x270b2)</span><br><span class=\"line\">    #2 0x55a35689028d in _start (/home/zixi/coding/asan-test+0x128d)</span><br><span class=\"line\"></span><br><span class=\"line\">Address 0x7f5493e93030 is located in stack of thread T0 at offset 48 in frame</span><br><span class=\"line\">    #0 0x55a356890682 in stack_use_after_return /home/zixi/coding/asan-test.c:45</span><br><span class=\"line\"></span><br><span class=\"line\">  This frame has 1 object(s):</span><br><span class=\"line\">    [48, 88) &#x27;r&#x27; (line 46) &lt;== Memory access at offset 48 is inside this variable</span><br><span class=\"line\">HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork</span><br><span class=\"line\">      (longjmp and C++ exceptions *are* supported)</span><br><span class=\"line\">SUMMARY: AddressSanitizer: stack-use-after-return /home/zixi/coding/asan-test.c:105 in main</span><br><span class=\"line\">Shadow bytes around the buggy address:</span><br><span class=\"line\">  0x0feb127ca5b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0feb127ca5c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0feb127ca5d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0feb127ca5e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0feb127ca5f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">=&gt;0x0feb127ca600: f5 f5 f5 f5 f5 f5[f5]f5 f5 f5 f5 f5 f5 f5 f5 f5</span><br><span class=\"line\">  0x0feb127ca610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0feb127ca620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0feb127ca630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0feb127ca640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">  0x0feb127ca650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class=\"line\">Shadow byte legend (one shadow byte represents 8 application bytes):</span><br><span class=\"line\">  Addressable:           00</span><br><span class=\"line\">  Partially addressable: 01 02 03 04 05 06 07 </span><br><span class=\"line\">  Heap left redzone:       fa</span><br><span class=\"line\">  Freed heap region:       fd</span><br><span class=\"line\">  Stack left redzone:      f1</span><br><span class=\"line\">  Stack mid redzone:       f2</span><br><span class=\"line\">  Stack right redzone:     f3</span><br><span class=\"line\">  Stack after return:      f5</span><br><span class=\"line\">  ...</span><br><span class=\"line\">==57369==ABORTING</span><br></pre></td></tr></table></figure>\n<p>ASan supports many other compiler flags and runtime environment variable options to control and tune the functionality and scope of the tests. For those interested please refer to the ASan flags Wiki page<a href=\"#fn5\" class=\"footnote-ref\" id=\"fnref5\" role=\"doc-noteref\"><sup>5</sup></a>.</p>\n<p>A zip archive of the complete test program is available for download here: <a href=\"asan-test.c.gz\">asan-test.c.gz</a></p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p><a href=\"https://github.com/google/sanitizers/wiki/AddressSanitizer\">AddressSanitizer Wiki</a><a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p><a href=\"https://clang.llvm.org/docs/AddressSanitizer.html\">Clang 13 documentation: ADDRESSSANITIZER</a><a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn3\" role=\"doc-endnote\"><p>Serebryany, K.; Bruening, D.; Potapenko, A.; Vyukov, D. \"<a href=\"https://www.usenix.org/system/files/conference/atc12/atc12-final39.pdf\"><em>AddressSanitizer: a fast address sanity checker</em></a>\". In USENIX ATC, 2012<a href=\"#fnref3\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn4\" role=\"doc-endnote\"><p><a href=\"https://github.com/google/sanitizers/wiki/AddressSanitizerUseAfterReturn\">AddressSanitizerUseAfterReturn</a><a href=\"#fnref4\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn5\" role=\"doc-endnote\"><p><a href=\"https://github.com/google/sanitizers/wiki/AddressSanitizerFlags\">AddressSanitizerFlags</a><a href=\"#fnref5\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Tool Guide"],"tags":["C/C++ Programming","System Programming"]},{"title":"Programming in C Exam Review and Practices (I)","url":"/en/2024/02/28/C-Prog-Exam-Review-Practices-1/","content":"<p>Here is a series of general study guides to college-level C programming courses. This is the first part covering compilation and linking, file operations, typedef, structures, string operations, basic pointer operations, etc. <span id=\"more\"></span></p>\n<h2 id=\"compilation-and-linking\">Compilation and Linking</h2>\n<ul>\n<li><p>Write the command to compile a single C file named \"hello.c\" into an object file called \"hello.o\".</p>\n<p><code>gcc -c hello.c -o hello.o</code></p></li>\n<li><p>Write the command to link two object files named \"hello.o\" and \"goodbye.o\" into the executable called \"application\".</p>\n<p><code>gcc hello.o goodbye.o -o application</code></p></li>\n<li><p>Can you \"run\" an object file if it contains the \"main()\" function?</p>\n<p>No, an object file cannot be run directly. If you force it to run, it will <code>exec format error</code>.</p></li>\n<li><p>Can you \"run\" an executable that contains a single function called \"main()\"?</p>\n<p>Yes, an executable with just main() can be run.</p></li>\n<li><p>Can you \"run\" an executable that does not contain a function called \"main()\"?</p>\n<p>No, main() is required to run an executable.</p></li>\n<li><p>What does the \"-Wall\" flag do?</p>\n<p>\"-Wall\" enables all compiler warnings</p></li>\n<li><p>What does the \"-g\" flag do?</p>\n<p>\"-g\" adds debugging information.</p></li>\n<li><p>What does the \"-ansi\" flag do?</p>\n<p>\"-ansi\" enables strict ANSI C mode. The \"-ansi\" flag is equivalent to the -\"std=c89\" flag.</p></li>\n<li><p>What does the \"-c\" flag do?</p>\n<p>\"-c\" compiles to object file only, does not link.</p></li>\n<li><p>What does the \"-o\" flag do?</p>\n<p>\"-o\" specifies output file name.</p>\n<ul>\n<li>If \"-c\" is also used with a single [filename].c file, and no other .o in the command line, gcc will default generate an object file named [filename].o. If \"-o\" is used in such a case, it will create an object file with the specified name.</li>\n<li>If no \"-c\" is used, gcc will by default create an executable file named \"a.out\".</li>\n</ul></li>\n</ul>\n<h2 id=\"file-operations\">File Operations</h2>\n<ul>\n<li><p>Given the following FILE pointer variable definition, write the code that will open a file named \"hello.txt\" for read-only access and print a message of your choice if there was an error in doing so.</p>\n<p><code>FILE *my_file = 0;</code></p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">my_file = fopen(<span class=\"string\">&quot;hello.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (my_file = <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stdout</span>, <span class=\"string\">&quot;Failed to open the file\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Write code that will, without opening any file, check if a file named \"hello.txt\" can be opened for read access. Put the code inside the 'if' predicate:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (access(<span class=\"string\">&quot;hello.txt&quot;</span>, R_OK) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">   <span class=\"comment\">/* Yes, we can open the file... */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Write code that will, without opening any file, check if a file named \"hello.txt\" can be opened for write access. Put the code inside the 'if' predicate:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (access(<span class=\"string\">&quot;hello.txt&quot;</span>, W_OK) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Yes, we can open the file... */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Write a function called read_and_print() that will do the following:</p>\n<ul>\n<li>Open a text file called \"hello.txt\" for read-only access.</li>\n<li>Read a word that is terminated by a newline from the file into the character array called \"my_string\".</li>\n<li>Read an integer terminated by a newline into the int variable called \"my_int\".</li>\n<li>Print the string and the integer value.</li>\n<li>Return the my_int value.</li>\n<li>If the file cannot be opened for reading, return -1.</li>\n<li>If an error occurs while reading from the file, return -1.</li>\n</ul>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">read_and_print</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">char</span> my_string[<span class=\"number\">100</span>];</span><br><span class=\"line\">     my_int;</span><br><span class=\"line\">     </span><br><span class=\"line\">     FILE *fp = fopen(<span class=\"string\">&quot;hello.txt&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(!fp) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"built_in\">fscanf</span>(fp, <span class=\"string\">&quot;%s&quot;</span>, my_string) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       fclose(fp);</span><br><span class=\"line\">       fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"built_in\">fscanf</span>(fp, <span class=\"string\">&quot;%d&quot;</span>, &amp;my_int) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">       fclose(fp);</span><br><span class=\"line\">       fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d\\n&quot;</span>, my_string, my_int);</span><br><span class=\"line\">     fclose(fp);</span><br><span class=\"line\">     fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> my_int;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Write a function named print_reverse that will open a text file named \"hello.txt\" and print each character in the file in reverse. i.e. print the first character last and the last character first. The function should return the number of characters in the file. Upon any error, return -1. HINT: Use fseek() a lot to do this.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">print_reverse</span><span class=\"params\">(<span class=\"type\">char</span>* filename)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  FILE* fp = fopen(filename, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!fp) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  fseek(fp, <span class=\"number\">0</span>, SEEK_END);</span><br><span class=\"line\">  <span class=\"type\">int</span> size = ftell(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = size - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    fseek(fp, i, SEEK_SET);</span><br><span class=\"line\">    <span class=\"type\">char</span> c = fgetc(fp);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, c);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fclose(fp);</span><br><span class=\"line\">  fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Write a function that defines a structure, initializes it, writes it to a file called \"struct.out\", closes the file, re-opens the file for read-only access, reads a single structure into a new struct variable, and then closes the file. Print the structure contents to the screen. On any error, return -1. Otherwise, return 0.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">char</span> name[<span class=\"number\">50</span>];</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">write_and_read_struct</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span> <span class=\"title\">p</span> =</span> &#123; <span class=\"string\">&quot;John Doe&quot;</span>, <span class=\"number\">30</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Write struct to file</span></span><br><span class=\"line\">  FILE* fp = fopen(<span class=\"string\">&quot;struct.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fp) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fwrite(&amp;p, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> Person), <span class=\"number\">1</span>, fp) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  \tfclose(fp);</span><br><span class=\"line\">  \tfp = <span class=\"literal\">NULL</span>:</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fclose(fp);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Read struct from file</span></span><br><span class=\"line\">  fp = fopen(<span class=\"string\">&quot;struct.out&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!fp) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span> <span class=\"title\">p2</span>;</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fread(&amp;p2, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> Person), <span class=\"number\">1</span>, fp) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">    fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  fclose(fp);</span><br><span class=\"line\">  fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Print struct</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Name: %s, Age: %d\\n&quot;</span>, p2.name, p2,age);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"typedef\">Typedef</h2>\n<ul>\n<li><p>Declare a type called \"my_array_t\" that is an array of 15 floats.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">float</span> <span class=\"type\">my_array_t</span>[<span class=\"number\">15</span>];</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Declare a type called \"struct_arr_t\" that is an array of 10 structs of the format</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">str</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    <span class=\"type\">int</span> y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">```  </span><br><span class=\"line\">```c</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">str</span> <span class=\"title\">struct_arr_t</span>[10];</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>Define a variable called my_str_arr of type struct_arr_type.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">struct_arr_t</span> my_str_arr;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"structures\">Structures</h2>\n<ul>\n<li><p>Can two elements within a structure have the same name?</p>\n<p>No, two elements cannot have the same name</p></li>\n<li><p>Can you initialize a structure like this?</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_str</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">int</span>   x;</span><br><span class=\"line\">  <span class=\"type\">float</span> y;</span><br><span class=\"line\">&#125; mine = &#123; <span class=\"number\">0</span>, <span class=\"number\">0.0</span> &#125;;</span><br></pre></td></tr></table></figure> Yes, you can initialize it like that.</p></li>\n<li><p>Can you initialize a structure like this?</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_str</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">int</span>   x;</span><br><span class=\"line\">  <span class=\"type\">float</span> y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">my_func</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">  my_str mine = &#123; n, <span class=\"number\">0.0</span> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> No, here my_str is not a type. To fix this, use <code>struct mine = &#123; n, 0.0 &#125;;</code> instead.</p></li>\n<li><p>Declare a structure that contains an integer element named i, a floating point element named f, and an array of 20 characters named str (in that order). Name it anything you want.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mystruct</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> i;</span><br><span class=\"line\">  <span class=\"type\">float</span> f;</span><br><span class=\"line\">  <span class=\"type\">char</span> str[<span class=\"number\">20</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Define a variable called \"my_new_struct\" of the type in the previous question.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mystruct</span> <span class=\"title\">my_new_struct</span>;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>Define a variable called \"my_array_of_structs\" that is an array of 40 structures of the type in the prior two questions.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mystruct</span> <span class=\"title\">my_array_of_structs</span>[40];</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p>Define a function called bigger_rectangle() that will accept one argument of the structure type rectangle (declared below) and will multiply the width dimension by 1.5, the height dimension by 2.5 and the length dimension by 3. The function should return the new structure. Define a temporary local variable if you want to.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rectangle</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">float</span> height;</span><br><span class=\"line\">  <span class=\"type\">float</span> width;</span><br><span class=\"line\">  <span class=\"type\">float</span> length;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> rectangle <span class=\"title function_\">bigger_rectangle</span><span class=\"params\">(<span class=\"keyword\">struct</span> rectangle r)</span> &#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rectangle</span> <span class=\"title\">bigger</span>;</span></span><br><span class=\"line\">  bigger.height = r.height * <span class=\"number\">2.5</span>;</span><br><span class=\"line\">  bigger.width = r.width * <span class=\"number\">1.5</span>;</span><br><span class=\"line\">  bigger.length = r.length * <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> bigger;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Write a function named sum_rectangles that will open a binary file named \"rect.in\" for reading and read the binary images of rectangle structures from it. For each rectangle structure, add its elements to those of the first structure read. e.g. sum the height fields of all the structures, sum the width fields of all the structures, etc... Return a structure from sum_rectangles where each element represents the sum of all structures read from the file. i.e. the height field should be the sum of all of the height fields of each of the structures. On any file error, return the structure { -1.0, -1.0, -1.0 }.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rectangle</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">float</span> height;</span><br><span class=\"line\">  <span class=\"type\">float</span> width;</span><br><span class=\"line\">  <span class=\"type\">float</span> length;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> rectangle <span class=\"title function_\">sum_rectangles</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rectangle</span> <span class=\"title\">bad_struct</span> =</span> &#123;<span class=\"number\">-1.0</span>, <span class=\"number\">-1.0</span>, <span class=\"number\">-1.0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  FILE *fp = fopen(<span class=\"string\">&quot;rect.in&quot;</span>, <span class=\"string\">&quot;rb&quot;</span>); </span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!fp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bad_struct;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rectangle</span> <span class=\"title\">sum</span> =</span> &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;; </span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rectangle</span> <span class=\"title\">r</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fread(&amp;r, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> rectangle), <span class=\"number\">1</span>, fp) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    fclose(fp);</span><br><span class=\"line\">    fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bad_struct; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  sum.height = r.height;</span><br><span class=\"line\">  sum.width = r.width;</span><br><span class=\"line\">  sum.length = r.length;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (fread(&amp;r, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> rectangle), <span class=\"number\">1</span>, fp) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    sum.height += r.height;</span><br><span class=\"line\">    sum.width += r.width;</span><br><span class=\"line\">    sum.length += r.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  fclose(fp);</span><br><span class=\"line\">  fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"assert\">assert()</h2>\n<ul>\n<li><p>Under what circumstances would you place an assert() into your code?</p>\n<p>Used to check for logical errors and malformed data.</p></li>\n<li><p>What will be the result of the following code:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">my_func</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (count = <span class=\"number\">0</span>; count &lt; <span class=\"number\">100</span>; count++) &#123;</span><br><span class=\"line\">    assert(sum &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">    sum = sum + count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> The program will abort/crash on the assert line.</p></li>\n<li><p>What might you do to the previous code to make it do a \"better\" job?</p>\n<p>Move <code>assert(sum &gt; 0);</code> down, after for loop. Or change to <code>assert(sum &gt;= 0);</code></p></li>\n</ul>\n<h2 id=\"string-operations\">String Operations</h2>\n<ul>\n<li><p>Write a function called do_compare() that will prompt the user for two strings of maximum length 100. It should compare them and print one of the following messages:</p>\n<ul>\n<li>The strings are equal.</li>\n<li>The first string comes before the second.</li>\n<li>The second string comes before the first.</li>\n</ul>\n<p>The function should always return zero.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">do_compare</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> str1[<span class=\"number\">101</span>], str2[<span class=\"number\">101</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Prompt the user to enter two strings</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter the first string (up to 100 characters): &quot;</span>);</span><br><span class=\"line\">    fgets(str1, <span class=\"keyword\">sizeof</span>(str1), <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Enter the second string (up to 100 characters): &quot;</span>);</span><br><span class=\"line\">    fgets(str2, <span class=\"keyword\">sizeof</span>(str2), <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Compare the strings</span></span><br><span class=\"line\">    <span class=\"type\">int</span> cmp = <span class=\"built_in\">strcmp</span>(str1, str2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Print the comparison result</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cmp == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The strings are equal.\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cmp &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The first string comes before the second.\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The second string comes before the first.\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h2 id=\"variables\">Variables</h2>\n<ul>\n<li>What is the difference between initialization of a variable and assignment to a variable?</li>\n</ul>\n<p>Initialization is giving a variable its initial value, typically at the time of declaration, while assignment is giving a new value to an already declared variable at any point after initialization.</p>\n<ul>\n<li>What is the difference between a declaration and a definition?</li>\n</ul>\n<p>Declaration is announcing the properties of var (no memory allocation), definition is allocating storage for a var and initializing it.</p>\n<ul>\n<li>What is the difference between a global variable and a local variable?</li>\n</ul>\n<p>Global variables have a broader scope, longer lifetime, and higher visibility compared to local variables, which are limited to the scope of the function in which they are declared.</p>\n<ul>\n<li><p>For the following questions, assume that the size of an 'int' is 4 bytes, the size of a 'char' is one byte, the size of a 'float' is 4 bytes, and the size of a 'double' is 8 bytes. Write the size of the following expressions:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_coord</span> &#123;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\">  <span class=\"type\">int</span> y;</span><br><span class=\"line\">  <span class=\"type\">double</span> altitude;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_line</span> &#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_coord</span> <span class=\"title\">first</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_coord</span> <span class=\"title\">second</span>;</span></span><br><span class=\"line\">  <span class=\"type\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_coord</span> <span class=\"title\">var</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_coord</span> <span class=\"title\">array</span>[3];</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_line</span> <span class=\"title\">one_line</span>;</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_line</span> <span class=\"title\">two_lines</span>[2];</span></span><br></pre></td></tr></table></figure></p>\n<p>sizeof(struct my_coord) = __<u>16</u>___</p>\n<p>sizeof(var) = __<u>16</u>___</p>\n<p>sizeof(array[1]) = __<u>16</u>___</p>\n<p>sizeof(array[2]) = __<u>16</u>___</p>\n<p>sizeof(array) = __<u>48</u>___</p>\n<p>sizeof(struct my_line) = __<u>48</u>___</p>\n<p>sizeof(two_lines) = __<u>96</u>___</p>\n<p>sizeof(one_line) = __<u>48</u>___</p></li>\n</ul>\n<p>Explanation: When calculating the size of a struct, we need to consider alignment and padding, which can affect the overall size of the struct. In the case of struct <code>my_line</code>, the total size is influenced by the alignment requirements of its members. The largest member of <code>struct my_coord</code> is <code>double altitude</code>, which is 8 bytes. This means that the <code>double altitude</code> member will determine the alignment and padding for the entire <code>struct my_coord</code> within <code>struct my_line</code>.</p>\n<p>So here <code>char name[10];</code> will occupy (10 bytes) + (6 bytes padding to align char[10] on an 8-byte boundary). This ends up with (16+16+10+6) for the size of <code>struct my_line</code>.</p>\n<p><strong>Remember that the size of the structure should be a multiple of the biggest variable.</strong></p>\n<ul>\n<li><p>Draw the memory layout of the prior four variables; var, array, one_line, and two_lines on a line of boxes. Label the start of each variable and clearly show how many bytes each element within each structure variable consumes.</p></li>\n<li><p>Re-define the two_lines variable above and _initialize_ it's contents with the following values:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">first my_line structure:</span><br><span class=\"line\">    first my_coord structure:</span><br><span class=\"line\">       x = <span class=\"number\">1</span></span><br><span class=\"line\">       y = <span class=\"number\">3</span></span><br><span class=\"line\">       altitude = <span class=\"number\">5.6</span></span><br><span class=\"line\">    second my_coord structure:</span><br><span class=\"line\">       x = <span class=\"number\">4</span></span><br><span class=\"line\">       y = <span class=\"number\">5</span></span><br><span class=\"line\">       altitude = <span class=\"number\">2.1</span></span><br><span class=\"line\">    name = <span class=\"string\">&quot;My Town&quot;</span></span><br><span class=\"line\">second my_line structure:</span><br><span class=\"line\">    first my_coord structure:</span><br><span class=\"line\">       x = <span class=\"number\">9</span></span><br><span class=\"line\">       y = <span class=\"number\">2</span></span><br><span class=\"line\">       altitude = <span class=\"number\">1.1</span></span><br><span class=\"line\">    second my_coord structure:</span><br><span class=\"line\">       x = <span class=\"number\">3</span></span><br><span class=\"line\">       y = <span class=\"number\">3</span></span><br><span class=\"line\">       altitude = <span class=\"number\">0.1</span></span><br><span class=\"line\">    name = <span class=\"string\">&quot;Your Town&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_line</span> <span class=\"title\">two_lines</span>[2] =</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#123;<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5.6</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">2.1</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;My Town&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &#123;<span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">1.1</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">0.1</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;Your Town&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>How many bytes large is the following definition?</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_coord</span> <span class=\"title\">new_array</span>[] =</span> &#123; &#123; <span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">3.5</span> &#125;, &#123; <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4.5</span>&#125;, &#123; <span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">9.5</span>&#125; &#125;;</span><br></pre></td></tr></table></figure>\n<p>(4 + 4 + 8) * 3 = 48</p></li>\n</ul>\n<h2 id=\"basic-pointer-operations\">Basic Pointer Operations</h2>\n<ul>\n<li><p>What is printed by the following three pieces of code:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"type\">int</span> x = <span class=\"number\">0</span>;                  <span class=\"type\">int</span> x = <span class=\"number\">0</span>;                  <span class=\"type\">int</span> x = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> y = <span class=\"number\">0</span>;                  <span class=\"type\">int</span> y = <span class=\"number\">0</span>;                  <span class=\"type\">int</span> y = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = <span class=\"literal\">NULL</span>;              <span class=\"type\">int</span> *p = <span class=\"literal\">NULL</span>;              <span class=\"type\">int</span> *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">                               <span class=\"type\">int</span> *q = <span class=\"literal\">NULL</span>;              <span class=\"type\">int</span> *q = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  p = &amp;x;</span><br><span class=\"line\">  *p = <span class=\"number\">5</span>;\t\t\t           p = &amp;x;                     p = &amp;y;</span><br><span class=\"line\">  p = &amp;y;\t\t               q = p;\t                   q = &amp;x;</span><br><span class=\"line\">  *p = <span class=\"number\">7</span>;                     *q = <span class=\"number\">7</span>;\t                   p = <span class=\"number\">2</span>;</span><br><span class=\"line\">                                                           q = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, x, y);    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, x, y);    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, x, y);</span><br></pre></td></tr></table></figure></p>\n<p>The 1st column code snippet printed <code>5 7</code>. The 1st column code snippet printed <code>7 0</code>. The 1st column code snippet printed <code>0 0</code>.</p></li>\n<li><p>Consider the following variable definitions:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> arr[<span class=\"number\">10</span>] = &#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *p;</span><br></pre></td></tr></table></figure></p>\n<p>And assume that p is initialized to point to one of the integers in arr. Which of the following statements are legitimate? Why or why not?</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">p = arr;      arr = p;      p = &amp;arr[<span class=\"number\">2</span>];   p = arr[x];     p = &amp;arr[x];</span><br><span class=\"line\"></span><br><span class=\"line\">arr[x] = p;   arr[p] = x;   &amp;arr[x] = p;   p = &amp;arr;       x = *arr;</span><br><span class=\"line\"></span><br><span class=\"line\">x = arr + x;  p = arr + x;  arr = p + x;   x = &amp;(arr+x);   p++;</span><br><span class=\"line\"></span><br><span class=\"line\">x = --p;      x = *p++;     x = (*p)++;    arr++;          x = p - arr;</span><br><span class=\"line\"></span><br><span class=\"line\">x = (p&gt;arr);  arr[*p]=*p;   *p++ = x;      p = p + <span class=\"number\">1</span>;      arr = arr + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<p>Let's go through each statement to determine if it is legitimate or not, and provide an explanation:</p>\n<pre><code>* `p = arr;` - Legitimate. Assigns the address of the first element of `arr` to `p`.\n* `arr = p;` - **Not legitimate**. You cannot assign to an array name.\n* `p = &amp;arr[2];` - Legitimate. Assigns the address of `arr[2]` to `p`.\n* `p = arr[x];` - **Not legitimate**. `arr[x]` is an integer value, not an address.\n* `p = &amp;arr[x];` - Legitimate. Assigns the address of `arr[x]` to `p`.\n* `arr[x] = p;` - **Not legitimate**. `arr[x]` is an integer value, not a pointer.\n* `arr[p] = x;` - **Not legitimate**. `arr[p]` is not a valid operation. `p` should be an index, not a pointer.\n* `&amp;arr[x] = p;` - **Not legitimate**. You cannot assign a value to the address of an element.\n* `p = &amp;arr;` - **Not legitimate**. `&amp;arr` is the address of the whole array, not a pointer to an integer.\n* `x = *arr;` - Legitimate. Assigns the value of the first element of `arr` to `x`.\n* `x = arr + x;` - Legitimate. Calculates the address of `arr[x]` and assigns it to `x`.\n* `p = arr + x;` - Legitimate. Calculates the address of `arr[x]` and assigns it to `p`.\n* `arr = p + x;` - **Not legitimate**. You cannot assign to an array name.\n* `x = &amp;(arr+x);` - **Not legitimate**. `&amp;` expects an lvalue, but `(arr+x)` is not an lvalue.\n* `p++;` - Legitimate. Increments the pointer `p` to point to the next element.\n* `x = --p;` - Legitimate. Decrements `p` and assigns its value to `x`.\n* `x = *p++;` - Legitimate. Assigns the value pointed to by `p` to `x`, then increments `p`.\n* `x = (*p)++;` - Legitimate. Assigns the value pointed to by `p` to `x`, then increments the value at `p`.\n* `arr++;` - **Not legitimate**. You cannot increment the entire array `arr`.\n* `x = p - arr;` - Legitimate. Calculates the difference in addresses between `p` and `arr` and assigns it to `x`.\n* `x = (p&gt;arr);` - **Not legitimate**. Comparison between a pointer and an array is not valid.\n* `arr[*p]=*p;` - **Not legitimate**. `arr[*p]` is not a valid assignment target.\n* `*p++ = x;` - Legitimate. Assigns `x` to the value pointed to by `p`, then increments `p`.\n* `p = p + 1;` - Legitimate. Increments the pointer `p` to point to the next memory location.\n* `arr = arr + 1;` - **Not legitimate**. You cannot increment the entire array `arr`.</code></pre>\n<ul>\n<li><p>Given the following definitions:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> arr[] = &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> *p = arr;</span><br></pre></td></tr></table></figure> are the following two statements equivalent?</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">p = p + <span class=\"number\">1</span>;</span><br><span class=\"line\">p++;</span><br></pre></td></tr></table></figure> What can you say about the result of adding a pointer to an integer?</p>\n<p>Yes, the two statements <code>p = p + 1;</code> and <code>p++;</code> are equivalent in this context. Both statements increment the pointer p to point to the next element in the array arr.</p>\n<p>In general, if ptr is a pointer to type T, then <code>ptr + n</code> will point to the memory location \"ptr + n * sizeof(T)\". This is useful for iterating over arrays or accessing elements in memory sequentially.</p></li>\n<li><p>Write a function called 'swap' that will accept two pointers to integers and will exchange the contents of those integer locations.</p>\n<ul>\n<li>Show a call to this subroutine to exchange two variables.</li>\n<li>Why is it necessary to pass pointers to the integers instead of just passing the integers to the Swap subroutine?</li>\n<li>What would happen if you called swap like this:</li>\n</ul>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x = <span class=\"number\">5</span>;</span><br><span class=\"line\">swap(&amp;x, &amp;x);</span><br></pre></td></tr></table></figure></p>\n<p>Here is the sample code:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp = *a;</span><br><span class=\"line\">    *a = *b;</span><br><span class=\"line\">    *b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">5</span>, y = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Before swap: x = %d, y = %d\\n&quot;</span>, x, y);</span><br><span class=\"line\">    swap(&amp;x, &amp;y);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;After swap: x = %d, y = %d\\n&quot;</span>, x, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> It is necessary to pass pointers to the integers instead of just passing the integers themselves to the swap subroutine because <strong>C passes arguments by value</strong>. When you pass an integer to a function, a copy of the integer's value is made and passed to the function. Any changes made to the parameter inside the function do not affect the original variable outside the function.</p></li>\n</ul>\n<p>By passing pointers to integers (<code>int *a</code> and <code>int *b</code>), you are passing the memory addresses of the integers. This allows the swap function to access and modify the actual integers in memory, rather than working with copies. As a result, the values of the integers are swapped correctly, and the changes are reflected outside the function.</p>\n<p>In summary, <strong>passing pointers to integers allows the swap function to modify the values of the integers themselves</strong>, rather than just copies of the values.</p>\n<p>If you called <code>swap(&amp;x, &amp;x);</code> with the same pointer <code>&amp;x</code> for both arguments, it would effectively try to swap the contents of x with itself. The result would be that x would remain unchanged, as the swap operation would effectively cancel itself out. The swap operation had no net effect on x.</p>\n<ul>\n<li>Can you do this: (why or why not?)</li>\n</ul>\n<pre><code><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">swap(&amp;<span class=\"number\">123</span>, &amp;<span class=\"number\">456</span>);</span><br></pre></td></tr></table></figure>\nNo, you cannot do this because &amp;123 and &amp;456 are not valid addresses in memory. 123 and 456 are constants, not variables, so you cannot take their addresses for swapping the content.</code></pre>\n<ul>\n<li><p>What does the following code print:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">func</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> <span class=\"built_in\">array</span>[] = &#123; <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span> &#125;;</span><br><span class=\"line\">  <span class=\"type\">int</span> *P = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  p = &amp;<span class=\"built_in\">array</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">  p++;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, *(p++));</span><br><span class=\"line\">  *(--p) = <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  (*p)++;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; (<span class=\"keyword\">sizeof</span>(<span class=\"built_in\">array</span>)/<span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>)); i++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, <span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The output is</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">4 2 9 8 8</span><br></pre></td></tr></table></figure>\n<p>Explanation:</p>\n<ul>\n<li>Initially, p points to array[2] which is 9.</li>\n<li>After p++, p points to array[3] which is 3. The value 3 is printed.</li>\n<li>Then, *(--p) = 7; sets array[3] to 7.</li>\n<li>Next, (*p)++; increments the value at array[3] (which is now 7) to 8.</li>\n<li>Finally, the for loop prints the elements of array, which are 4 2 9 8 8.</li>\n</ul></li>\n<li><p>Write a subroutine called clear_it that accepts a pointer to integer and an integer that indicates the size of the space that the pointer points to. clear_it should set all of the elements that the pointer points to to zero.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">clear_it</span><span class=\"params\">(<span class=\"type\">int</span> *ptr, <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        *(ptr + i) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Write a subroutine called add_vectors that accepts three pointers to integer and a fourth parameter to indicate what the size of the spaces that the pointers point to. add_vectors should add the elements of the first two 'vectors' together and store them in the third 'vector'. e.g. if two arrays of 10 integers, A and B, were to be added together and the result stored in an array C of the same size, the call would look like <code>add_vectors(a, b, c, 10);</code> and, as a result, c[5] would be the sum of a[5] and b[5]</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add_vectors</span><span class=\"params\">(<span class=\"type\">int</span> *a, <span class=\"type\">int</span> *b, <span class=\"type\">int</span> *c, <span class=\"type\">int</span> size)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">        c[i] = a[i] + b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n","categories":["Study Notes"],"tags":["C/C++ Programming"]},{"title":"Does Diffie-Hellman Key Exchange Use a Technology Similar to RSA?","url":"/en/2022/11/21/DH-and-RSA/","content":"<p>Recently, at a WPA3 technology introduction meeting within the R&amp;D team, the speaker mentioned that the OWE technology for encrypted wireless open networks is based on Diffie-Hellman key exchange, and casually said that Diffie-Hellman key exchange is using technology similar to RSA. This statement is wrong!<span id=\"more\"></span> Although Diffie-Hellman key exchange and RSA encryption algorithms belong to public key cryptography, their working mechanisms and application scenarios are different. As a research and development engineer and technician supporting network security, it is necessary to clearly understand the working mechanism and mathematical principles of the two, as well as the differences and connections between them.</p>\n<div class=\"note success no-icon\"><p><strong>A cryptographic system should be secure even if everything about the system, except the key, is public knowledge.</strong><br> <strong>— <em>Auguste Kerckhoffs</em> (Dutch linguist and cryptographer, best known for his “Kerckhoffs's principle” of cryptography) </strong></p>\n</div>\n<h2 id=\"diffie-hellman-key-exchange\">Diffie-Hellman Key Exchange</h2>\n<p>Diffie-Hellman key exchange (DH for short) is a secure communication protocol that allows two communicating parties to exchange messages over an insecure public channel to create a shared secret without any foreknowledge. This secret can be used to generate keys for subsequent communications between the two parties using symmetric encryption techniques (e.g. AES).</p>\n<p>The idea of ​​this kind of public key distribution to achieve shared secrets was first proposed by Ralph Merkle, a doctoral student of Stanford University professor Martin Hellman, and then Professor Hellman's research assistant Whitfield Diffie and Professor Herman jointly invented a practical key exchange protocol. In 1976, Diffie and Hellman were invited to publish their paper \"New Directions in Cryptography\" in IEEE Transactions on Information Theory, which laid the foundation for the public key cryptography system and officially announced the birth of the new Diffie-Herman key exchange technology.</p>\n<p>The working principle of Diffie-Hellman key exchange is based on the modular exponentiation operation with the <a href=\"https://en.wikipedia.org/wiki/Multiplicative_group_of_integers_modulo_n\">multiplicative group of integers modulo <em>n</em></a> and <a href=\"https://en.wikipedia.org/wiki/Primitive_root_modulo_n\">its primitive root modulo <em>n</em></a> in number theory. The following is a simple and specific example to describe:</p>\n<ol type=\"1\">\n<li>Alice chooses a prime number <span class=\"math inline\">\\(p=71\\)</span>, and then a primitive root <span class=\"math inline\">\\(g=7\\)</span> of the multiplicative group of integers modulo <span class=\"math inline\">\\(p\\)</span></li>\n<li>Alice chooses a random number <span class=\"math inline\">\\(a=17\\)</span> that is less than <span class=\"math inline\">\\(p\\)</span>, calculate <span class=\"math inline\">\\(A=g^a\\bmod\\;p=7^{17}\\bmod\\;71 = 62\\)</span></li>\n<li>Alice sends all <span class=\"math inline\">\\((p,g,A)\\)</span> to Bob</li>\n<li>Bob also chooses a random number <span class=\"math inline\">\\(b=39\\)</span> that is less than <span class=\"math inline\">\\(p\\)</span>, calculate <span class=\"math inline\">\\(B=g^b\\bmod\\;p=7^{39}\\bmod\\;71 = 13\\)</span></li>\n<li>Bob sends <span class=\"math inline\">\\(B\\)</span> back to Alice</li>\n<li>Alice calculates <span class=\"math inline\">\\(s=B^a\\bmod\\;p=13^{17}\\bmod\\;71 = 42\\)</span></li>\n<li>Bob calculate <span class=\"math inline\">\\(s=A^b\\bmod\\;p=62^{39}\\bmod\\;71 = 42\\)</span></li>\n</ol>\n<details class=\"note primary\"><summary><p><strong>Is it troublesome calculating <span class=\"math inline\">\\(\\color{#93F}{\\bf62^{39}\\bmod\\;71}\\)</span>? It is actually very easy……</strong></p>\n</summary>\n<p>Remember that modular arithmetic has the property of preserving primitive operations: <span class=\"math display\">\\[(a⋅b)\\bmod\\;m = [(a\\bmod\\;m)⋅(b\\bmod\\;m)]\\bmod\\;m\\]</span> Combining with the principle of <a href=\"https://en.wikipedia.org/wiki/Exponentiation_by_squaring\">Exponentiation by Squaring</a>, and applying the <a href=\"https://en.wikipedia.org/wiki/Modular_exponentiation#Right-to-left_binary_method\">right-to-left binary method</a> to do fast calculation: <span class=\"math display\">\\[\\begin{align}\n62^{39}\\bmod\\;71 &amp; = (62^{2^0}⋅62^{2^1}⋅62^{2^2}⋅62^{2^5})\\bmod\\;71\\\\\n&amp; = (62⋅10⋅(62^{2^1}⋅62^{2^1})⋅(62^{2^4}⋅62^{2^4}))\\bmod\\;71\\\\\n&amp; = (62⋅10⋅(10⋅10)⋅(62^{2^3}⋅62^{2^3}⋅62^{2^4}))\\bmod\\;71\\\\\n&amp; = (62⋅10⋅29⋅(29⋅29⋅62^{2^3}⋅62^{2^4}))\\bmod\\;71\\\\\n&amp; = (62⋅10⋅29⋅(60⋅60⋅62^{2^4}))\\bmod\\;71\\\\\n&amp; = (62⋅10⋅29⋅(50⋅50))\\bmod\\;71\\\\\n&amp; = (62⋅10⋅29⋅15)\\bmod\\;71\\\\\n&amp; = 42\n\\end{align}\\]</span></p>\n\n</details>\n<p>As if by magic, both Alice and Bob get the same <span class=\"math inline\">\\(s\\)</span> value of <span class=\"math inline\">\\(42\\)</span>. This is the shared secret of two people! After this, Alice and Bob can use the hash value of <span class=\"math inline\">\\(s\\)</span> as a symmetric key for encrypted communication, which is unknown to any third party.</p>\n<p>Why? Because of the nature of the modular exponentiation of the multiplicative group, <span class=\"math inline\">\\(g^{ab}\\)</span> and <span class=\"math inline\">\\(g^{ba}\\)</span> are equal with the modulo <span class=\"math inline\">\\(p\\)</span>:</p>\n<p><span class=\"math display\">\\[A^b\\bmod\\;p=g^{ab}\\bmod\\;p=g^{ba}\\bmod\\;p=B^a\\bmod\\;p\\]</span></p>\n<p>So calculated <span class=\"math inline\">\\(s\\)</span> values ​​must be the same. Of course, real applications would use much larger <span class=\"math inline\">\\(p\\)</span>, otherwise the attacker can exhaust all the remainder to try to crack the ciphertext encrypted by the symmetric key.</p>\n<p>Notice <span class=\"math inline\">\\((p,g,A,B)\\)</span> is public and <span class=\"math inline\">\\((a,b,s)\\)</span> is secret. Now suppose an eavesdropper Eve can see all the messages between Alice and Bob, can she deduce <span class=\"math inline\">\\(s\\)</span>? The answer is that this is only practically possible if the values of <span class=\"math inline\">\\((p,a,b)\\)</span> are very small. Eve must first invert <span class=\"math inline\">\\((a,b)\\)</span> from what she knows about <span class=\"math inline\">\\((p,g,A,B)\\)</span>:</p>\n<ul>\n<li><span class=\"math inline\">\\(A=g^a\\bmod\\;p\\Rightarrow \\color{fuchsia}{a = log_g A\\bmod\\;p}\\)</span></li>\n<li><span class=\"math inline\">\\(B=g^b\\bmod\\;p\\Rightarrow \\color{fuchsia}{b = log_g B\\bmod\\;p}\\)</span></li>\n</ul>\n<p>This is the famous <strong>discrete logarithm problem</strong>. It is a recognized computational challenge and no polynomial-time efficient algorithm is currently found to compute the discrete logarithm. So this protocol is considered eavesdropping-safe as long as the appropriate <span class=\"math inline\">\\((p,a,b)\\)</span> is chosen. <a href=\"https://tools.ietf.org/html/rfc3526\">RFC 3526</a> recommends 6 Modular Exponential (MODP) DH groups of large prime numbers for practical applications, the smallest of which has 1536 bits!</p>\n<p>It should also be emphasized that Diffie-Hellman key exchange itself does not require authentication of both communicating parties, so it is vulnerable to man-in-the-middle attacks. If an attacker can tamper with the messages sent and received by both sides in the middle of the channel, he can complete Diffie-Hellman key exchange twice by pretending to be an identity. The attacker can then decrypt the entire message. Therefore, usually practical applications need to incorporate authentication mechanisms to prevent such attacks.</p>\n<p>Diffie-Hellman key exchange technique is a crucial contribution to modern cryptography. In 2015, 39 years after the announcement of this invention, Diffie and Hellman jointly won the ACM Turing Award, known as the \"Nobel Prize of Computing\". The ACM award poster directly stated that they \"invented public key cryptography\".</p>\n<p><img src=\"acm-turing-2015.jpeg\" /></p>\n<h2 id=\"rsa-encryption-algorithm\">RSA Encryption Algorithm</h2>\n<p>RSA is a public key encryption algorithm. The public key encryption system with the same name as the core technology is widely used in secure data transmission. Today, the comprehensive development of the Internet has provided great convenience to the public in all aspects of society. Whether you are surfing, gaming, entertaining, shopping, instant messaging with friends and family, managing a bank account, investing in financial securities, or simply sending and receiving email, RSA is working behind the scenes to protect your privacy and data security.</p>\n<p>RSA is actually an acronym for the last names of three people: American cryptographer Ronald <strong>R</strong>ivest, Israeli cryptographer Adi <strong>S</strong>hamir, and American computer scientist Leonard Max <strong>A</strong>dleman. In 1977, Levister, Shamir, and Adleman collaborated at the Massachusetts Institute of Technology (MIT) to invent the RSA encryption algorithm. The algorithm was first published in a public technical report at MIT, and later compiled and published in the February 1978 issue of <em>ACM Communications</em> under the title \"<a href=\"https://dl.acm.org/doi/10.1145/359340.359342\">A Method for Obtaining Digital Signatures and Public Key Cryptosystems</a>\".</p>\n<p>The basic idea of RSA is that the user creates a key pair consisting of a public key and a private key. The public key is freely distributed and the private key must be kept secret. Anyone can encrypt a message with the public key, and the resulting ciphertext can only be deciphered by the private key holder. On the other hand, any message encrypted with the private key can be decrypted by the public key. Since we assume that the private key can only be held by a specific object, encrypting with the private key is equivalent to generating a digital signature, and decrypting with the public key is equivalent to verifying the signature.</p>\n<p>The RSA encryption algorithm consists of a four-step operational process: key generation, key distribution, encryption, and decryption. A simple and concrete example is also given below to illustrate.</p>\n<ol type=\"1\">\n<li>Alice randomly chooses two prime numbers <span class=\"math inline\">\\(p=127\\)</span> and <span class=\"math inline\">\\(q=5867\\)</span>, computes <span class=\"math inline\">\\(N=pq=745109\\)</span></li>\n<li>Alice computes <a href=\"https://en.wikipedia.org/wiki/Carmichael_function\">Carmichael's totient function</a> <span class=\"math inline\">\\(\\lambda(N)=\\lambda(745109)=52794\\)</span>\n<ul>\n<li>When <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> are both primes, <span class=\"math inline\">\\(\\lambda(pq)=\\mathrm{lcm}(p − 1, q − 1)\\)</span></li>\n<li><span class=\"math inline\">\\(\\mathrm{lcm}\\)</span> represents the function for the least common multiple, which may be calculated through the Euclidean algorithm</li>\n<li><span class=\"math inline\">\\(\\mathrm{lcm}(126,5866)=52794\\)</span></li>\n</ul></li>\n<li>Alice chooses an integer <span class=\"math inline\">\\(e=5\\)</span> less than <span class=\"math inline\">\\(\\lambda(N)\\)</span> but also coprime with <span class=\"math inline\">\\(\\lambda(N)\\)</span>, and calculates the <a href=\"https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\">modular multiplicative inverse</a> of <span class=\"math inline\">\\(e\\)</span> modulo <span class=\"math inline\">\\(\\lambda(N)\\)</span>. That is <span class=\"math inline\">\\(d\\equiv e^{-1}\\pmod {\\lambda(N)}\\)</span>, <span class=\"math inline\">\\(d=10559\\)</span>\n<ul>\n<li>The definition of modular multiplicative inverse is, determine <span class=\"math inline\">\\(d\\)</span> such that <span class=\"math inline\">\\((d⋅e)\\;\\bmod\\;\\lambda(N)=1\\)</span></li>\n<li><span class=\"math inline\">\\(d=10559\\equiv 5^{-1}\\pmod {52794}\\)</span></li>\n</ul></li>\n<li><span class=\"math inline\">\\(\\pmb{(N,e)}\\)</span> <strong>is Alice's public key</strong>，<span class=\"math inline\">\\(\\pmb{(N,d)}\\)</span> <strong>is her private key</strong>\n<ul>\n<li>Alice sends her public key <span class=\"math inline\">\\((745109,5)\\)</span> to Bob</li>\n<li>Alice saves her private key <span class=\"math inline\">\\((745109,10559)\\)</span> in a secret place</li>\n<li>Alice distroies all records of <span class=\"math inline\">\\(p,q,\\lambda(N)\\)</span></li>\n</ul></li>\n<li>When Bob wants to send Alice a message <span class=\"math inline\">\\(M\\)</span>, according to the encoding format agreed upon by both parties, he first translates <span class=\"math inline\">\\(M\\)</span> to one or more positive integers <span class=\"math inline\">\\(m\\)</span> that are all less than <span class=\"math inline\">\\(N\\)</span>, and then uses Alice's public key to compute the ciphertext <span class=\"math inline\">\\(c\\)</span> one by one. The calculation formula is <span class=\"math inline\">\\(\\pmb{c\\equiv m^e\\pmod N}\\)</span>\n<ul>\n<li>Assume <span class=\"math inline\">\\(M\\)</span> is \"<em>CACC 9678</em>\", and the encoding scheme is 0 for spaces, 1-26 for a-z/A-Z (ignoring case), and 27-36 for 0-9</li>\n<li>Encoding yields the positive integer string \"030103 030036 333435\". Note that each integer is less than 745109</li>\n<li>After encryption, it becomes ciphertext integer string \"184539 741303 358095\"\n<ul>\n<li><span class=\"math inline\">\\(184539 \\equiv 30103^5\\pmod {745109}\\)</span></li>\n<li><span class=\"math inline\">\\(741303 \\equiv 30036^5\\pmod {745109}\\)</span></li>\n<li><span class=\"math inline\">\\(358095 \\equiv 333435^5\\pmod {745109}\\)</span></li>\n</ul></li>\n</ul></li>\n<li>After Alice receives the ciphertext integer string, she uses her private key to compute the plaintext one by one, the calculation formula is <span class=\"math inline\">\\(\\pmb{m\\equiv c^d\\pmod N}\\)</span>\n<ul>\n<li><span class=\"math inline\">\\(30103 \\equiv 184539^{10559}\\pmod {745109}\\)</span></li>\n<li><span class=\"math inline\">\\(30036 \\equiv 741303^{10559}\\pmod {745109}\\)</span></li>\n<li><span class=\"math inline\">\\(333435 \\equiv 358095^{10559}\\pmod {745109}\\)</span></li>\n</ul></li>\n</ol>\n<details class=\"note primary\"><summary><p><strong>The third step above works out <span class=\"math inline\">\\(d\\)</span> from <span class=\"math inline\">\\(\\color{#93F}{\\bf(d\\cdot 5)\\;mod\\;52794=1}\\)</span>, here's how</strong></p>\n</summary>\n<p>The modular multiplicative invers can be solved quickly by applying the <a href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\">Extended Euclidean algorithm</a>. Referring to this Wiki page, with the precondition of coprime, the following equation can be written (<span class=\"math inline\">\\(gcd\\)</span> is the function for the greatest common divisor function):</p>\n<p><span class=\"math display\">\\[52794s+5t=\\mathrm{gcd}(5, 52794)=1\\]</span></p>\n<p>The goal is to find the smallest positive integer <span class=\"math inline\">\\(t\\)</span> that satisfies the above equation. The following table shows the iterative process of the algorithm:</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Index <span class=\"math inline\">\\(i\\)</span></th>\n<th style=\"text-align: left;\">Quotient <span class=\"math inline\">\\(q_{i-1}\\)</span></th>\n<th style=\"text-align: left;\">Remainder <span class=\"math inline\">\\(r_i\\)</span></th>\n<th style=\"text-align: left;\"><span class=\"math inline\">\\(s_i\\)</span></th>\n<th style=\"text-align: left;\"><span class=\"math inline\">\\(t_i\\)</span></th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(52794\\)</span></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(1\\)</span></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(0\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: left;\"></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(5\\)</span></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(0\\)</span></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(1\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(52794 \\div5 = 10558\\)</span></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(4\\)</span></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(1 - 10558\\times 0 = 1\\)</span></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(0 - 10558\\times 1 = -10558\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">3</td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(5 \\div4 = 1\\)</span></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(1\\)</span></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(0-1\\times1 = -1\\)</span></td>\n<td style=\"text-align: left;\"><span class=\"math inline\">\\(1 - 1\\times (-10558) = \\bf10559\\)</span></td>\n</tr>\n</tbody>\n</table>\n<p>It only takes two iterations to get the remainder <span class=\"math inline\">\\(1\\)</span> and the algorithm ends. The final <span class=\"math inline\">\\(t\\)</span> is the <span class=\"math inline\">\\(5^{-1}\\pmod {52794}\\)</span> we want.</p>\n\n</details>\n<p>String together after decoding to get the same information \"<em>CACC 9678</em>\". Why does Alice's decrypted message match exactly the one sent by Bob? The reason lies in the modular exponentiation operation. First of all, because <span class=\"math inline\">\\(c\\equiv m^e\\pmod N\\)</span>, we can get <span class=\"math inline\">\\(c^d\\equiv (m^e)^d \\equiv m^{ed} \\pmod N\\)</span>. Since <span class=\"math inline\">\\((d⋅e)\\;mod\\;\\lambda(N)=1\\)</span>, it is deduced that <span class=\"math inline\">\\(ed = 1 + h\\lambda(N)\\)</span> (<span class=\"math inline\">\\(h\\)</span> is a non-negative integer为非负整数). Combine these two</p>\n<p><span class=\"math display\">\\[\\Rightarrow m^{ed} = m^{(1+h\\lambda(N))} = \\color{fuchsia}{m(m^{\\lambda(N)})^h \\equiv m(1)^h}\\equiv m\\pmod N\\]</span></p>\n<p>The penultimate congruence above (symbol <span class=\"math inline\">\\(\\equiv\\)</span>) is based on <a href=\"https://en.wikipedia.org/wiki/Euler%27s_theorem\">Euler's theorem</a>). This proves the correctness of the decryption formula <span class=\"math inline\">\\({m\\equiv c^d\\pmod N}\\)</span>! You can also see that the order of <span class=\"math inline\">\\(e\\)</span> and <span class=\"math inline\">\\(d\\)</span> is irrelevant for the result of <span class=\"math inline\">\\(m^{ed}\\pmod N\\)</span>, so the message that Alice encrypted with her private key can be decrypted by Bob with Alice's public key. This also proves the feasibility of digital signatures.</p>\n<p>In terms of security, if a third party can derive <span class=\"math inline\">\\(d\\)</span> from Alice's public key <span class=\"math inline\">\\((N,e)\\)</span>, then the algorithm is broken. But the prerequisite for cracking is to first identify <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> from <span class=\"math inline\">\\(N\\)</span>, which is very difficult when <span class=\"math inline\">\\(N\\)</span> is big. In fact, this is the famous problem of <a href=\"https://en.wikipedia.org/wiki/Integer_factorization\"><strong>factoring large numbers</strong></a>, another recognized computational challenge. So far, \"the best-known algorithms are faster than exponential order of magnitude times and slower than polynomial order of magnitude times.\" The latest record, published on the <a href=\"https://en.wikipedia.org/wiki/RSA_Factoring_Challenge\">RSA Factoring Challenge</a> website, is the February 2020 crack of <a href=\"https://en.wikipedia.org/wiki/RSA_%20numbers#RSA-250\">RSA-250</a>, a large number of 829 bits. This development indicates that the security of 1024-bit <span class=\"math inline\">\\(N\\)</span>-valued public keys is already in jeopardy. In view of this, National Institute of Standards and Technology (NIST) recommends that RSA keys be at least 2048 bits in length for real-world applications.</p>\n<p>On the other hand, although the public key does not need to be transmitted confidentially, it is required to be reliably distributed. Otherwise, Eve could pretend to be Alice and send her own public key to Bob. If Bob believes it, Eve can intercept all messages passed from Bob to Alice and decrypt them with her own private key. Eve will then encrypt this message with Alice's public key and pass it to her. Alice and Bob cannot detect such a man-in-the-middle attack. The solution to this problem is to establish a trusted third-party authority to issue certificates to ensure the reliability of public keys. This is the origin of the Public Key Infrastructure (PKI).</p>\n<p>The RSA public key encryption algorithm is the genius creation of three cryptographers and computer scientists. Its invention is a new milestone in public key cryptography and has become the cornerstone of modern secure Internet communication. The outstanding contribution of Levister, Shamir, and Adelman earned them the ACM Turing Award in 2002, a full 13 years before Diffie and Herman!</p>\n<p><img src=\"acm-turing-2002.jpeg\" /></p>\n<h2 id=\"difference-and-connection\">Difference and Connection</h2>\n<p>The following table summarizes the comparison of Diffie-Hellman key exchange and RSA public key encryption algorithm:</p>\n<table>\n<colgroup>\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Cryptographic Technology</th>\n<th style=\"text-align: center;\">Diffie-Hellman Key Exchange</th>\n<th style=\"text-align: center;\">RSA Encryption Algorithm</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Technology Category</td>\n<td style=\"text-align: center;\">Asymmetric, Public Key Technology</td>\n<td style=\"text-align: center;\">Asymmetric, Public Key Technology</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Mathematical Principles</td>\n<td style=\"text-align: center;\">Integer modulo <span class=\"math inline\">\\(n\\)</span> multiplicative groups, primitive roots</td>\n<td style=\"text-align: center;\">Carmichael function, modular multiplicative inverse, Euler's theorem</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Mathematical Operations</td>\n<td style=\"text-align: center;\">Modular exponentiation, exponentiation by squaring</td>\n<td style=\"text-align: center;\">Modular exponentiation, exponentiation by squaring, extended Euclidean algorithms</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Public Key</td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\((p,g,A,B)\\)</span></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\((N,e)\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Private Key</td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\((a,b,s)\\)</span></td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\((N,d)\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Security</td>\n<td style=\"text-align: center;\">Discrete logarithm problem</td>\n<td style=\"text-align: center;\">Large number prime factorization problem</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Typical Applications</td>\n<td style=\"text-align: center;\">Key Exchange</td>\n<td style=\"text-align: center;\">Encryption/Decryption, Digital Signature</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Key Kength</td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\ge2048\\)</span> bits</td>\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\ge2048\\)</span> bits</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Authentication</td>\n<td style=\"text-align: center;\">Requires external support</td>\n<td style=\"text-align: center;\">Requires PKI support for public key distribution</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Forward Secrecy</td>\n<td style=\"text-align: center;\">Support</td>\n<td style=\"text-align: center;\">Not support</td>\n</tr>\n</tbody>\n</table>\n<p>As can be seen, both are asymmetric public key techniques, and both have a public and private key pair. They both use Modular exponentiation and exponentiation by squaring mathematical operations, and the RSA public-key encryption algorithm also requires the application of the extended Euclidean algorithm to solve the modular multiplicative inverse. Despite these similarities, the mathematical principles underlying them are different, and the computational challenges corresponding to their security are different in nature. These characteristics determine that the Diffie-Hellman key exchange can be used for key exchange, but not for encryption/decryption, while the RSA public key encryption algorithm can not only encrypt/decrypt but also support digital signatures. Therefore, the argument that the two use similar technologies cannot be established in general.</p>\n<div class=\"note info\"><p>ElGamal encryption based on the evolution of the Diffie-Hellman key exchange can be used to encrypt/decrypt messages, but due to some historical reasons and the great commercial success of the RSA public key encryption algorithm, ElGamal encryption is not popular.</p>\n</div>\n<p>In modern cryptography, key length is defined as the number of bits of a key used by an encryption algorithm. Theoretically, since all algorithms may be cracked by brute force, the key length determines an upper limit on the security of an encryption algorithm. Cryptanalytic study shows that the key strengths of Diffie-Hellman key exchange and RSA public key encryption algorithm are about the same. The computational intensities for breaking discrete logarithms and factoring large numbers are comparable. Therefore, the recommended key length for both cryptographic technologies in practical applications is at least 2048 bits.</p>\n<p>For authentication, Diffie-Hellman key exchange requires external support, otherwise it is not resistant to man-in-the-middle attacks. RSA public key encryption algorithm can be used to verify digital signatures, but only if there is a PKI supporting reliable public key distribution. The current system of PKI is quite mature, and there is a special Certificate Authority (CA) that undertakes the responsibility of public key legitimacy checking in the public key system, as well as issues and manages public key digital certificates in X.509 format.</p>\n<p>One problem with the RSA public key encryption algorithm in practice is that it does not have <a href=\"https://en.wikipedia.org/wiki/Forward_secrecy\">Forward Secrecy</a>. Forward Secrecy, sometimes referred to as Perfect Forward Secrecy, is a security property of confidential communication protocols, meaning that the leakage of the long-term used master key does not result in the leakage of past session information. If the system has forward secrecy, it can protect the historical communication records in case of private key leakage. Imagine a situation where, although Eve cannot decrypt the RSA-encrypted messages between Alice and Bob, Eve can archive the entire past message ciphertext. One day in the future, Alice's private key for some reason was leaked, then Eve can decrypt all the message records.</p>\n<p>The solution to this problem is Diffie-Hellman key exchange! Remember that the <span class=\"math inline\">\\((A,B)\\)</span> in the public key of the Diffie-Hellman key exchange is generated by both parties from their respective private keys <span class=\"math inline\">\\((a,b)\\)</span>, so if a random <span class=\"math inline\">\\((a,b)\\)</span> value is generated at each session, future key leaks will not crack the previous session key. This shows that Diffie-Hellman key exchange supports forward secrecy! If we combine the forward secrecy of Diffie-Hellman key exchange with the digital signature feature of the RSA public key encryption algorithm, we can implement a key exchange with authentication protection. This process can be simplified by the following example.</p>\n<ol type=\"1\">\n<li>Alice and Bob exchange authenticated RSA public key certificates</li>\n<li>Alice and Bob each generate a random <span class=\"math inline\">\\((a,b)\\)</span> value and compute <span class=\"math inline\">\\((A,B)\\)</span> using the shared Diffie-Hellman <span class=\"math inline\">\\((p,g)\\)</span>.</li>\n<li>Alice encrypts <span class=\"math inline\">\\(A\\)</span> with her RSA private key to generate a digital signature, which she sends to Bob along with <span class=\"math inline\">\\(A\\)</span></li>\n<li>Bob encrypts <span class=\"math inline\">\\(B\\)</span> with his own RSA private key to generate a digital signature and sends it to Alice along with <span class=\"math inline\">\\(B\\)</span>.</li>\n<li>Alice verifies the signature with Bob's RSA public key, confirms that <span class=\"math inline\">\\(B\\)</span> came from Bob, and computes <span class=\"math inline\">\\(s\\)</span> using <span class=\"math inline\">\\((p,a,B)\\)</span>. 6.</li>\n<li>Bob verifies the signature with Alice's RSA public key, confirms that <span class=\"math inline\">\\(A\\)</span> came from Alice, and computes <span class=\"math inline\">\\(s\\)</span> using <span class=\"math inline\">\\((p,b,A)\\)</span></li>\n<li>Alice and Bob agree to share a secret and generate a subsequent symmetric encryption (AES) session key for confidential communication</li>\n</ol>\n<p>Here the RSA digital signature safeguards the key exchange from man-in-the-middle attacks. Also in the second step above, if a new random number is generated for each session, then even if Alice's or Bob's RSA private keys are leaked one day, it does not threaten the security of previous sessions because the eavesdropper still has to solve the discrete logarithm puzzle. We have also achieved forward secrecy. In fact, this is the working mechanism of the DHE-RSA cipher suite as defined by the ubiquitous Transport Layer Security (TLS) protocol.</p>\n<h2 id=\"dhe-rsa-cipher-suite\">DHE-RSA Cipher Suite</h2>\n<p>Transport Layer Security (TLS) and its predecessor Secure Sockets Layer (SSL) is a security protocol that provides security and data integrity for Internet communications. TLS is widely used in applications such as browsers, email, instant messaging, VoIP, and virtual private networks (VPNs), and has become the de facto industry standard for secure Internet communications. Currently, <a href=\"https://tools.ietf.org/html/rfc5246\">TLS 1.2</a> is the commonly supported version of the protocol, supporting secure connections over TCP. Datagram Transport Layer Security (DTLS) protocol is also defined for UDP applications. DTLS is much the same as TLS, with some extensions for connectionless UDP transport in terms of reliability and security. <a href=\"https://tools.ietf.org/html/rfc6347\">DTLS 1.2</a> matches the functionality of TLS 1.2.</p>\n<p>The TLS protocol uses a client-server architectural model. It works by using X.509 authentication and asymmetric encryption algorithms to authenticate the communicating parties, after which keys are exchanged to generate a symmetric encryption session key. This session key is then used to encrypt the data exchanged between the two communicating parties, ensuring the confidentiality and reliability of the information without fear of attack or eavesdropping by third parties. For identification purposes, the TLS 1.2 protocol combines the <em>authentication, key exchange, bulk encryption, and message authentication code algorithms</em> used into the <strong>Cipher Suite</strong> name. Each Cipher Suite is given a double-byte encoding. The <a href=\"https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4\">TLS Cipher Suite Registry</a> provides a reference table of all registered Cipher Suite names, sorted by encoding value from small to large.</p>\n<div class=\"note info\"><p>Since the computation intensity of asymmetric encryption algorithms (RSA, etc.) is much higher than that of symmetric encryption algorithms (AES, etc.), practical applications almost always use symmetric encryption algorithms to encrypt messages in batches in terms of performance.</p>\n</div>\n<p>TLS 1.2 protocol supports a series of cipher suites that combine the Diffie-Hellman key exchange with the RSA public key encryption algorithm. They all start with TLS_DH_RSA or TLS_DHE_RSA`. The \"E\" in DHE stands for \"Ephemeral\", which means that a random <span class=\"math inline\">\\((a,b)\\)</span> value is required to be generated for each session. So TLS_DHE_RSA cipher suite can provide forward secrecy, while TLS_DH_RSA cannot, and the former should be preferred in practical applications.</p>\n<p>Here we take a typical TLS_DHE_RSA_WITH_AES_128_CBC_SHA (encoding 0x00,0x33) cipher suite as an example to explain the process of Diffie-Hellman working with RSA to establish a DTLS session. First, explain the composition of the cipher suite.</p>\n<ul>\n<li>DHE: ephemeral DH to implement key exchange</li>\n<li>RSA: public key for signing and certifying the DHE</li>\n<li>AES_128_CBC: 128-bit CBC mode AES encryption</li>\n<li>SHA: 160-bit HMAC-SHA1 hash message authentication code</li>\n</ul>\n<p>Referring to the packet file <a href=\"dtls-dhe-rsa.pcap\">dtls-dhe-rsa.pcap</a> captured from the network port, the following handshake protocol message sequence chart can be obtained</p>\n<pre class=\"mermaid\">\nsequenceDiagram\n\nautonumber\nparticipant C as Client\nparticipant S as Server\nNote over C,S: Handshake Protocol\nrect rgb(230, 250, 255)\nC-&gt;&gt;S: Client Hello (Cr, Cipher Suites))\nS--&gt;&gt;C: Hello Verify Request (Cookie)\nC-&gt;&gt;S: Client Hello (Cr, Cookie, Cipher Suites)\nS--&gt;&gt;C: Server Hello (Sr, Cipher Suite), Certificate (Sn, Se)\nS--&gt;&gt;C: Server Key Exchange (p,g,A,Ss)\nS--&gt;&gt;C: Certificate Request, Server Hello Done\nC-&gt;&gt;S: Certificate (Cn, Ce)\nC-&gt;&gt;S: Client Key Exchange (B)\nC-&gt;&gt;S: Certificate Verify (Cs)\nend\nNote over C,S: Establish Secure Channel\nrect rgb(239, 252, 202)\nC-&gt;&gt;S: Change Cipher Spec, Encrypted Handshake Message\nS--&gt;&gt;C: Change Cipher Spec, Encrypted Handshake Message\nC-&gt;&gt;S: Application Data\nS--&gt;&gt;C: Application Data\nend\n \n</pre>\n<p>Below is the analysis with regard to the data package numbers in the message sequence chart:</p>\n<ul>\n<li>Packets <span class=\"math inline\">\\(\\require{enclose}\\enclose{circle}{1}-\\enclose{circle}{3}\\)</span> present the initial handshake message exchange.\n<ul>\n<li>The client first sends a Hello message containing a random number <span class=\"math inline\">\\(C_r\\)</span> and a list of supported cipher suites</li>\n<li>The server responds with a Hello Verify Request message containing a block of information (cookie)</li>\n<li>The client receives the Hello Verify Request and resends the Hello message with the entire contents of the previous message plus a copy of the cookie</li>\n</ul></li>\n</ul>\n<div class=\"note info\"><p>Hello verification is specific to DTLS to prevent denial of service attacks. The protocol stipulates that the server will not continue to serve the client until it receives a hello message containing the copied cookie.</p>\n</div>\n<ul>\n<li>Packets <span class=\"math inline\">\\(\\require{enclose}\\enclose{circle}{4}-\\enclose{circle}{6}\\)</span> shows the server enters verification and key exchange stage:\n<ul>\n<li>The server responds with a Hello message first, which contains the random number <span class=\"math inline\">\\(S_r\\)</span> and the selected cipher suite\n<ul>\n<li>As shown below, the server selects TLS_DHE_RSA_WITH_AES_128_CBC_SHA! <img src=\"dtls-server-hello.png\" /></li>\n</ul></li>\n<li>The same packet also contains the Server Certificate message, which is typically large and divided into multiple fragments</li>\n<li>The server certificate provides the RSA public key <span class=\"math inline\">\\((S_N,\\;S_e)\\)</span> that verifies its signature</li>\n<li>Next, the server sends a Key Exchange message containing its DH public key <span class=\"math inline\">\\((p,g,A)\\)</span> and signature <span class=\"math inline\">\\(Ss\\)</span>\n<ul>\n<li>The length of <span class=\"math inline\">\\(p\\)</span> in the figure below is 256 bytes, which means that the key length is 2048 bits and <span class=\"math inline\">\\(Pubkey\\)</span> is <span class=\"math inline\">\\(A\\)</span>.</li>\n<li>You can also see in the figure that the algorithms chosen for the signature are SHA512 and RSA.</li>\n<li>The operation is to first compute <span class=\"math inline\">\\(\\operatorname{SHA512}(Cr,Sr,p,g,A)\\)</span> and then encrypt it with the server RSA private key<img src=\"dtls-server-key.png\" /></li>\n</ul></li>\n<li>After that, the server sends a Certificate Request message and a Hello Done message\n<ul>\n<li>The server requests the client to send an RSA public key certificate that verifies its signature</li>\n</ul></li>\n</ul></li>\n</ul>\n<div class=\"note warning\"><p><strong>Note:</strong> If DH-RSA cipher suite is used, the server-side DH public key parameters <span class=\"math inline\">\\((p,g,A)\\)</span> are unchanged and will be included directly in its certificate message. At this time, the server will not issue a Key Exchange message <span class=\"math inline\">\\(\\require{enclose}\\enclose{circle}{5}\\)</span>. For DHE-RSA, the <span class=\"math inline\">\\(A\\)</span> value is different for each session.</p>\n</div>\n<ul>\n<li>Packets <span class=\"math inline\">\\(\\require{enclose}\\enclose{circle}{7}-\\enclose{circle}{9}\\)</span> shows the client enters verification and key echange stage:\n<ul>\n<li>The client first sends a Certificate message, which contains the RSA public key <span class=\"math inline\">\\((C_N,\\;C_e)\\)</span> and also splits into multiple fragments</li>\n<li>The client then sends a Key Exchange message, which contains its DH public key <span class=\"math inline\">\\(B\\)</span>\n<ul>\n<li>The <span class=\"math inline\">\\(Pubkey\\)</span> in the following figure is <span class=\"math inline\">\\(B\\)</span><img src=\"dtls-client-key.png\" /></li>\n</ul></li>\n<li>The client finally sends a Certificate Verify message, which contains the signature <span class=\"math inline\">\\(Cs\\)</span>\n<ul>\n<li>The signature covers all previous messages except for the initial Client Hello <span class=\"math inline\">\\(\\require{enclose}\\enclose{circle}{1}\\)</span> and the Hello Verify Request <span class=\"math inline\">\\(\\require{enclose}\\enclose{circle}{2}\\)</span></li>\n<li>The signature operation also computes SHA512 and encrypts it with the client's RSA private key</li>\n</ul></li>\n</ul></li>\n<li>Packets <span class=\"math inline\">\\(\\require{enclose}\\enclose{circle}{10}-\\enclose{circle}{11}\\)</span> completes handshake and establishs the secure channel:\n<ul>\n<li>Each side first verifies the signature sent by the other side</li>\n<li>After successful verification, DH algorithm is run to generate the same premaster key</li>\n<li>Both parties call <a href=\"https://tools.ietf.org/html/rfc5246#page-14\">pseudo-random function (PRF)</a> to generate a 48-byte master key from the premaster key <span class=\"math display\">\\[master\\_secret = \\operatorname{PRF}(pre\\_master\\_secret,\\unicode{x201C}master\\;secret\\unicode{x201D},Cr+Sr)[0..47]\\]</span></li>\n<li>Both parties call PRF again to generate a 72-byte key block from the master key <span class=\"math display\">\\[key\\_block = \\operatorname{PRF}(master\\_secret,\\unicode{x201C}key\\;expansion\\unicode{x201D},Sr+Cr)[0..71]\\]</span></li>\n<li>Key blocks are assigned to HMAC-SHA1 and AES_128_CBC function blocks.\n<ul>\n<li>Client Write Message Authentication Code (MAC) key: 20 bytes</li>\n<li>Server Write Message Authentication Code (MAC) key: 20 bytes</li>\n<li>Client Write Encryption Key: 16 bytes</li>\n<li>Server write encryption key: 16 bytes</li>\n</ul>\nNote that TLS/DTLS 1.2 specifies that this cipher suite uses an explicit initial vector (IV) and does not require the allocation of a key block</li>\n<li>The client generates a Change Cipher Spec message indicating the start of the encryption and MAC modules</li>\n<li>The client invokes PRF a third time to generate the 12-byte end-of-handshake authentication code used for master key and handshake message authentication, which is packaged into an end-of-handshake message and entered into the encryption and MAC modules <span class=\"math display\">\\[\\operatorname{PRF}(master\\_secret,finished\\_label,\\operatorname{SHA256}(handshake\\_messages))[0..11]\\]</span></li>\n<li>The client sends the Change Cipher Spec message and the encrypted end-of-handshake message to the server</li>\n<li>The server verifies the received client end-of-handshake message and repeats the above three steps to generate its own Change Cipher Spec message and encrypted an end-of-handshake message, then send them to the client</li>\n<li>The client completes the handshake by verifying the received server end-of-handshake message. Now the encrypted secure channel is established</li>\n</ul></li>\n<li>Packets <span class=\"math inline\">\\(\\require{enclose}\\enclose{circle}{12}-\\enclose{circle}{13}\\)</span> shows that the encrypted application data exchange has officially started</li>\n</ul>\n<p>This is the complete process of establishing a secure message channel using the TLS_DHE_RSA_WITH_AES_128_CBC_SHA (encoding 0x00,0x33) cipher suite, where DHE implements a key exchange with forward secrecy protection and RSA digital signature provides authentication for DHE, creating a solution for secure communication. With a clear understanding of this, we will better grasp the working mechanism of Diffie-Hellman and RSA, effectively apply them in practice and avoid unnecessary mistakes.</p>\n","categories":["Study Notes"],"tags":["Cryptography","Network Security"]},{"title":"Understand Endianness","url":"/en/2021/12/24/Endianness/","content":"<p>The problem of Endianness is essentially a question about how computers store large numbers. <span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>I do not fear computers. I fear lack of them.</strong><br> <strong>— <em>Isaac Asimov</em> (American writer and professor of biochemistry, best known for his hard science fiction)</strong></p>\n</div>\n<p>We know that one basic memory unit can hold one byte, and each memory unit has its address. For an integer larger than decimal 255 (0xff in hexadecimal), more than one memory unit is required. For example, 4660 is 0x1234 in hexadecimal and requires two bytes. Different computer systems use different methods to store these two bytes. In our common PC, the least-significant byte 0x34 is stored in the low address memory unit and the most-significant byte 0x12 is stored in the high address memory unit. While in Sun workstations, the opposite is true, with 0x34 in the high address memory unit and 0x12 in the low address memory unit. The former is called <code>Little Endian</code> and the latter is <code>Big Endian</code>.</p>\n<p>How can I remember these two data storing modes? It is quite simple. First, remember that the addresses of the memory units we are talking about are always arranged from low to high. For a multi-byte number, if the first byte in the low address you see is the least-significant byte, the system is <code>Little Endian</code>, where Little matches <code>low</code>. On the contrary is <code>Big Endian</code>, where Big corresponds to \"high\".</p>\n<h2 id=\"program-example\">Program Example</h2>\n<p>To deepen our understanding of Endianness, let's look at the following example of a C program:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> a = <span class=\"number\">1</span>; \t \t \t </span><br><span class=\"line\"><span class=\"type\">char</span> b = <span class=\"number\">2</span>;                       </span><br><span class=\"line\"><span class=\"type\">short</span> c = <span class=\"number\">255</span>;\t<span class=\"comment\">/* 0x00ff */</span></span><br><span class=\"line\"><span class=\"type\">long</span> d = <span class=\"number\">0x44332211</span>;</span><br></pre></td></tr></table></figure>\n<p>On Intel 80x86 based systems, the memory content corresponding to variables a, b, c, and d are shown in the following table：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>Address Offset</th>\n<th>Memory Content</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0x0000</td>\n<td>01 02 FF 00</td>\n</tr>\n<tr class=\"even\">\n<td>0x0004</td>\n<td>11 22 33 44</td>\n</tr>\n</tbody>\n</table>\n<p>We can immediately tell that this system is <code>Little Endian</code>. For a 16-bit integer <code>short c</code>, we see the least-significant byte 0xff first, and the next one is 0x00. Similarly for a 32-bit integer <code>long d</code>, the least-significant byte 0x11 is stored at the lowest address 0x0004. If this is in a <code>Big Endian</code> computer, memory content would be <em>01 02 00 FF 44 33 22 11</em>.</p>\n<p>At the run time all computer processors must choose between these two Endians. The following is a shortlist of processor types with supported Endian modes:</p>\n<ul>\n<li>Pure <code>Big Endian</code>: Sun SPARC, Motorola 68000, Java Virtual Machine</li>\n<li>Bi-Endian running <code>Big Endian</code> mode: MIPS with IRIX, PA-RISC, most Power and PowerPC systems</li>\n<li>Bi-Endian running <code>Little Endian</code> mode: ARM, MIPS with Ultrix, most DEC Alpha, IA-64 with Linux</li>\n<li><code>Little Endian</code>: Intel x86, AMD64, DEC VAX</li>\n</ul>\n<p>How to detect the Endianess of local system in the program? The following function can be called for a quick check. If the return value is 1, it is <code>Little Endian</code>, else <code>Big Endian</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">test_endian</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *((<span class=\"type\">char</span> *)&amp;x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"network-order\">Network Order</h2>\n<p>Endianness is also important for computer communications. Imagine that when a <code>Little Endian</code> system communicates with a <code>Big Endian</code> system, the receiver and sender will interpret the data completely differently if not handled properly. For example, for the variable d in the C program segment above, the <code>Little Endian</code> sender sends <em>11 22 33 44</em> four bytes, which the <code>Big Endian</code> receiver converts to the value 0x11223344. This is very different from the original value. To solve this problem, the TCP/IP protocol specifies a special \"network byte order\" (referred to as \"network order\"), which means that regardless of the Endian supported by the computer system, the most-significant byte is always sent first while transmitting data. From the definition, we can see that the network order corresponds to the <code>Big Endian</code>.</p>\n<p>To avoid communication problems caused by Endianness and to facilitate software developers to write portable programs, some C preprocessing macros are defined for conversion between network bytes and local byte order. <code>htons()</code> and <code>htonl()</code> are used to convert local byte order to network byte order, the former works with 16-bit unsigned numbers and the latter for 32-bit unsigned numbers. <code>ntohs()</code> and <code>ntohl()</code> implement the conversion in the opposite direction. The prototype definitions of these four macros can be found as follows (available in the <code>netinet/in.h</code> file on Linux systems).</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> defined(BIG_ENDIAN) &amp;&amp; !defined(LITTLE_ENDIAN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> htons(A)  (A)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> htonl(A)  (A)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ntohs(A)  (A)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ntohl(A)  (A)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">elif</span> defined(LITTLE_ENDIAN) &amp;&amp; !defined(BIG_ENDIAN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> htons(A)  ((((uint16)(A) &amp; 0xff00) &gt;&gt; 8) | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint16)(A) &amp; 0x00ff) &lt;&lt; 8))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> htonl(A)  ((((uint32)(A) &amp; 0xff000000) &gt;&gt; 24) | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint32)(A) &amp; 0x00ff0000) &gt;&gt; 8)  | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint32)(A) &amp; 0x0000ff00) &lt;&lt; 8)  | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint32)(A) &amp; 0x000000ff) &lt;&lt; 24))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ntohs     htons</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ntohl     htohl</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">error</span> <span class=\"string\">&quot;Either BIG_ENDIAN or LITTLE_ENDIAN must be #defined, but not both.&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n","categories":["Study Notes"],"tags":["C/C++ Programming","System Programming","Computer Architecture","Computer Communications"]},{"title":"The Inductive Proof and Applications of Fermat's Little Theorem","url":"/en/2023/11/14/Fermats-Little-Theorem/","content":"<p>In the history of mathematics, Pierre de Fermat was a special figure. His formal occupation was as a lawyer, but he was exceptionally fond of mathematics. Although an amateur, Fermat’s achievements in mathematics were no less than those of professional mathematicians of the same era. He contributed to modern calculus, analytic geometry, probability, and number theory. Especially in the field of number theory, Fermat was most interested and achieved the most outstanding results.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>Logic is the foundation of the certainty of all the knowledge we acquire.</strong><br> <strong>— <em>Leonhard Euler</em> (Swiss mathematician, physicist, astronomer, geographer, logician, and engineer, one of the greatest mathematicians in history) </strong></p>\n</div>\n<p>As the \"king of amateur mathematicians\", Fermat proposed some famous conjectures in number theory but did not give strong proof. The most famous is Fermat's Last Theorem<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a>. Although Fermat claimed he had found an ingenious proof, there was not enough space on the margin to write it down. But in fact, after more than 350 years of unremitting efforts by mathematicians, it was not until 1995 that British mathematician Andrew John Wiles and his student Richard Taylor published a widely recognized proof.</p>\n<figure>\n<img src=\"Fermat-on-stamp.jpg\" alt=\"Ferma and Fermat&#39;s Last Theorem On Stamp\" /><figcaption aria-hidden=\"true\">Ferma and Fermat's Last Theorem On Stamp</figcaption>\n</figure>\n<p>In contrast, there is also a little theorem of Fermat. In October 1640, Fermat first wrote down words equivalent to the following in a letter to a friend:</p>\n<blockquote>\n<p><em>If <span class=\"math inline\">\\(p\\)</span> is a prime and <span class=\"math inline\">\\(a\\)</span> is any integer not divisible by <span class=\"math inline\">\\(p\\)</span>, then <span class=\"math inline\">\\(a^{p-1}-1\\)</span> is divisible by <span class=\"math inline\">\\(p\\)</span>.</em></p>\n</blockquote>\n<p>Similarly, Fermat did not give proof in the letter. Nearly a hundred years later, the complete proof was first published by the great mathematician Euler in 1736. Later, people found in the unpublished manuscripts of another great mathematician Leibniz that he had obtained almost the same proof before 1683.</p>\n<p>Fermat's little theorem is one of the fundamental results of elementary number theory. This theorem can be used to generate primality testing rules and corresponding verification algorithms. In the late 1970s, public key cryptography emerged, and Fermat's little theorem helped prove the correctness of RSA. Afterward, researchers combined it with the Chinese remainder theorem and also discovered an optimized method for RSA decryption and signing. The following further introduces these applications.</p>\n<h3 id=\"theorem-and-corollaries\">Theorem and Corollaries</h3>\n<p>The complete statement of Fermat's little theorem is: <strong>If <span class=\"math inline\">\\(\\pmb{p}\\)</span> is a prime number, then for any integer <span class=\"math inline\">\\(\\pmb{a}\\)</span>, the number <span class=\"math inline\">\\(\\pmb{a^p−a}\\)</span> is an integer multiple of <span class=\"math inline\">\\(\\pmb{p}\\)</span>. In the notation of modular arithmetic, this is expressed as <span class=\"math inline\">\\(\\pmb{a^p\\equiv a\\pmod p}\\)</span>. If <span class=\"math inline\">\\(\\pmb{a}\\)</span> is not divisible by <span class=\"math inline\">\\(\\pmb{p}\\)</span>, then <span class=\"math inline\">\\(\\pmb{a^{p-1}\\equiv 1\\pmod p}\\)</span>.</strong></p>\n<p>From <span class=\"math inline\">\\(a^{p-1}\\equiv 1\\pmod p\\)</span> it can be deduced that <strong><span class=\"math inline\">\\(\\pmb{a^{p-2}\\equiv a^{-1}\\pmod p}\\)</span></strong>. This new congruence just gives a way to find the multiplicative inverse of <span class=\"math inline\">\\(a\\)</span> modulo <span class=\"math inline\">\\(p\\)</span>. This is a direct corollary of Fermat's little theorem.</p>\n<p>Another important corollary is: <strong>If <span class=\"math inline\">\\(\\pmb{a}\\)</span> is not a multiple of <span class=\"math inline\">\\(\\pmb{p}\\)</span> and <span class=\"math inline\">\\(\\pmb{n=m\\bmod {(p-1)}}\\)</span>, then <span class=\"math inline\">\\(\\pmb{a^n\\equiv a^m\\pmod p}\\)</span>.</strong> This inference does not seem very intuitive, but the proof is simple:</p>\n<ol type=\"1\">\n<li>Because <span class=\"math inline\">\\(n=m\\bmod {(p-1)}\\)</span>, it follows that <span class=\"math inline\">\\(m = k⋅(p-1)+n\\)</span></li>\n<li>Substituting the result into the power operation, <span class=\"math inline\">\\(a^m=a^{k⋅(p-1)+n}=(a^{(p-1)})^k⋅a^n\\)</span></li>\n<li>Then applying modular arithmetic and Fermat's little theorem, <span class=\"math inline\">\\(a^m=(a^{(p-1)})^k⋅a^n\\equiv (1)^ka^n\\equiv a^n\\pmod p\\)</span></li>\n<li>Therefore <span class=\"math inline\">\\(a^n\\equiv a^m\\pmod p\\)</span>, Q.E.D.</li>\n</ol>\n<h3 id=\"proof-by-induction\">Proof by Induction</h3>\n<p>There are many ways to prove Fermat's little theorem. Among them, mathematical induction based on the binomial theorem is the most intuitive one. First, for <span class=\"math inline\">\\(a=1\\)</span>, it is obvious that <span class=\"math inline\">\\(1^p \\equiv 1\\pmod{p}\\)</span> holds. Now assume that for an integer <span class=\"math inline\">\\(a\\)</span>, <span class=\"math inline\">\\(a^p \\equiv a \\pmod{p}\\)</span> is true. As long as it is proved under this condition that <span class=\"math inline\">\\((a+1)^p\\equiv a+1\\pmod{p}\\)</span>, the proposition holds.</p>\n<p>According to the binomial theorem, <span class=\"math display\">\\[(a+1)^p = a^p + {p \\choose 1} a^{p-1} + {p \\choose 2} a^{p-2} + \\cdots + {p \\choose p-1} a + 1\\]</span> Here the binomial coefficient is defined as <span class=\"math inline\">\\({p \\choose k}= \\frac{p!}{k! (p-k)!}\\)</span>. Note that because <span class=\"math inline\">\\(p\\)</span> is a prime number, for <span class=\"math inline\">\\(1≤k≤p-1\\)</span>, each binomial coefficient <span class=\"math inline\">\\({p \\choose k}\\)</span>is a multiple of <span class=\"math inline\">\\(p\\)</span>.</p>\n<p>Then taking <span class=\"math inline\">\\(\\bmod p\\)</span>, all the intermediate terms disappear, leaving only <span class=\"math inline\">\\(a^p+1\\)</span> <span class=\"math display\">\\[(a+1)^p \\equiv a^p + 1 \\pmod{p}\\]</span>Referring to the previous assumption <span class=\"math inline\">\\(a^p ≡ a \\pmod p\\)</span>, it infers that <span class=\"math inline\">\\((a+1)^p \\equiv a+1 \\pmod{p}\\)</span>, the proof is complete.</p>\n<h3 id=\"applications-of-the-theorem\">Applications of the Theorem</h3>\n<h4 id=\"solution-to-math-competition-problems\">Solution to Math Competition Problems</h4>\n<p>Fermat's little theorem provides concise solutions to some seemingly complicated computational problems. First look at a simple example: If today is Sunday, what day will it be in <span class=\"math inline\">\\(2^{100}\\)</span> days? There are 7 days in a week. According to Fermat's little theorem, we have <span class=\"math inline\">\\(2^{7−1}≡1\\bmod 7\\)</span>, from which we can get <span class=\"math display\">\\[2^{100}=2^{16×6+4} ≡ 1^{16}×2^4≡16≡2\\pmod 7\\]</span>So the answer is Tuesday. This actually repeats the proof process of the second corollary above with specific numbers. Applying this corollary can greatly speed up modular exponentiation. For example, to calculate <span class=\"math inline\">\\(49^{901}\\bmod 151\\)</span>, since <span class=\"math inline\">\\(901\\bmod(151-1)=1\\)</span>, it can be deduced immediately that <span class=\"math display\">\\[49^{901}\\equiv 49^1\\equiv 49\\pmod {151}\\]</span></p>\n<p>Now look at a question that seems a little more difficult: Given the equation <span class=\"math inline\">\\(133^5+110^5+84^5+27^5=n^{5}\\)</span>, find the value of <span class=\"math inline\">\\(n\\)</span>.</p>\n<p>At first glance, there seems to be no clue, so start with basic parity checking. The left side of the equation has two odd terms and two even terms, so the total is even, which also determines that <span class=\"math inline\">\\(n\\)</span> must be even. Looking at the exponent 5 which is a prime number, and thinking of Fermat's little theorem, we get <span class=\"math inline\">\\(n^5≡n\\pmod 5\\)</span>, therefore <span class=\"math display\">\\[133^5+110^5+84^5+27^5≡n\\pmod 5\\]</span> <span class=\"math display\">\\[3+0+4+2≡4≡n\\pmod 5\\]</span> Continuing to take modulo 3, according to the corollary of Fermat's little theorem again, we have <span class=\"math inline\">\\(n^5≡n^{5\\mod(3-1)}≡n\\pmod 3\\)</span>. So <span class=\"math display\">\\[133^5+110^5+84^5+27^5≡n\\pmod 3\\]</span> <span class=\"math display\">\\[1+2+0+0≡0≡n\\pmod 3\\]</span></p>\n<p>Okay, now summarize:</p>\n<ol type=\"1\">\n<li><span class=\"math inline\">\\(n\\)</span> should be greater than 27 and an even number</li>\n<li><span class=\"math inline\">\\(n\\)</span> is a multiple of 3, so the sum of all digits is a multiple of 3</li>\n<li><span class=\"math inline\">\\(n\\)</span> divided by 5 gives a remainder of 4, the ones place should be 4 (9 does not satisfy the condition of an even number)</li>\n</ol>\n<p>These lead to <span class=\"math inline\">\\(n = 144\\)</span> or <span class=\"math inline\">\\(n\\geq 174\\)</span>. Obviously, 174 is too big. It can be concluded that n can only be 144.</p>\n<p>This question actually appeared in the 1989 American Invitational Mathematics Examination (AIME), which is a math competition for high school students. Interestingly, the solution to the question happens to disprove <a href=\"https://en.wikipedia.org/wiki/Euler%27s_sum_of_powers_conjecture\">Euler's conjecture</a>.</p>\n<h4 id=\"primality-testing\">Primality Testing</h4>\n<p>Many encryption algorithm applications require \"random\" large prime numbers. The common method to generate large primes is to randomly generate an integer and then test for primality. Since Fermat’s little theorem holds on the premise that p is a prime number, this provides a prime test method called the Fermat primality test. The test algorithm is</p>\n<blockquote>\n<p><strong>Input:</strong> <span class=\"math inline\">\\(n\\)</span> - the number to be tested, <span class=\"math inline\">\\(n&gt;3\\)</span>; <span class=\"math inline\">\\(k\\)</span> - the number of iterations<br />\n<strong>Output:</strong> <span class=\"math inline\">\\(n\\)</span> is <u>composite</u>, otherwise <u>may be prime</u><br />\nRepeat k times:<br />\n<span class=\"math inline\">\\(\\quad\\quad\\)</span>Randomly select an integer <span class=\"math inline\">\\(a\\)</span> between <span class=\"math inline\">\\([2, n-2]\\)</span><br />\n<span class=\"math inline\">\\(\\quad\\quad\\)</span>If <span class=\"math inline\">\\(a^{n-1}\\not \\equiv 1{\\pmod n}\\)</span>, return <span class=\"math inline\">\\(n\\)</span> is <u>composite</u><br />\nReturn <u><span class=\"math inline\">\\(n\\)</span> may be prime</u></p>\n</blockquote>\n<p>It can be seen that Fermat’s primality test is non-deterministic. It uses a probabilistic algorithm to determine whether a number is composite or probably prime. When the output is composite, the result is definitely correct; but those numbers tested to be probably prime may actually be composite, such numbers are called Fermat pseudoprimes. The smallest Fermat pseudoprime is 341, with <span class=\"math inline\">\\(2^{340}\\equiv1\\pmod {341}\\)</span> but <span class=\"math inline\">\\(341=11×31\\)</span>. So in fact, <strong>Fermat's little theorem provides a necessary but insufficient condition for determining prime numbers</strong>. It can only be said that the more iterations performed, the higher the probability that the tested number is prime.</p>\n<p>There is also a class of Fermat pseudoprimes <span class=\"math inline\">\\(n\\)</span> which are composite numbers themselves, but for any integer <span class=\"math inline\">\\(x\\)</span> that is coprime with <span class=\"math inline\">\\(n\\)</span>, it holds <span class=\"math inline\">\\(x^{n-1}\\equiv 1\\pmod n\\)</span>. In number theory, they are called Carmichael numbers. The smallest Carmichael number is 561, equal to <span class=\"math inline\">\\(3×11×17\\)</span>. Carmichael numbers can fool Fermat’s primality test, making the test unreliable. Fortunately, such numbers are very rare. Statistics show that among the first <span class=\"math inline\">\\(10^{12}\\)</span> natural numbers there are only 8241 Carmichael numbers.</p>\n<p>The PGP encryption communication program uses Fermat’s primality test in its algorithm. In network communication applications requiring large primes, Fermat’s primality test method is often used for pretesting, followed by calling the more efficient <a href=\"https://en.wikipedia.org/wiki/Miller–Rabin_primality_test\">Miller-Rabin primality test</a> to ensure high accuracy.</p>\n<h4 id=\"proof-of-rsa-correctness\">Proof of RSA Correctness</h4>\n<p>Fermat's little theorem can also be used to prove the correctness of the RSA algorithm, that is, the decryption formula can completely restore the plaintext <span class=\"math inline\">\\(m\\)</span> from the ciphertext <span class=\"math inline\">\\(c\\)</span> without errors: <span class=\"math display\">\\[c^d=(m^{e})^{d}\\equiv m\\pmod {pq}\\]</span></p>\n<p>Here <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> are different prime numbers, <span class=\"math inline\">\\(e\\)</span> and <span class=\"math inline\">\\(d\\)</span> are positive integers that satisfy <span class=\"math inline\">\\(ed≡1\\pmod {λ(pq)}\\)</span>, where <span class=\"math inline\">\\(λ(pq)=\\mathrm{lcm}(p−1,q−1)\\)</span>. <span class=\"math inline\">\\(\\mathrm{lcm}\\)</span> is the least common multiple function.</p>\n<p>Before starting the proof, first introduce a corollary of the <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\">Chinese remainder theorem</a>: <strong>If integers <span class=\"math inline\">\\(\\pmb{n_1,n_2,...,n_k}\\)</span> are pairwise coprime and <span class=\"math inline\">\\(\\pmb{n=n_{1}n_{2}...n_{k}}\\)</span>, then for any integer <span class=\"math inline\">\\(\\pmb x\\)</span> and <span class=\"math inline\">\\(\\pmb y\\)</span>, <span class=\"math inline\">\\(\\pmb{x≡y\\pmod n}\\)</span> holds if and only if <span class=\"math inline\">\\(\\pmb{x≡y\\pmod{n_i}}\\)</span> for each <span class=\"math inline\">\\(\\pmb{i=1,2,...k}\\)</span>.</strong> This corollary is easy to prove, details are left as an exercise<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a>. According to this corollary, if <span class=\"math inline\">\\(m^{ed}≡m\\pmod p\\)</span> and <span class=\"math inline\">\\(m^{ed}≡m\\pmod q\\)</span> are both true, then <span class=\"math inline\">\\(m^{ed}≡m\\pmod{pq}\\)</span> must also hold.</p>\n<p>Now look at the first step of the proof. From the relationship between <span class=\"math inline\">\\(e\\)</span> and <span class=\"math inline\">\\(d\\)</span>, it follows <span class=\"math inline\">\\(ed-1\\)</span> can be divided by both <span class=\"math inline\">\\(p-1\\)</span> and <span class=\"math inline\">\\(q-1\\)</span>, that is, there exist non-negative integers <span class=\"math inline\">\\(h\\)</span> and <span class=\"math inline\">\\(k\\)</span> satisfying: <span class=\"math display\">\\[ed-1=h(p-1)=k(q-1)\\]</span></p>\n<p>The second step is to prove <span class=\"math inline\">\\(m^{ed}≡m\\pmod p\\)</span>. Consider two cases:</p>\n<ol type=\"1\">\n<li>If <span class=\"math inline\">\\(m≡ 0\\pmod p\\)</span>, i.e. <span class=\"math inline\">\\(m\\)</span> is an integer multiple of <span class=\"math inline\">\\(p\\)</span>, then naturally <span class=\"math inline\">\\(m^{ed}≡0≡m\\pmod p\\)</span></li>\n<li>If <span class=\"math inline\">\\(m\\not \\equiv 0\\pmod p\\)</span>, it can be deduced that: <span class=\"math display\">\\[m^{ed}=m^{ed-1}m=m^{h(p-1)}m=(m^{p-1})^{h}m\\equiv 1^{h}m\\equiv m{\\pmod {p}}\\]</span>Here Fermat’s little theorem <span class=\"math inline\">\\(m^{p−1}≡1\\pmod p\\)</span> is applied.</li>\n</ol>\n<p>The third step has the goal of proving <span class=\"math inline\">\\(m^{ed}≡m\\pmod q\\)</span>. The deduction process is similar to the previous step, and it can also be deduced that m^ed ≡ m (mod q):</p>\n<ol type=\"1\">\n<li>If <span class=\"math inline\">\\(m≡ 0\\pmod p\\)</span>, i.e. <span class=\"math inline\">\\(m\\)</span> is an integer multiple of <span class=\"math inline\">\\(q\\)</span>, then naturally <span class=\"math inline\">\\(m^{ed}≡0≡m\\pmod q\\)</span></li>\n<li>If <span class=\"math inline\">\\(m\\not \\equiv 0\\pmod q\\)</span>, it can be deduced that: <span class=\"math display\">\\[m^{ed}=m^{ed-1}m=m^{h(q-1)}m=(m^{q-1})^{h}m\\equiv 1^{h}m\\equiv m{\\pmod {q}}\\]</span></li>\n</ol>\n<p>Since both <span class=\"math inline\">\\(m^{ed}≡m\\pmod p\\)</span> and <span class=\"math inline\">\\(m^{ed}≡m\\pmod q\\)</span> have been proved, <span class=\"math inline\">\\(m^{ed}≡m\\pmod{pq}\\)</span> holds, Q.E.D.</p>\n<h4 id=\"optimized-rsa-decryption\">Optimized RSA Decryption</h4>\n<p>Combining Fermat’s little theorem and the Chinese remainder theorem can not only verify the correctness of the RSA but also deduce an optimized decryption method.</p>\n<p>In the RSA encryption algorithm, the modulus <span class=\"math inline\">\\(N\\)</span> is the product of two prime numbers <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span>. Therefore, for any number <span class=\"math inline\">\\(m\\)</span> less than <span class=\"math inline\">\\(N\\)</span>, letting <span class=\"math inline\">\\(m_1=m\\bmod p\\)</span> and <span class=\"math inline\">\\(m_2=m\\bmod q\\)</span>, <span class=\"math inline\">\\(m\\)</span> is uniquely determined by <span class=\"math inline\">\\((m_1,m_2)\\)</span>. According to the Chinese remainder theorem, we can use the general solution formula to deduce <span class=\"math inline\">\\(m\\)</span> from <span class=\"math inline\">\\((m_1,m_2)\\)</span>. Since <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> each have only half the number of bits as <span class=\"math inline\">\\(N\\)</span>, modular arithmetic will be more efficient than directly computing <span class=\"math inline\">\\(c^d\\equiv m\\pmod N\\)</span>. And in the process of calculating <span class=\"math inline\">\\((m_1,m_2)\\)</span>, applying the corollary of Fermat's little theorem yields: <span class=\"math display\">\\[\\begin{align}\nm_1&amp;=m\\bmod p=(c^d\\bmod N)\\bmod p\\\\\n&amp;=c^d\\bmod p=c^{d\\mod(p-1)}\\bmod p\\tag{1}\\label{eq1}\\\\\nm_2&amp;=m\\bmod q=(c^d\\bmod N)\\bmod q\\\\\n&amp;=c^d\\bmod q=c^{d\\mod(q-1)}\\bmod q\\tag{2}\\label{eq2}\\\\\n\\end{align}\\]</span></p>\n<p>Obviously, in above <span class=\"math inline\">\\((1)\\)</span> and <span class=\"math inline\">\\((2)\\)</span> the exponent <span class=\"math inline\">\\(d\\)</span> is reduced to <span class=\"math inline\">\\(d_P=d\\bmod (p-1)\\)</span> and <span class=\"math inline\">\\(d_Q=d\\bmod (q-1)\\)</span> respectively, which further speeds up the calculation. Finally, the step of calculating <span class=\"math inline\">\\(m\\)</span> is further optimized using the Garner algorithm<a href=\"#fn3\" class=\"footnote-ref\" id=\"fnref3\" role=\"doc-noteref\"><sup>3</sup></a>: <span class=\"math display\">\\[\\begin{align}\nq_{\\text{inv}}&amp;=q^{-1}\\pmod {p}\\\\\nh&amp;=q_{\\text{inv}}(m_{1}-m_{2})\\pmod {p}\\\\\nm&amp;=m_{2}+hq\\pmod {pq}\\tag{3}\\label{eq3}\n\\end{align}\\]</span> Note that given <span class=\"math inline\">\\((p,q,d)\\)</span>, the values of <span class=\"math inline\">\\((d_P,d_Q,q_\\text{inv})\\)</span> are determined. So they can be precomputed and stored. For decryption, only <span class=\"math inline\">\\((m_1,m_2,h)\\)</span> are to be calculated and substituted into the above (3).</p>\n<p>This is actually the decryption algorithm specified in the RSA cryptography standard <a href=\"https://tools.ietf.org/html/rfc8017\">RFC 8017</a> (PKCS #1 v2.2). The ASN.1 formatted key data sequence described by this specification corresponds exactly to the above description (<span class=\"math inline\">\\(d_P\\)</span> - exponent1，<span class=\"math inline\">\\(d_Q\\)</span> - exponent2，<span class=\"math inline\">\\(q_{\\text{inv}}\\)</span> - coefficient):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">RSAPrivateKey ::= SEQUENCE &#123;</span><br><span class=\"line\">    version           Version,</span><br><span class=\"line\">    modulus           INTEGER,  -- n</span><br><span class=\"line\">    publicExponent    INTEGER,  -- e</span><br><span class=\"line\">    privateExponent   INTEGER,  -- d</span><br><span class=\"line\">    prime1            INTEGER,  -- p</span><br><span class=\"line\">    prime2            INTEGER,  -- q</span><br><span class=\"line\">    exponent1         INTEGER,  -- d mod (p-1)</span><br><span class=\"line\">    exponent2         INTEGER,  -- d mod (q-1)</span><br><span class=\"line\">    coefficient       INTEGER,  -- (inverse of q) mod p</span><br><span class=\"line\">    otherPrimeInfos   OtherPrimeInfos OPTIONAL</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The widely used open-source library <a href=\"https://www.openssl.org/\">OpenSSL</a> implements this efficient and practical decryption algorithm. As shown below, the key data generated using the OpenSSL command line tool is consistent with the PKCS #1 standard:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Generate 512-bit RSA keys saved in PEM format file.</span></span><br><span class=\"line\"><span class=\"comment\"># For demo only, DON&#x27;T USE 512-bit KEYS IN PRODUCTION!</span></span><br><span class=\"line\">$ openssl genrsa -out private-key.pem 512</span><br><span class=\"line\">Generating RSA private key, 512 bit long modulus</span><br><span class=\"line\">.++++++++++++</span><br><span class=\"line\">......................++++++++++++</span><br><span class=\"line\">e is 65537 (0x10001)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Inspect RSA keys saved in a PEM format file.</span></span><br><span class=\"line\">$ openssl pkey -<span class=\"keyword\">in</span> private-key.pem -text</span><br><span class=\"line\">-----BEGIN PRIVATE KEY-----</span><br><span class=\"line\">MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEA7HwgswSjqvDRPWj3</span><br><span class=\"line\">vVIxMZDAtXJCa7Qx+2jFv7e7GXB8+fa3MTBL36YjIcAgLeCHAyIzWkPndxvTJE2l</span><br><span class=\"line\">WvYzRQIDAQABAkBCUp2pF0f/jQJhwqqYQhDh4cLqIF1Yb3UFGWE8X37tpwCifAqg</span><br><span class=\"line\">t8NEpaXWkct5M+YxqjKfdOKYy0TVcJRlyS+RAiEA9xujHmh+bOvl0xWDFoARDAHw</span><br><span class=\"line\">v94qRCpeRNveHFpNvPsCIQD0/qFpeSjRWj/4vjCkIOv1RbbhDHVsgsF9HRJNW2Rc</span><br><span class=\"line\">vwIgaGIAUcQKQ7CScMxRh5upl8zqCeKrMAhFsgi+lnN/CykCIDMdAL4Jmht7ccdK</span><br><span class=\"line\">nslPWQs1/T6co878xLN+ojfjbl/vAiEAhmp4YDX1g8kFh6cVtTIDT5AGtzqwB2Jw</span><br><span class=\"line\">cCq+IoKDYBc=</span><br><span class=\"line\">-----END PRIVATE KEY-----</span><br><span class=\"line\">Private-Key: (512 bit)</span><br><span class=\"line\">modulus:</span><br><span class=\"line\">    00:ec:7c:20:b3:04:a3:aa:f0:d1:3d:68:f7:bd:52:</span><br><span class=\"line\">    31:31:90:c0:b5:72:42:6b:b4:31:fb:68:c5:bf:b7:</span><br><span class=\"line\">    bb:19:70:7c:f9:f6:b7:31:30:4b:<span class=\"built_in\">df</span>:a6:23:21:c0:</span><br><span class=\"line\">    20:2d:e0:87:03:22:33:5a:43:e7:77:1b:d3:24:4d:</span><br><span class=\"line\">    a5:5a:f6:33:45</span><br><span class=\"line\">publicExponent: 65537 (0x10001)</span><br><span class=\"line\">privateExponent:</span><br><span class=\"line\">    42:52:9d:a9:17:47:ff:8d:02:61:c2:aa:98:42:10:</span><br><span class=\"line\">    e1:e1:c2:ea:20:5d:58:6f:75:05:19:61:3c:5f:7e:</span><br><span class=\"line\">    ed:a7:00:a2:7c:0a:a0:b7:c3:44:a5:a5:d6:91:cb:</span><br><span class=\"line\">    79:33:e6:31:aa:32:9f:74:e2:98:cb:44:d5:70:94:</span><br><span class=\"line\">    65:c9:2f:91</span><br><span class=\"line\">prime1:</span><br><span class=\"line\">    00:f7:1b:a3:1e:68:7e:6c:eb:e5:d3:15:83:16:80:</span><br><span class=\"line\">    11:0c:01:f0:bf:de:2a:44:2a:5e:44:db:de:1c:5a:</span><br><span class=\"line\">    4d:bc:fb</span><br><span class=\"line\">prime2:</span><br><span class=\"line\">    00:f4:fe:a1:69:79:28:d1:5a:3f:f8:be:30:a4:20:</span><br><span class=\"line\">    eb:f5:45:b6:e1:0c:75:6c:82:c1:7d:1d:12:4d:5b:</span><br><span class=\"line\">    64:5c:bf</span><br><span class=\"line\">exponent1:</span><br><span class=\"line\">    68:62:00:51:c4:0a:43:b0:92:70:cc:51:87:9b:a9:</span><br><span class=\"line\">    97:cc:ea:09:e2:ab:30:08:45:b2:08:be:96:73:7f:</span><br><span class=\"line\">    0b:29</span><br><span class=\"line\">exponent2:</span><br><span class=\"line\">    33:1d:00:be:09:9a:1b:7b:71:c7:4a:9e:c9:4f:59:</span><br><span class=\"line\">    0b:35:fd:3e:9c:a3:ce:<span class=\"built_in\">fc</span>:c4:b3:7e:a2:37:e3:6e:</span><br><span class=\"line\">    5f:ef</span><br><span class=\"line\">coefficient:</span><br><span class=\"line\">    00:86:6a:78:60:35:f5:83:c9:05:87:a7:15:b5:32:</span><br><span class=\"line\">    03:4f:90:06:b7:3a:b0:07:62:70:70:2a:be:22:82:</span><br><span class=\"line\">    83:60:17</span><br></pre></td></tr></table></figure>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>Also known as \"Fermat's conjecture\"，its gist is that, when <span class=\"math inline\">\\(n &gt; 2\\)</span>, the equation <span class=\"math inline\">\\(x^{n}+y^{n}=z^{n}\\)</span> has no positive integer solutions <span class=\"math inline\">\\((x, y, z)\\)</span>. After it was finally proven correct in 1995, it became known as \"Fermat's last theorem.\"<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p>Hint: If two integers are congruent modulo <span class=\"math inline\">\\(n\\)</span>, then <span class=\"math inline\">\\(n\\)</span> is a divisor of their difference.<a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn3\" role=\"doc-endnote\"><p>Garner, H., \"<a href=\"https://ieeexplore.ieee.org/document/5219515\">The Residue Number System</a>\", IRE Transactions on Electronic Computers, Volume EC-8, Issue 2, pp.140-147, DOI 10.1109/TEC.1959.5219515, June 1959<a href=\"#fnref3\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Study Notes"],"tags":["Cryptography"]},{"title":"IPv4 and IPv6 Header Checksum Algorithm Explained","url":"/en/2021/12/26/IPv4-IPv6-checksum/","content":"<p>About the IP packet header checksum algorithm, simply put, it is 16-bit ones' complement of the ones' complement sum of all 16-bit words in the header. However, not many sources show exactly how this is done.<span id=\"more\"></span> The same checksum algorithm is used by TCP segment and UDP datagram, but the data involved in the checksum computing is different from that in the IP header. In addition, the checksum operation of the IPv6 packet is different from that of IPv4. Therefore, it is necessary to make a comprehensive analysis of the checksum algorithm of IP packets.</p>\n<div class=\"note success no-icon\"><p><strong>Nothing in life is to be feared, it is only to be understood.</strong><br> <strong>— <em>Marie Curie</em> (Polish and naturalized-French physicist and chemist, twice Nobel Prize winner)</strong></p>\n</div>\n<h2 id=\"ipv4-header-checksum\">IPv4 Header Checksum</h2>\n<p>IPv4 packet header format can be seen below</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3    </span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  </span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Version|  IHL  |Type of Service|          Total Length         |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|         Identification        |Flags|      Fragment Offset    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|  Time to Live |    Protocol   |        Header Checksum        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                       Source Address                          |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Destination Address                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Options                    |    Padding    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>Here the 16-bit Header Checksum field is used for error-checking of the IPv4 header. While computing the IPv4 header checksum, the sender first clears the checksum field to zero, then calculates the sum of each 16-bit value within the header. The sum is saved in a 32-bit value. If the total number of bytes is odd, the last byte is added separately.</p>\n<p>After all additions, the higher 16 bits saving the carry is added to the lower 16 bits. Repeat this till all higher 16 bits are zeros. Finally, the sender takes the ones' complement of the lower 16 bits of the result and writes it to the IP header checksum field.</p>\n<p>The following demonstrates the entire calculation process using actual captured IPv4 packets.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x0000: 00 60 47 41 11 c9 00 09 6b 7a 5b 3b 08 00 45 00 </span><br><span class=\"line\">0x0010: 00 1c 74 68 00 00 80 11 59 8f c0 a8 64 01 ab 46 </span><br><span class=\"line\">0x0020: 9c e9 0f 3a 04 05 00 08 7f c5 00 00 00 00 00 00 </span><br><span class=\"line\">0x0030: 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure>\n<p>At the beginning of the above 16-bit hex dump is the Ethernet frame header. The IP packet header starts from offset 0x000e, with the first byte 0x45 and the last byte 0xe9. Based on the previous description of the algorithm, we can make the following calculations:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(1) 0x4500 + 0x001c + 0x7468 + 0x0000 + 0x8011 +</span><br><span class=\"line\">    0x0000 + 0xc0a8 + 0x6401 + 0xab46 + 0x9ce9 = 0x3a66d</span><br><span class=\"line\">(2) 0xa66d + 0x3 = 0xa670</span><br><span class=\"line\">(3) 0xffff - 0xa670 = 0x598f</span><br></pre></td></tr></table></figure>\n<p>Notice at step (1) we replace the checksum field with <u>0x0000</u>. As can be seen, the calculated header checksum 0x598f is the same as the value in the captured packet. This calculating process is only used for the sender to generate the initial checksum. In practice, for the intermediate forwarding router and the final receiver, they can just sum up all header fields of the received IP packet by the same algorithm. If the result is <u>0xffff</u>, the checksum verification passes.</p>\n<h2 id=\"c-program-implementation\">C Program Implementation</h2>\n<p>How to program IPv4 header checksum computing? <a href=\"https://tools.ietf.org/html/rfc1071\">RFC 1071</a> (Computing the Internet Checksum) shows a reference \"C\" language implementation:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Compute Internet Checksum for &quot;count&quot; bytes</span></span><br><span class=\"line\"><span class=\"comment\">     * beginning at location &quot;addr&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>( count &gt; <span class=\"number\">1</span> )  &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* This is the inner loop */</span></span><br><span class=\"line\">        sum += * (<span class=\"type\">unsigned</span> <span class=\"type\">short</span> *) addr++;</span><br><span class=\"line\">        count -= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  Add left-over byte, if any */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( count &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">        sum += * (<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *) addr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  Fold 32-bit sum to 16 bits */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sum&gt;&gt;<span class=\"number\">16</span>)</span><br><span class=\"line\">        sum = (sum &amp; <span class=\"number\">0xffff</span>) + (sum &gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    checksum = ~sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In a real network connection, the source device can call the above code to generate the initial IPv4 header checksum. This checksum is then updated at each step of the routing hop because the router must decrement the Time To Live (TTL) field. <a href=\"https://tools.ietf.org/html/rfc1141\">RFC 1141</a> (Incremental Updating of the Internet Checksum) gives a reference implementation of fast checksum update：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">long</span> sum;</span><br><span class=\"line\">ipptr-&gt;ttl--;                  <span class=\"comment\">/* decrement ttl */</span></span><br><span class=\"line\">sum = ipptr-&gt;Checksum + <span class=\"number\">0x100</span>; <span class=\"comment\">/* increment checksum high byte*/</span></span><br><span class=\"line\">ipptr-&gt;Checksum = (sum + (sum&gt;&gt;<span class=\"number\">16</span>)); <span class=\"comment\">/* add carry */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"tcpudp-header-checksum\">TCP/UDP Header Checksum</h2>\n<p>For TCP segment and UDP datagram, both have 16-bit header checksum fields used for error-checking by the destination host. The checksum computing algorithm is the same as the IP header, except for the difference of covered data. Here the checksum is calculated over the whole TCP/UDP header and the payload, plus a pseudo-header that mimics the IPv4 header as shown below:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0      7 8     15 16    23 24    31 </span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|          source address           |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|        destination address        |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|  zero  |protocol| TCP/UDP length  |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br></pre></td></tr></table></figure>\n<p>It consists of the source and destination IP addresses, the protocol number (TCP:6/UDP:17), and the total length of the TCP/UDP header and payload (in bytes). The purpose of including the pseudo-header in the checksum computing is to confirm the packet reaches the expected destination and avoid IP spoofing attacks. Besides, for IPv4 UDP header checksum is optional, it carries all-zeros if unused.</p>\n<h2 id=\"ipv6-difference\">IPv6 Difference</h2>\n<p>IPv6 is IP protocol version 6, and its main design goal was to resolve the problem of IPv4 address exhaustion. Of course, it provides many benefits in other aspects. Although IPv6 usage is growing slowly, the trend is unstoppable. The latest IPv6 standard is published in <a href=\"https://tools.ietf.org/html/rfc8200\">RFC 8200</a>(Internet Protocol, Version 6 (IPv6) Specification).</p>\n<p>IPv6 packet header format can be seen below</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Version| Traffic Class |           Flow Label                  |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|         Payload Length        |  Next Header  |   Hop Limit   |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                         Source Address                        +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                      Destination Address                      +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>Notice that the IPv6 header does not include a checksum field, a significant difference from IPv4. The absence of a checksum in the IPv6 header furthers the end-to-end principle of Internet design, to simplify router processing and speed up the packet transmission. Protection for data integrity can be accomplished by error detection at the link layer or the higher-layer protocols between endpoints (such as TCP/UDP on the transport layer). This is why IPv6 forces the UDP layer to set the header checksum.</p>\n<p>For IPv6 TCP segment and UDP datagram header checksum computing, the pseudo-header that mimics the IPv6 header is shown below</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                         Source Address                        +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                      Destination Address                      +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                   Upper-Layer Packet Length                   |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                      zero                     |  Next Header  |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<h2 id=\"udp-lite-application\">UDP-Lite Application</h2>\n<p>In actual IPv6 network applications, UDP-Lite (Lightweight UDP) can be used to balance error detection and transmission efficiency. UDP-Lite has its own protocol number 136, and its standard is described in <a href=\"https://tools.ietf.org/html/rfc3828\">RFC 3828</a> (The Lightweight User Datagram Protocol (UDP-Lite)).</p>\n<p>Referring to the following header format, UDP-Lite uses the same set of <a href=\"https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml\">port number values assigned by the IANA</a> for use by UDP. But it redefines the Length field in the UDP header to a Checksum Coverage, which allows the application layer to control the length of checksummed data. This is useful for the application that can be tolerant of the potentially lossy transmission of the uncovered portion of the data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0              15 16             31</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|     Source      |   Destination   |</span><br><span class=\"line\">|      Port       |      Port       |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|    Checksum     |                 |</span><br><span class=\"line\">|    Coverage     |    Checksum     |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|                                   |</span><br><span class=\"line\">:              Payload              :</span><br><span class=\"line\">|                                   |</span><br><span class=\"line\">+-----------------------------------+</span><br></pre></td></tr></table></figure>\n<p>UDP-Lite protocol defines the values of \"Checksum Coverage\" (in bytes) as shown in the following table:</p>\n<table>\n<colgroup>\n<col style=\"width: 31%\" />\n<col style=\"width: 36%\" />\n<col style=\"width: 31%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Checksum Coverage</th>\n<th style=\"text-align: center;\">Coverage Area</th>\n<th style=\"text-align: center;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">entire UDP-Lites datagram</td>\n<td style=\"text-align: center;\">Calculation covers IP pseudo-header</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1-7</td>\n<td style=\"text-align: center;\">(invalid)</td>\n<td style=\"text-align: center;\">The receiver has to drop the datagram</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">8</td>\n<td style=\"text-align: center;\">UDP-Lites header</td>\n<td style=\"text-align: center;\">Calculation covers IP pseudo-header</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">&gt; 8</td>\n<td style=\"text-align: center;\">UDP-Lites header + portion of payload data</td>\n<td style=\"text-align: center;\">Calculation covers IP pseudo-header</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">&gt; IP datagram length</td>\n<td style=\"text-align: center;\">(invalid)</td>\n<td style=\"text-align: center;\">The receiver has to drop the datagram</td>\n</tr>\n</tbody>\n</table>\n<p>For multimedia applications running VoIP or streaming video data transmission protocols, it'd better receive data with some degree of corruption than not receiving any data at all. Another example is the <a href=\"https://tools.ietf.org/html/rfc5415\">CAPWAP</a> protocol used to connect Cisco wireless controller and access points. It specifies UDP-Lite as the default transport protocol for the CAPWAP Data channel, while the connection is established over the IPv6 network.</p>\n<p>At last, share a C program snippet to present how to initialize a Berkeley socket to establish an IPv6 UDP-Lite connection:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;net/udplite.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> udplite_conn = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDPLITE);</span><br><span class=\"line\"><span class=\"type\">int</span> val = <span class=\"number\">8</span>;    <span class=\"comment\">/* checksum only covers 8-byte UDP-Lite header */</span></span><br><span class=\"line\">(<span class=\"type\">void</span>)setsockopt(udplite_conn, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV, &amp;val, <span class=\"keyword\">sizeof</span> val);</span><br><span class=\"line\">(<span class=\"type\">void</span>)setsockopt(udplite_conn, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV, &amp;val, <span class=\"keyword\">sizeof</span> val);</span><br></pre></td></tr></table></figure>\n<p>Here <code>IPPROTO_UDPLITE</code> is protocol number 136, which is used together with <code>AF_INET6</code> address family parameter in <code>socket()</code> function call for IPv6 socket creation. The <code>UDPLITE_SEND_CSCOV</code>(10) and <code>UDPLITE_RECV_CSCOV</code>(11) are the control parameters of socket options configuration function <code>setsockopt()</code>, used for setting the Checksum Coverage value in the sender and the receiver respectively. Remember that both the sender and the receiver must set the same value, otherwise, the receiver will not be able to verify the checksum properly.</p>\n","categories":["Study Notes"],"tags":["C/C++ Programming","TCP/IP"]},{"title":"IPv6 Dynamic Address Allocation Mechanism Illustrated","url":"/en/2022/03/13/IPv6-Addressing/","content":"<p>IPv6 supports multiple addresses, making address assignments more flexible and convenient. Unlike IPv4, which relied solely on the DHCP protocol for address assignment, IPv6 incorporates a native <a href=\"https://tools.ietf.org/html/rfc4862\">Stateless Address AutoConfiguration</a> SLAAC) protocol. SLAAC can either work alone to provide IPv6 addresses to hosts, or it can work with <a href=\"https://tools.ietf.org/html/rfc8415\">DHCPv6</a> to generate new assignment schemes. Here is a comprehensive analysis of the dynamic address allocation mechanism for IPv6. <span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>Who the hell knew how much address space we needed?</strong><br> <strong>— <em>Vint Cerf</em> (American Internet pioneer and one of \"the fathers of the Internet\")</strong></p>\n</div>\n<h2 id=\"ipv6-address-overview\">IPv6 Address Overview</h2>\n<h3 id=\"address-formats\">Address Formats</h3>\n<p>The most significant difference between IPv6 and IPv4 is its large address space. IPv4 has 32 bits (4 bytes) and allows for approximately 4.29 (2<sup>32</sup>) billion addresses. IPv6, on the other hand, defines 128 bits (16 bytes) and supports approximately 340 x 10<sup>36</sup> addresses. This is a pretty impressive number, and there will be no address depletion for the foreseeable future. A typical IPv6 address can be divided into two parts. As shown in the figure below, the first 64 bits are used to represent the network, and the next 64 bits are used as the interface identifier. <img src=\"ipv6-addr-format.png\" /></p>\n<p>The interface identifier can be generated in several ways:</p>\n<ul>\n<li>Static manual setting</li>\n<li><a href=\"https://en.wikipedia.org/wiki/IPv6_address#Modified_EUI-64\">Converted from the interface's MAC address using the modified EUI-64 format</a></li>\n<li>Obtained from a DHCPv6 server</li>\n<li>Automatically established randomly or cryptographically</li>\n</ul>\n<p>IETF recommends a canonical textual representation format for ease of writing. It includes leading zeros suppression and compression of consecutive all-zero fields. With the network prefix length at the end, the above address can be shortened to 2001:db8:130f<strong>::</strong>7000:<strong>0</strong>:140b/<strong>64</strong>.</p>\n<h3 id=\"address-types\">Address Types</h3>\n<p><a href=\"https://tools.ietf.org/html/rfc4291\">RFC 4291</a> defines three types of addresses:</p>\n<ol type=\"1\">\n<li>Unicast: A network address corresponds to a single network node, point-to-point connection.</li>\n<li>Anycast: The target address corresponds to a group of receiving nodes, but only the \"nearest\" one receives.</li>\n<li>Multicast: The target address corresponds to a group of nodes that can receive replicated messages.</li>\n</ol>\n<p>Note that there are no broadcast addresses in IPv6, their function being superseded by multicast addresses. Anycast addresses are syntactically indistinguishable from unicast addresses and have very limited applications. A typical application for anycast is to set up a DNS root server to allow hosts to look up domain names in close proximity. For unicast and multicast addresses, they can be identified by different network prefixes:</p>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 25%\" />\n<col style=\"width: 25%\" />\n<col style=\"width: 25%\" />\n<col style=\"width: 22%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Address Type</th>\n<th style=\"text-align: left;\">Binary Form</th>\n<th style=\"text-align: left;\">Hexadecimal Form</th>\n<th style=\"text-align: left;\">Application</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Link-local address (unicast)</td>\n<td style=\"text-align: left;\">1111 1110 10</td>\n<td style=\"text-align: left;\">fe80::/10</td>\n<td style=\"text-align: left;\">Use on a single link, non-routable</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Unique local address (unicast)</td>\n<td style=\"text-align: left;\">1111 1101</td>\n<td style=\"text-align: left;\">fd00::/8</td>\n<td style=\"text-align: left;\">Analogous to IPv4 private network addressing</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Global unicast address</td>\n<td style=\"text-align: left;\">001</td>\n<td style=\"text-align: left;\">2000::/3</td>\n<td style=\"text-align: left;\">Internet communications</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Multicast address</td>\n<td style=\"text-align: left;\">1111 1111</td>\n<td style=\"text-align: left;\">ff00::/8</td>\n<td style=\"text-align: left;\">Group communications, video streaming</td>\n</tr>\n</tbody>\n</table>\n<p>Each interface of a host must have a link-local address. Additionally, it can be manually or dynamically autoconfigured to obtain a unique local address and a global unicast address. Thus, IPv6 interfaces naturally have multiple unicast addresses. Unique local addresses are managed by the local network administrator, while the global unicast addresses are allocated by the IANA-designated regional registry. Referring to the following diagram, all current global unicast addresses are assigned from the 2000::/3 address block, with the first 48 bits of the address identifying the service provider's global routing network and the next 16 bits identifying the enterprise or campus internal subnet: <img src=\"ipv6-addr-alloc.png\" /> Because an IPv6 multicast address can only be used as a destination address, its bit definition is different from that of unicast. Referring to RFC 4291, a multicast address containing 4 bits of the feature flags, 4 bits of the group scope, and the last 112 bits of the group identifier: <img src=\"ipv6-multicast-addr.png\" /> Furthermore the same protocol specifies a few <a href=\"https://tools.ietf.org/html/rfc4291#page-15\">pre-defined IPv6 multicast addresses</a>, the most important of which are</p>\n<ul>\n<li>All Nodes Addresses on the local link — ff02::1</li>\n<li>All Routers Addresses on the local link — ff02::2</li>\n<li>Solicited-Node Address on local link — ff02::1:ffxx:xxxx</li>\n</ul>\n<h2 id=\"dynamic-allocation-schemes\">Dynamic Allocation Schemes</h2>\n<h3 id=\"ndp-protocol\">NDP Protocol</h3>\n<p>IPv6 dynamic address assignment depends on <a href=\"https://tools.ietf.org/html/rfc4861\">Neighbor Discovery Protocol</a> (NDP). NDP acts at the data link layer and is responsible for discovering other nodes and corresponding IPv6 addresses on the link and determining available routes and maintaining information reachability to other active nodes. It provides the IPv6 network with the equivalent of the Address Resolution Protocol (ARP) and ICMP router discovery and redirection protocols in IPv4 networks. However, NDP adds many improvements and new features. NDP defines five <a href=\"https://tools.ietf.org/html/rfc4443\">ICMPv6</a> message types:</p>\n<ol type=\"1\">\n<li>Router Solicitation (RS)</li>\n<li>Router Advertisement (RA)</li>\n<li>Neighbor Solicitation (NS)</li>\n<li>Neighbor Advertisement (NA)</li>\n<li>Redirect</li>\n</ol>\n<p>The first two message types here, RS and RA, are the keys to implementing dynamic IPv6 address assignment. The host sends an RS message to the multicast address ff02::2 of all routers in the local network segment to request routing information. When the router receives the RS from the network node, it sends an immediate RA in response. The message format of the RA is as follows</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0                   1                   2                   3</span><br><span class=\"line\"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|     Type      |     Code      |          Checksum             |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">| Cur Hop Limit |M|O|  Reserved |       Router Lifetime         |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                         Reachable Time                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                          Retrans Timer                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|   Options ...</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-</span><br></pre></td></tr></table></figure>\n<p>It defines two special bits, M and O, with the following meaning:</p>\n<ul>\n<li>M — \"Managed address configuration\" flag, set to 1 when the address is obtained from DHCPv6.</li>\n<li>O — \"Other configuration\" flag, set to 1 to indicate that other configuration information is available via DHCPv6</li>\n</ul>\n<p>The RA message ends with the Options section, which originally had three possible options: Source Link-Layer Address, MTU, and Prefix Information. Later, <a href=\"https://tools.ietf.org/html/rfc8106\">RFC 8106</a> (which replaced RFC 6106) added the Recursive DNS Server (RDNSS) and DNS Search List (DNSSL) options. The Prefix Information option directly provide hosts with on-link prefixes and prefixes for Address Autoconfiguration, and it has the following format</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0                   1                   2                   3</span><br><span class=\"line\"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|     Type      |    Length     | Prefix Length |L|A| Reserved1 |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                         Valid Lifetime                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                       Preferred Lifetime                      |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                           Reserved2                           |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                            Prefix                             +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>Here the Prefix Length and the Prefix jointly determine the network prefix of the IPv6 address. In addition, the Prefix Information option also defines two special bits, L and A:</p>\n<ul>\n<li>L — on-link flag. When set, indicates that this prefix can be used for on-link determination.</li>\n<li>A — autonomous address-configuration flag. When set, indicates that this prefix can be used for SLAAC.</li>\n</ul>\n<p>Similar to the IPv4 subnet mask feature, the purpose of the \"on-link\" determination is to allow the host to determine which networks an interface can access. By default, the host only considers the network where the link-local address is located as \"on-link\". If the \"on-link\" status of a destination address cannot be determined, the host forwards the IPv6 datagram to the default gateway (or default router) by default. When the host receives an RA message, if the \"on-link\" flag for a prefix information option is set to 1 and the Valid Lifetime is also a non-zero value, the host creates a new prefix network entry for it in the prefix list. All unexpired prefix network entries are \"on-link\".</p>\n<h3 id=\"message-sequence\">Message Sequence</h3>\n<p>After understanding the NDP protocol and the information conveyed by the RA messages, let's see how they guide the network nodes to achieve dynamic address assignment.</p>\n<p>Routers in the network periodically send RA messages to the multicast addresses (ff02::1) of all nodes in the local subnet. However, to avoid latency, the host sends one or more RS messages to all routers in the local subnet as soon as it has finished booting. The protocol requires the routers to respond to the RA messages within 0.5 seconds. Then, based on the values of the M/O/A bits in the received RA messages, the host decides how to dynamically configure the unique local and global unicast addresses of the interface and how to obtain other configuration information. With certain combinations of bit fetch values, the host needs to run DHCPv6 client software to connect to the server to obtain address assignment and/or other configuration information. The entire process is shown in the following message sequence diagram.</p>\n<pre class=\"mermaid\">\nsequenceDiagram\n\nparticipant R as Router\nparticipant H as Host\nparticipant S as DHCPv6 Server\nNote over R,H: Router Request\nrect rgb(239, 252, 202)\nH-&gt;&gt;R: Router Solicitation\nR--&gt;&gt;H: Router Advertisement\nend\nNote over H,S: Address Request\nrect rgb(230, 250, 255)\nH-&gt;&gt;S: DHCPv6 Solicit\nS--&gt;&gt;H: DHCPv6 Advertise\nH-&gt;&gt;S: DHCPv6 Request\nS--&gt;&gt;H: DHCPv6 Reply\nend\nNote over H,S: Other Information Request\nrect rgb(230, 250, 255)\nH-&gt;&gt;S: DHCPv6 Information-request\nS--&gt;&gt;H: DHCPv6 Reply\nend\n\n</pre>\n<div class=\"note warning\"><p><strong>Note:</strong> Unlike the IPv4 DHCP protocol, DHCPv6 clients use UDP port 546 and servers use UDP port 547.</p>\n</div>\n<p>Next explain in detail three dynamic allocation schemes determined by the combination of the M/O/A-bit values:</p>\n<ul>\n<li>SLAAC</li>\n<li>SLAAC + Stateless DHCPv6</li>\n<li>Stateful DHCPv6</li>\n</ul>\n<h3 id=\"slaac\">SLAAC</h3>\n<p>SLAAC is the simplest automatic IPv6 address assignment scheme and does not require any server. It works by sending an RS message request after the host starts up and the router sends back RA messages to all nodes in the local network segment. If the RA message contains the following configuration</p>\n<ul>\n<li><strong><mark>M-bit and O-bit all clear</mark> in the message header</strong></li>\n<li><strong><mark>L-bit and A-bit all set</mark> in Prefix Information option</strong></li>\n</ul>\n<p>Then the host receives this RA message and performs the following operations to implement SLAAC:</p>\n<ol type=\"1\">\n<li>Combine the network prefix with the local interface identifier to generate a unique local address or global unicast address.</li>\n<li>Install the default gateway (or default route) to point to the router address (source address of the RA message).</li>\n<li>Set this interface as the \"on-link\" corresponding to the network prefix, which is also the next-hop interface of the default gateway above.</li>\n<li>If the RDNSS and/or DNSSL options are included, install the name servers and domain name suffixes.</li>\n</ol>\n<p>This way, the host gets one or more IPv6 unique local addresses or global unicast addresses, plus the default gateway and domain name service information to complete various Internet connections.</p>\n<p>The following is an example of the SLAAC configuration on a Cisco Catalyst 9300 Multilayer Access Switch:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipv6 unicast-routing</span><br><span class=\"line\">interface Vlan10</span><br><span class=\"line\">    ipv6 enable</span><br><span class=\"line\">    ipv6 address 2001:ABCD:1000::1/64</span><br><span class=\"line\">    ipv6 nd ra dns server 2001:4860:4860::8888 infinite</span><br><span class=\"line\">    ipv6 nd ra dns search-list example.com</span><br></pre></td></tr></table></figure>\n<p>The Layer 3 interface of the Cisco Multilayer Switch provides routing functionality. As you can see, when IPv6 is activated on the Layer 3 interface in VLAN 10, its default address auto-assignment scheme is SLAAC. the control bits of RA messages from this interface are all set according to the SLAAC scheme, and the network prefixes for each IPv6 address it configures are automatically added to the RA prefix information options list. Of course, the network administrator can also exclude certain network prefixes with a separate interface configuration command. The last two lines of the example configuration command specify RDNSS and DNSSL, which are also added to the RA message options.</p>\n<p>If a host connects to a port in VLAN 10, it immediately gets a global unicast address with the network prefix of 2001:ABCD:1000::/64, and its default gateway address is set to 2001:ABCD:1000::1. Open a browser and enter a URL, and it will send a message to the specified domain name server 2001:4860:4860::8888 (Google's public name server address) to obtain the IPv6 address of the destination URL to establish a connection.</p>\n<h3 id=\"slaac-stateless-dhcpv6\">SLAAC + Stateless DHCPv6</h3>\n<p>SLAAC automatic address assignment is fast and easy, providing a plug-and-play IPv6 deployment solution for small and medium-sized network deployments. However, if a network node needs access to additional configuration information, such as NTP/SNTP server, TFTP server, and SIP server addresses, or if its functionality relies on certain Vendor-specific Information Options, it must choose <u>SLAAC + stateless DHCPv6</u> scheme.</p>\n<p>This scenario still uses SLAAC automatic address assignment, but the router instructs the host to connect to a DHCPv6 server for additional configuration information. At this point, the RA message sent back by the router has</p>\n<ul>\n<li><strong><mark>M-bit clear and O-bit set</mark> in the message header</strong></li>\n<li><strong><mark>L-bit and A-bit all set</mark> in Prefix Information option</strong></li>\n</ul>\n<p>After receiving this RA message, the host performs the following actions:</p>\n<ol type=\"1\">\n<li>Combine the network prefix with the local interface identifier to generate a unique local address or global unicast address.</li>\n<li>Install a default gateway (or default route) pointing to the router address (source address of the RA message).</li>\n<li>Set this interface as the \"on-link\" corresponding to the network prefix, which is also the next-hop interface of the default gateway above.</li>\n<li>If the RDNSS and/or DNSSL options are included, install the name servers and domain name suffixes.</li>\n<li><mark>Start the DHCPv6 client and connect to the DHCPv6 server to request additional configuration information</mark>.</li>\n<li><mark>Save the additional configuration information replied by the DHCPv6 server</mark>.</li>\n</ol>\n<p>As you can see, <u>SLAAC + stateless DHCPv6</u> is not different from SLAAC in terms of address assignment. DHCPv6 only provides additional configuration information and does not assign IPv6 addresses. So the DHCPv6 server does not track the address assignment status of network nodes, which is what \"stateless\" means.</p>\n<p>The corresponding configuration commands on the Catalyst 9300 switch are as follows.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipv6 unicast-routing</span><br><span class=\"line\">ipv6 dhcp pool vlan-10-clients</span><br><span class=\"line\">    dns-server 2001:4860:4860::8888</span><br><span class=\"line\">    domain-name example.com</span><br><span class=\"line\">    sntp address 2001:DB8:2000:2000::33</span><br><span class=\"line\">interface Vlan10</span><br><span class=\"line\">    ipv6 enable</span><br><span class=\"line\">    ipv6 address 2001:ABCD:1000::1/64</span><br><span class=\"line\">    ipv6 nd other-config-flag</span><br><span class=\"line\">    ipv6 dhcp server vlan-10-clients</span><br><span class=\"line\">    # ipv6 dhcp relay destination 2001:9:6:40::1</span><br></pre></td></tr></table></figure>\n<p>The difference with the SLAAC example is that the VLAN 10 interface configuration command <code>ipv6 nd other-config-flag</code> explicitly specifies to set the O-bit of the RA message. Its next command, <code>ipv6 dhcp server vlan-10-clients</code>, activates the DHCPv6 server response feature of the interface, corresponding to the server's pool name of <code>vlan-10-clients</code>. The DHCPv6 server is configured above the interface configuration, starting at <code>ipv6 dhcp pool vlan-10-clients</code>, and contains the DNS server address, DNS domain name, and SNTP server address.</p>\n<p>If you are using a separate DHCPv6 server located on a network segment, you can remove the <code>ipv6 dhcp server</code> command and enable the <code>ipv6 dhcp relay destination</code> command on the next line of the example to specify the address to forward DHCPv6 requests to the external server.</p>\n<h3 id=\"stateful-dhcpv6\">Stateful DHCPv6</h3>\n<p>Many large enterprises use DHCP to manage the IPv4 addresses of their devices, so deploying DHCPv6 to centrally assign and manage IPv6 addresses is a natural preference. This is where <u>Stateful DHCPv6</u> comes into play. This scenario also requires RA messages sent by the router but does not rely solely on network prefixes for automatic address assignment. The control bits of the RA messages are configured to</p>\n<ul>\n<li><strong><mark>M-bit set</mark> in the message header, O-bit does not matter</strong></li>\n<li><strong>L-bit and A-bit can be set or clear as desired in Prefix Information option</strong></li>\n</ul>\n<p>Upon receiving this RA message, the host performs the following actions:</p>\n<ol type=\"1\">\n<li>Generate a unique local address or a global unicast address if there is a Prefix Information option with the A-bit set.</li>\n<li>Install a default gateway (or default route) pointing to the router address (source address of the RA message).</li>\n<li>If there is a Prefix Information option with the L-bit set, set this interface to \"on-link\" with the corresponding network prefix.</li>\n<li>If the RDNSS and/or DNSSL options are included, install the name servers and domain suffixes.</li>\n<li><mark>Start the DHCPv6 client and connect to the server to request addresses and other configuration information</mark>.</li>\n<li><mark>Set the address assigned by the DHCPv6 server to this interface</mark>.</li>\n<li><mark>Save additional configuration information from the DHCPv6 server response</mark>.</li>\n</ol>\n<p>An example of the <u>Stateful DHCPv6</u> configuration command on a Catalyst 9300 switch is as follows.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipv6 unicast-routing</span><br><span class=\"line\">ipv6 dhcp pool vlan-10-clients</span><br><span class=\"line\">    address prefix FD09:9:5:90::/64</span><br><span class=\"line\">    address prefix 2001:9:5:90::/64</span><br><span class=\"line\">    dns-server 2001:9:5:90::115</span><br><span class=\"line\">    domain-name test.com</span><br><span class=\"line\">interface Vlan10</span><br><span class=\"line\">    ipv6 enable</span><br><span class=\"line\">    ipv6 address 2001:ABCD:1:1::1/64</span><br><span class=\"line\">    ipv6 nd prefix 2001:ABCD:1:1::/64 no-advertise</span><br><span class=\"line\">    ipv6 nd managed-config-flag</span><br><span class=\"line\">    ipv6 dhcp server vlan-10-clients</span><br></pre></td></tr></table></figure>\n<p>Compared to <u>SLAAC + Stateless DHCPv6</u>, the interface configuration here removes the <code>ipv6 nd other-config-flag</code> and replaces it with the <code>ipv6 nd managed-config-flag</code> command. This corresponds to setting the M-bit of the RA message header. The DHCPv6 server configuration adds two <code>address prefix</code> commands to set the network prefix. Also, the <code>ipv6 nd prefix 2001:ABCD:1:1::/64 no-advertise</code> configured for the interface specifies that the router does not include the 2001:ABCD:1:1::/64 prefix information option into the RA. So, this example host interface will not generate SLAAC addresses, but only two addresses from DHPCv6: a unique local address with the network prefix FD09:9:5:90::/64, and a global unicast address with the network prefix 2001:9:5:90::/64. The interface identifier for each of these two addresses is also specified by DHPCv6.</p>\n<p>How to distinguish the source of dynamically assigned addresses for host interfaces? The method is simple. One thing to remember is that DHPCv6 does not send the network prefix length to the requestor, so the network prefix length of the addresses received from DHPCv6 is 128, while the network prefix length of the addresses generated by SLAAC will not be 128. See the following example of the wired0 interface on a Linux host:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ifconfig wired0</span><br><span class=\"line\">wired0    Link encap:Ethernet  HWaddr A0:EC:F9:6C:D9:30  </span><br><span class=\"line\">          inet6 addr: 2001:20::53c7:1364:a4d8:fd91/128 Scope:Global</span><br><span class=\"line\">          inet6 addr: 2001:20::a2ec:f9ff:fe6c:d930/64 Scope:Global</span><br><span class=\"line\">          inet6 addr: fe80::a2ec:f9ff:fe6c:d930/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:510 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:1213 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:93670 (91.4 KiB)  TX bytes:271979 (265.6 KiB)</span><br></pre></td></tr></table></figure>\n<p>We can immediately determine that the interface is using <u>Stateful DHCPv6</u> address assignment, but also generates the SLAAC address with the same network prefix 2001:20::/64 received.</p>\n<ul>\n<li>2001:20::53c7:1364:a4d8:fd91/128 — DHCPv6 address, random interface identifer</li>\n<li>2001:20::a2ec:f9ff:fe6c:d930/64 — SLAAC addeess, interface identifer is MAC in EUI-64 format</li>\n<li>fe80::a2ec:f9ff:fe6c:d930/64 — Link-local address, interface identifer is MAC in EUI-64 format</li>\n</ul>\n<div class=\"note warning\"><p><strong>Note:</strong> DHPCv6 server also does not provide any IPv6 default gateway information. The host needs to be informed of the dynamic default gateway from the RA message.</p>\n</div>\n<h3 id=\"summary-and-comparison\">Summary and Comparison</h3>\n<p>The following table shows the control bit combinations of RA messages concerning different address allocation and other configuration acquisition methods.</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">M-bit</th>\n<th style=\"text-align: center;\">O-bit</th>\n<th style=\"text-align: center;\">A-bit</th>\n<th style=\"text-align: center;\">Host Address</th>\n<th style=\"text-align: center;\">Other Configuration</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">Static Settings</td>\n<td style=\"text-align: center;\">Manual Configuration</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Prefix specified by RA, automatically generated</td>\n<td style=\"text-align: center;\">manually configured</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">Static Settings</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Prefix specified by RA, automatically generated</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">Stateful DHCPv6</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Stateful DHCPv6 and/or automatically generated</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">Stateful DHCPv6</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Stateful DHCPv6 and/or automatically generated</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n</tbody>\n</table>\n<p>Summarize three dynamic allocation schemes:</p>\n<table>\n<colgroup>\n<col style=\"width: 34%\" />\n<col style=\"width: 34%\" />\n<col style=\"width: 30%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Allocation Scheme</th>\n<th style=\"text-align: center;\">Features</th>\n<th style=\"text-align: center;\">Appiccation Scenarios</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">SLAAC</td>\n<td style=\"text-align: center;\">Simple and practical, fast deployment</td>\n<td style=\"text-align: center;\">SMB, Consumer Product Networking, Internet of Things (IoT)</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">SLAAC + Stateless DHCPv6</td>\n<td style=\"text-align: center;\">Auto Configuration, Extended Services</td>\n<td style=\"text-align: center;\">SMBs need additional network services</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Stateful DHCPv6</td>\n<td style=\"text-align: center;\">Centralized management and control</td>\n<td style=\"text-align: center;\">Large enterprises, institutions, and campus networks</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note warning\"><p><strong>Note:</strong> Since IPv6 network interfaces can have multiple addresses (a link-local address, plus one or more unique local addresses and/or global unicast addresses), it becomes important how the source address is selected when establishing an external connection. <a href=\"https://tools.ietf.org/html/rfc6724\">RFC 6724</a> gives detailed IPv6 source address selection rules. In the development of embedded systems, the control plane and the data plane connected to the same remote device are often implemented by different functional components. For example, the control plane directly calls a Linux userspace socket to establish the connection, and the IPv6 source address used for the connection is selected by the TCP/IP stack, while the data plane directly implements data encapsulation processing and transmission in kernel space. In this case, the IPv6 source address selected by the control plane has to be synchronized to the data plane in time, otherwise, the user data might not be delivered to the same destination.</p>\n</div>\n<h2 id=\"troubleshooting-guide\">Troubleshooting Guide</h2>\n<p>The common IPv6 dynamic address assignment debugging and troubleshooting commands on Cisco routers and switches are listed in the following table.</p>\n<table>\n<colgroup>\n<col style=\"width: 50%\" />\n<col style=\"width: 50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Command</th>\n<th style=\"text-align: left;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\"><code>show ipv6 interface brief</code></td>\n<td style=\"text-align: left;\">Displays a short summary of IPv6 status and configuration for each interface</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"><code>show ipv6 interface [type] [num]</code></td>\n<td style=\"text-align: left;\">Displays IPv6 and NDP usability status information for single interface</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\"><code>show ipv6 interface [type] [num] prefix</code></td>\n<td style=\"text-align: left;\">Displays IPv6 network prefix information for single interface</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"><code>show ipv6 dhcp pool</code></td>\n<td style=\"text-align: left;\">Display DHCPv6 configuration pool information</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\"><code>show ipv6 dhcp binding</code></td>\n<td style=\"text-align: left;\">Displays all automatic client bindings from the DHCPv6 server binding table</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"><code>show ipv6 dhcp interface [type] [num]</code></td>\n<td style=\"text-align: left;\">Display DHCPv6 interface information</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\"><code>debug ipv6 nd</code></td>\n<td style=\"text-align: left;\">Debug IPv6 NDP protocol</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"><code>debug ipv6 dhcp</code></td>\n<td style=\"text-align: left;\">Debug DHCPv6 server</td>\n</tr>\n</tbody>\n</table>\n<p>The following console NDP protocol debug log shows that the router received an RS message from host FE80::5850:6D61:1FB:EF3A and responded with an RA message to the multicast address FF02::1 of all nodes in this network:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Router# debug ipv6 nd</span><br><span class=\"line\">  ICMP Neighbor Discovery events debugging is on</span><br><span class=\"line\">Router# show logging | include RS</span><br><span class=\"line\">  ICMPv6-ND: Received RS on GigabitEthernet0/0/0 from FE80::5850:6D61:1FB:EF3A</span><br><span class=\"line\">Router# show logging | include RA</span><br><span class=\"line\"> ICMPv6-ND: Sending solicited RA on GigabitEthernet0/0/0</span><br><span class=\"line\"> ICMPv6-ND: Request to send RA for FE80::C801:EFFF:FE5A:8</span><br><span class=\"line\"> ICMPv6-ND: Setup RA from FE80::C801:EFFF:FE5A:8 to FF02::1 on GigabitEthernet0/0/0</span><br></pre></td></tr></table></figure>\n<p>And the next log shows an example of <u>Stateless DHCPv6</u> observed after entering the <code>debug ipv6 dhcp</code> debug command. Host FE80::5850:6D61:1FB:EF3A sends an INFORMATION-REQUEST message to the DHCPv6 server, which selects the source address FE80::C801:B9FF:FEF0:8 and sends a response message.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Router#debug ipv6 dhcp</span><br><span class=\"line\">   IPv6 DHCP debugging is on</span><br><span class=\"line\"></span><br><span class=\"line\">IPv6 DHCP: Received INFORMATION-REQUEST from FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br><span class=\"line\">IPv6 DHCP: Option VENDOR-CLASS(16) is not processed</span><br><span class=\"line\">IPv6 DHCP: Using interface pool LAN_POOL</span><br><span class=\"line\">IPv6 DHCP: Source Address from SAS FE80::C801:B9FF:FEF0:8</span><br><span class=\"line\">IPv6 DHCP: Sending REPLY to FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br></pre></td></tr></table></figure>\n<p>The following debug log of <u>Stateful DHCPv6</u> shows the complete process of two message exchanges (SOLICIT/ADVERTISE, REQUEST/REPLY) on lines 1, 15, 16, and 26.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">IPv6 DHCP: Received SOLICIT from FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br><span class=\"line\">IPv6 DHCP: Option UNKNOWN(39) is not processed</span><br><span class=\"line\">IPv6 DHCP: Option VENDOR-CLASS(16) is not processed</span><br><span class=\"line\">IPv6 DHCP: Using interface pool LAN_POOL</span><br><span class=\"line\">IPv6 DHCP: Creating binding for FE80::5850:6D61:1FB:EF3A in pool LAN_POOL</span><br><span class=\"line\">IPv6 DHCP: Binding for IA_NA 0E000C29 not found</span><br><span class=\"line\">IPv6 DHCP: Allocating IA_NA 0E000C29 in binding for FE80::5850:6D61:1FB:EF3A</span><br><span class=\"line\">IPv6 DHCP: Looking up pool 2001:ABCD::/64 entry with username &#x27;000100011F3E8772000C29806CCC0E000C29&#x27;</span><br><span class=\"line\">IPv6 DHCP: Poolentry for the user not found</span><br><span class=\"line\">IPv6 DHCP: Allocated new address 2001:ABCD::D9F7:61C:D803:DCF1</span><br><span class=\"line\">IPv6 DHCP: Allocating address 2001:ABCD::D9F7:61C:D803:DCF1 in binding for FE80::5850:6D61:1FB:EF3A, IAID 0E000C29</span><br><span class=\"line\">IPv6 DHCP: Updating binding address entry for address 2001:ABCD::D9F7:61C:D803:DCF1</span><br><span class=\"line\">IPv6 DHCP: Setting timer on 2001:ABCD::D9F7:61C:D803:DCF1 for 60 seconds</span><br><span class=\"line\">IPv6 DHCP: Source Address from SAS FE80::C801:B9FF:FEF0:8</span><br><span class=\"line\">IPv6 DHCP: Sending ADVERTISE to FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br><span class=\"line\">IPv6 DHCP: Received REQUEST from FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br><span class=\"line\">IPv6 DHCP: Option UNKNOWN(39) is not processed</span><br><span class=\"line\">IPv6 DHCP: Option VENDOR-CLASS(16) is not processed</span><br><span class=\"line\">IPv6 DHCP: Using interface pool LAN_POOL</span><br><span class=\"line\">IPv6 DHCP: Looking up pool 2001:ABCD::/64 entry with username &#x27;000100011F3E8772000C29806CCC0E000C29&#x27;</span><br><span class=\"line\">IPv6 DHCP: Poolentry for user found</span><br><span class=\"line\">IPv6 DHCP: Found address 2001:ABCD::D9F7:61C:D803:DCF1 in binding for FE80::5850:6D61:1FB:EF3A, IAID 0E000C29</span><br><span class=\"line\">IPv6 DHCP: Updating binding address entry for address 2001:ABCD::D9F7:61C:D803:DCF1</span><br><span class=\"line\">IPv6 DHCP: Setting timer on 2001:ABCD::D9F7:61C:D803:DCF1 for 172800 seconds</span><br><span class=\"line\">IPv6 DHCP: Source Address from SAS FE80::C801:B9FF:FEF0:8</span><br><span class=\"line\">IPv6 DHCP: Sending REPLY to FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br></pre></td></tr></table></figure>\n<p>For complex cases where it is difficult to identify whether the problem is with the host, router, or DHCPv6 server, we recommend using the free open-source network packet analysis software <a href=\"https://www.wireshark.org\">Wireshark</a> to capture packets of the entire process for analysis. While analyzing packets with Wireshark, you can apply the keyword filtering function.</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Filter String</th>\n<th style=\"text-align: left;\">Only Show</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">icmpv6.type=133</td>\n<td style=\"text-align: left;\">ICMPv6 RS</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">icmpv6.nd.ra.flag</td>\n<td style=\"text-align: left;\">ICMPv6 RA</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">dhcpv6</td>\n<td style=\"text-align: left;\">DHCPv6 packets</td>\n</tr>\n</tbody>\n</table>\n<p>We can either run Wireshark directly on the host side, or we can use the Switched Port Analyzer (SPAN) provided with the switch. Running on the network side, SPAN can collectively redirect packets from a given port to the monitor port running Wireshark for capturing. Cisco Catalyst 9300 Series switches also directly <a href=\"https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst9300/software/release/17-4/configuration_guide/nmgmt/b_174_nmgmt_9300_cg/configuring_packet_capture.html\">integrate with Wireshark software</a> to intercept and analyze filtered packets online, making it very easy to use.</p>\n<p>Sample packet capture files for three allocation scheme are available here for download and study: <a href=\"slaac.pcap\">slaac.pcap</a>，<a href=\"stateless-dhcpv6.pcap\">stateless-dhcpv6.pcap</a>，<a href=\"stateful-dhcpv6.pcap\">stateful-dhcpv6.pcap</a></p>\n<h2 id=\"references\">References</h2>\n<h3 id=\"ipv6-product-certification-test\">IPv6 Product Certification Test</h3>\n<p>Accurate and effective testing of IPv6 products is key to ensuring high interoperability, security, and reliability of IPv6 infrastructure deployments. The <strong>IPv6 Ready</strong> logo is an IPv6 testing and certification program created by the <a href=\"https://www.ipv6forum.com\">IPv6 Forum</a>. Its goals are to define IPv6 conformance and interoperability test specifications, provide a self-testing toolset, establish <a href=\"https://www.ipv6ready.org/faq.html#head4\">Global IPv6 Test Centers</a> and provide product validation services, and finally, issue IPv6 Ready logo.</p>\n<p>In May 2020, <a href=\"https://www.ipv6ready.org\">IPv6 Ready Logo Program</a> published new <a href=\"https://www.ipv6ready.org/resources.html\">version 5.0 test specifications</a>：</p>\n<ul>\n<li>IPv6 Core Protocols Test Specification (Conformance)</li>\n<li>IPv6 Core Protocols Interoperability Test Specification (Interoperability)</li>\n</ul>\n<p>Along with these two new test specifications, the project team also affirmed two permanent changes:</p>\n<ol type=\"1\">\n<li>Testing must be done in an IPv6-only environment, without any IPv4 being used for the device to function.</li>\n<li>The device under test must have IPv6 on and enabled on all IP interfaces by default.</li>\n</ol>\n<p>Not surprisingly, the new version 5.0 core protocols test specification has a section dedicated to defining SLAAC test cases to validate this core IPv6 protocol.</p>\n<h3 id=\"ipv6-core-protocol-rfc-list\">IPv6 Core Protocol RFC List</h3>\n<p>In the list below, the RFCs shown in bold are directly covered by the IPv6 Ready Version 5.0 Core Protocol Test Specification:</p>\n<ul>\n<li>RFC 4191 Default Router Preferences and More-Specific Routes</li>\n<li>RFC 4193 Unique Local IPv6 Unicast Addresses</li>\n<li><strong>RFC 4291 IP Version 6 Addressing Architecture</strong></li>\n<li><strong>RFC 4443 Internet Control Message Protocol (ICMPv6) for the Internet Protocol Version 6 (IPv6) Specification</strong></li>\n<li><strong>RFC 4861 Neighbor Discovery for IP version 6 (IPv6)</strong></li>\n<li><strong>RFC 4862 IPv6 Stateless Address Autoconfiguration</strong></li>\n<li>RFC 4941 Privacy Extensions for Stateless Address Autoconfiguration in IPv6</li>\n<li>RFC 5095 Deprecation of Type 0 Routing Headers in IPv6</li>\n<li>RFC 6724 Default Address Selection for Internet Protocol Version 6 (IPv6)</li>\n<li>RFC 6980 Security Implications of IPv6 Fragmentation with IPv6 Neighbor Discovery</li>\n<li>RFC 7217 A Method for Generating Semantically Opaque Interface Identifiers with IPv6 Stateless Address Autoconfiguration (SLAAC)</li>\n<li>RFC 8064 Recommendation on Stable IPv6 Interface Identifiers</li>\n<li>RFC 8106 IPv6 Router Advertisement Options for DNS Configuration</li>\n<li><strong>RFC 8200 Internet Protocol, Version 6 (IPv6) Specification</strong></li>\n<li><strong>RFC 8201 Path MTU Discovery for IP version 6</strong></li>\n<li>RFC 8415 Dynamic Host Configuration Protocol for IPv6 (DHCPv6)</li>\n</ul>\n","categories":["Study Notes"],"tags":["TCP/IP","Cisco Technology"]},{"title":"Purdue CS24000 Fall 2018 Midterm 1 Solutions","url":"/en/2024/02/24/Purdue-CS240-2018-Fall-Midterm1/","content":"<p>Purdue University CS24000 is an undergraduate-level course that teaches students programming principles and techniques for problem-solving in the C programming language. Here are the solution and study notes for the Fall 2018 Midterm 1 exam. <span id=\"more\"></span></p>\n<h2 id=\"cs24000-syllabus\">CS24000 Syllabus</h2>\n<p>Below are extracted from the Spring 2024 CS24000 course syllabus:</p>\n<blockquote>\n<p><strong><em>Disclosure</em></strong>: <em>This blog site is reader-supported. When you buy through the affiliate links below, as an Amazon Associate, I earn a tiny commission from qualifying purchases. Thank you.</em></p>\n</blockquote>\n<ul>\n<li><strong>Course Title:</strong> Programming in C</li>\n<li><strong>Textbook:</strong> <a href=\"https://amzn.to/49KluIz\">The C Programming Language (2nd Edition)</a>; Kernighan and Ritchie; March 1988</li>\n</ul>\n<p><a href=\"https://amzn.to/49KluIz\"><img src=\"C-ProgLang-2nd.jpg\" style=\"width:40.0%;height:40.0%\" /></a></p>\n<ul>\n<li><strong>Reference:</strong> <a href=\"https://beej.us/guide/bgc/\">Beej’s Guide to C Programming</a>; Brian “Beej” Hall; 2007</li>\n<li><strong>Course Outcomes:</strong> A student who successfully fulfills the course requirements will have the ability to:\n<ul>\n<li>write quality code that is readable, maintainable, and well commented</li>\n<li>create, compile, and execute C programs using industry standard tools including the GNU Compiler Collection</li>\n<li>apply debugging techniques to analyze, identify, and fix errors</li>\n<li>assess and address security-related issues in code bases written in C</li>\n<li>produce code that appropriately and properly utilizes pointers</li>\n<li>solve problems through the application of explicit memory management</li>\n<li>design and implement programs in C that utilize dynamic data structures such as linked lists and trees</li>\n</ul></li>\n<li><strong>Lectures:</strong> <img src=\"Purdue-CS240-Spring-2024-Syllabus.png\" style=\"width:80.0%;height:80.0%\" /></li>\n</ul>\n<h2 id=\"fall-2018-midterm-1-exam\">Fall 2018 Midterm 1 Exam</h2>\n<div class=\"pdf-container\" data-target=\"Purdue-CS240-Fall-2018-midterm-1.pdf\" data-height=\"600px\"></div>\n<h2 id=\"exam-solutions-and-notes\">Exam Solutions and Notes</h2>\n<h3 id=\"problem-1-20-pts\">Problem 1 (20 pts)</h3>\n<ul>\n<li><p><strong>(a)</strong> <code>gcc -Wall -Werror -g -c abc.c -o xyz.o</code><br />\nExplanation of the options used:</p>\n<ul>\n<li><code>-Wall</code>: Enable all warnings.</li>\n<li><code>-Werror</code>: Treat warnings as errors.</li>\n<li><code>-g</code>: Include debugging information in the output file.</li>\n<li><code>-c</code>: Compile or assemble the source files, but do not link.</li>\n<li><code>abc.c</code>: The source file to be compiled.</li>\n<li><code>-o xyz.o</code>: Specify the output file name (xyz.o).</li>\n</ul>\n<p><strong>📝Notes:</strong> <em>This output file <code>xyz.o</code> is not executable since it is just the object file for a single c source file. We need to link to the standard library to make a executable file. If we force to run this xyz.o, it will return something like <code>exec format error</code>.</em></p></li>\n<li><p><strong>(b)</strong> <code>gcc xyz.o abc.o def.c -o prog</code><br />\nExplanation:</p>\n<ul>\n<li><code>xyz.o</code>, <code>abc.o</code>: Object files to be linked.</li>\n<li><code>def.c</code>: Source file to be compiled and linked.</li>\n<li><code>-o prog</code>: Specify the output file name (prog).</li>\n</ul></li>\n<li><p><strong>(c)</strong> It advises gcc to include all warnings that help detect potentially problematic code.</p></li>\n<li><p><strong>(d)</strong> Many functions found in the string library (declared in <code>string.h</code>) rely on null-terminated strings to operate correctly. Null-terminated strings are sequences of characters followed by a null character ('\\0'), which indicates the end of the string. Functions like <code>strlen</code>, <code>strcpy</code>, <code>strcat</code>, <code>strcmp</code>, and others expect null-terminated strings as input and produce null-terminated strings as output.</p></li>\n<li><p><strong>(e)</strong> In C, memory for a variable is allocated during its definition, not during its declaration.</p>\n<p>Declaration is announcing the properties of variable (no memory allocation), definition is allocating storages for a variable. Put pure declaration (struct, func prototype, extern) outside of the func, put definition inside func.</p></li>\n<li><p><strong>(f)</strong> <code>size = 32</code> (There are 8 integer elements in this array, so 4 * 8.)</p></li>\n<li><p><strong>(g)</strong> 5 (Because <code>ptr</code> is given the address of the 3rd element. So <code>*(ptr - 1)</code> is the value of the 2nd element.)</p></li>\n<li><p><strong>(h)</strong> 12 (This is equal to <code>*(ptr - *(ptr + 3))</code>, then <code>*(ptr - 2)</code>. So finally it points to the 1st element of the array.)</p></li>\n<li><p><strong>(i)</strong> 8 (Because it mentions \"64-bit architecture\", so all addresses are of size 64-bit)</p></li>\n</ul>\n<h3 id=\"problem-2-20-pts\">Problem 2 (20 pts)</h3>\n<ul>\n<li><p><strong>(a)</strong> The answer is shown below: (remember to define ID_LEN first and add ';' after the '}')</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ID_LEN (5)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">resistor</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> id[ID_LEN];</span><br><span class=\"line\">    <span class=\"type\">float</span> max_power;</span><br><span class=\"line\">    <span class=\"type\">int</span> resistance;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>(b)</strong> The answer is shown below:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">resistor</span> <span class=\"title\">resistor_t</span>;</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>(c)</strong> The answer is shown below: (remember to define ID_LEN first and add ';' after the '}')</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> CNAME_LEN (24)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">circuit_struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">char</span> name[CNAME_LEN];</span><br><span class=\"line\">    <span class=\"type\">resistor_t</span> resistors[<span class=\"number\">10</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>(d)</strong> It will print <code>sizeof = 920</code>. Explanation: 5 * (24 + 10 * (8 + 4 + 4)) = 920. This is because the id inside the resistor will occupy 8 bytes after padding to a multiple of 4.</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">circuit_struct</span> <span class=\"title\">circuit_board</span>[5];</span></span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>(e)</strong> The function can be written like the following:</p>\n<p><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">find_voltage</span><span class=\"params\">(<span class=\"type\">resistor_t</span> r, <span class=\"type\">int</span> c)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (c * r.resistance);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p></li>\n</ul>\n<h3 id=\"problem-3-40-pts\">Problem 3 (40 pts)</h3>\n<h3 id=\"problem-4-20-pts\">Problem 4 (20 pts)</h3>\n<p>The solution can be like this: (the include and struct definition are not necessary)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">coord</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">float</span> x;</span><br><span class=\"line\">    <span class=\"type\">float</span> y;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> coord <span class=\"title function_\">find_center</span><span class=\"params\">(FILE *file_ptr)</span> &#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">coord</span> <span class=\"title\">center</span> =</span> &#123;<span class=\"number\">0.0</span>, <span class=\"number\">0.0</span>&#125;;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">coord</span> <span class=\"title\">temp</span>;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_ptr == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Error: NULL file pointer\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set file position indicator to the beginning</span></span><br><span class=\"line\">    rewind(file_ptr);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fread(&amp;temp, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> coord), <span class=\"number\">1</span>, file_ptr) == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        center.x += temp.x;</span><br><span class=\"line\">        center.y += temp.y;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        center.x /= count;</span><br><span class=\"line\">        center.y /= count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Study Notes"],"tags":["C/C++ Programming"]},{"title":"Purdue CS24000 2022 and 2023 Summer Midterm Solutions","url":"/en/2024/02/25/Purdue-CS240-2022-2023-Summer-Midterm/","content":"<p>Purdue University CS24000 is an undergraduate-level course that teaches students programming principles and techniques for problem-solving in the C programming language. Here are the solutions and study notes for the 2022 and 2023 Midterm exams. <span id=\"more\"></span></p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Below are extracted from the Summer 2023 CS24000 course homepage:</p>\n<blockquote>\n<p><strong><em>Disclosure</em></strong>: <em>This blog site is reader-supported. When you buy through the affiliate links below, as an Amazon Associate, I earn a tiny commission from qualifying purchases. Thank you.</em></p>\n</blockquote>\n<ul>\n<li><strong>Course Title:</strong> Programming in C</li>\n<li><strong>Textbook:</strong> <a href=\"https://amzn.to/49KluIz\">The C Programming Language (2nd Edition)</a>; Kernighan and Ritchie; March 1988</li>\n</ul>\n<p><a href=\"https://amzn.to/49KluIz\"><img src=\"https://www.packetmania.net/en/2024/02/24/Purdue-CS240-2018-Fall-Midterm1/C-ProgLang-2nd.jpg\" style=\"width:40.0%;height:40.0%\" /></a></p>\n<ul>\n<li><strong>Reference:</strong> <a href=\"https://beej.us/guide/bgc/\">Beej’s Guide to C Programming</a>; Brian “Beej” Hall; 2007</li>\n<li><strong>Lecture Subjects</strong>\n<ul>\n<li>Roles of C compiler, C preprocessor, linker, loader.</li>\n<li>Main memory: addresses and their content, meaning of variables.</li>\n<li>Reading from stdin and writing to stdout.</li>\n<li>Fundamental difference between printf() and scanf(): need to pass addresses in scanf().</li>\n<li>Pointers and indirection.</li>\n<li>Global vs. local variables.</li>\n<li>Function calls and passing arguments.</li>\n<li>Passing by value vs. reference, their typical usage.</li>\n<li>Basic methods for run-time debugging.</li>\n<li>Memory layout of 1-D arrays, indexing using pointer notation.</li>\n<li>Segmentation fault, silent run-time errors.</li>\n<li>Array overrun, stack smashing and gcc intervention.</li>\n<li>Scope of global and local variables, properties of static variables.</li>\n<li>Memory layout of 2-D integer arrays, indexing using pointer notation.</li>\n<li>Basic string processing.</li>\n<li>Function pointers.</li>\n<li>Basic file I/O.</li>\n<li>Controlling the number of bytes read to prevent stack smashing.</li>\n<li>Using the make tool to help automate code maintenance.</li>\n<li>Bit processing techniques, common applications.</li>\n<li>Basic dynamic memory allocation using malloc(), 1-D and 2-D array examples.</li>\n<li>Applications of 2-D tables, limitation and caution regarding the use of variable length arrays.</li>\n<li>Command-line argument support in main(), loader invocation and passing arguments using execl().</li>\n<li>Applications of command-line arguments.</li>\n<li>Composite data types using struct, its memory structure, and applications.</li>\n<li>Conversion/casting of data types.</li>\n<li>Variadic functions: structure and applications.</li>\n<li>Application of passing function pointers: responding to events via callback functions (i.e., throwing and catching exceptions).</li>\n<li>union and enum: structure and applications.</li>\n<li>Role of const qualifier in argument passing.</li>\n<li>Basic structure of concurrent client/server apps, shell as an example app.</li>\n<li>Additional features and applications of file I/O.</li>\n</ul></li>\n</ul>\n<h2 id=\"summer-2022-midterm-solutions-and-notes\">Summer 2022 Midterm Solutions and Notes</h2>\n<h3 id=\"problem-1-36-pts\">Problem 1 (36 pts)</h3>\n<p><strong>(a)</strong> Consider the code snippet</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a, *b, *c;</span><br><span class=\"line\">a = <span class=\"number\">3</span>; b = &amp;a;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *b);</span><br><span class=\"line\">*c = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, *c);</span><br></pre></td></tr></table></figure>\n<p>Explain in detail what is likely to happen if the code snippet is compiled and executed.</p>\n<p><strong>(b)</strong> What are the possible outcomes if the code snippet</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> r[<span class=\"number\">4</span>];</span><br><span class=\"line\">r[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;H&#x27;</span>;</span><br><span class=\"line\">r[<span class=\"number\">1</span>] = <span class=\"string\">&#x27;i&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s&quot;</span>, r);</span><br></pre></td></tr></table></figure>\n<p>is compiled and executed? Explain your reasoning.</p>\n<p><strong>(c)</strong> Suppose we have a 2-D array, <code>int x[2][3]</code>, wherein 6 integers are stored. What array expression is <code>*(*(x+1)+2)</code> equivalent to, and why?</p>\n<details class=\"note success\"><summary><p>Problem 1 Solution</p>\n</summary>\n<p><strong>(a)</strong> The first <code>printf()</code> outputs 3 since <code>b</code> is a pointer to integer variable a. <code>*c = 5</code> is likely to generate a segmentation fault since the code does not place a valid address in c before this assignment. The second <code>printf()</code> is likely not reached due to a segmentation fault from <code>*c = 5</code> which terminates the running program.</p>\n<p><strong>(b)</strong> There are two possible outcomes:</p>\n<ol type=\"1\">\n<li>prints \"Hi\" to stdout.</li>\n<li>prints \"Hi\" followed by additional byte values.</li>\n</ol>\n<p>Explanation: If the memory location <code>r[2]</code> contains EOS ('\\0') then the first outcome results. Otherwise, <code>printf()</code> will continue to print byte values (not necessarily ASCII) until a byte containing 0 (i.e.,EOS) is reached.</p>\n<p><strong>(c)</strong> Equivalent to <code>x[1][2]</code>.</p>\n<p>Explanation: In our logical view of 2-D arrays: <code>x</code> points to the location in memory where the beginning addresses of two 1-D integer arrays are located. Therefore <code>x+1</code> points to the beginning address of the second 1-D integer array. <code>*(x+1)</code> follows the pointer to the beginning address of the second 1-D integer array. <code>*(x+1)+2</code> results in the address at which the third element of the second 1-D integer array is stored. <code>*(*(x+1)+2)</code> accesses the content of the third element of the second 1-D integer array. Hence equivalent to <code>x[1][2]</code>.</p>\n\n</details>\n<h3 id=\"problem-2-32-pts\">Problem 2 (32 pts)</h3>\n<p><strong>(a)</strong> Suppose <code>main()</code> calls function</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">abc</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">3</span>, <span class=\"type\">static</span> <span class=\"type\">int</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(++a &gt; ++b) <span class=\"keyword\">return</span> a++;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> ++b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>three times. Explain what values are returned to main() in each of the three calls to <code>abc()</code>.</p>\n<p><strong>(b)</strong> Suppose the code snippet</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">float</span> m, **n;</span><br><span class=\"line\">m = <span class=\"number\">3.3</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f&quot;</span>, m);</span><br><span class=\"line\">**n = <span class=\"number\">5.5</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p&quot;</span>, n);</span><br></pre></td></tr></table></figure>\n<p>is compiled and executed. What is likely to happen, and why? How would you modify the code (involving <code>printf()</code> calls) to facilitate ease of run-time debugging?</p>\n<details class=\"note success\"><summary><p>Problem 2 Solution</p>\n</summary>\n<p><strong>(a)</strong> Here are the three return values for each call and the explanation:</p>\n<ol type=\"1\">\n<li>First call returns 4. The if-statement checks 4 &gt; 2 and <code>a++</code> returns 4 before incrementing <code>a</code>.</li>\n<li>Second call returns 4. Before the if-statement, the static variable <code>b</code> becomes 2 since it preserves the previous value from the first call. So the if-statement checks 4 &gt; 3. Hence <code>a++</code> returns 4.</li>\n<li>Third call return 5. Now the static variable <code>b</code> becomes 3 at the beginning of the call, and the if-statement checks 4 &gt; 4. So the program goes to the else-part which increments <code>b</code> again and returns <code>b</code>. Hence the function call returns 5.</li>\n</ol>\n<p><strong>(b)</strong> Since we did not assign a valid address to <code>n</code>, <code>**n</code> is likely to reference an invalid address that triggers a segmentation fault which terminates the running program.</p>\n<p>Although the first <code>printf()</code> call was successful, 3.3 will likely will not be output to stdout (i.e., display) due to abnormal termination of the program and buffering by stdio library functions.</p>\n<p>Adding a newline in the first <code>printf(</code>) call, or calling <code>fflush(stdout)</code> after the first <code>printf()</code> call will force 3.3 in the stdout buffer to be flushed before the program terminates due to segmentation fault.</p>\n\n</details>\n<h3 id=\"problem-3-32-pts\">Problem 3 (32 pts)</h3>\n<p><strong>(a)</strong> Suppose you are supervising a team of C programmers. One of the team members is responsible for coding a function, <code>int readpasswd(void)</code>, that reads from stdin a new password and checks that it contains upper case letters, special characters, etc. per company policy. The team member shows you part of the code</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">readpasswd</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span> secret[<span class=\"number\">100</span>];</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, secret);</span><br><span class=\"line\">    <span class=\"comment\">/* code follows to check validity of password */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>that reads a password from stdin and stores it in local variable <code>secret</code> for further processing. Explain why you would be alarmed by the code. How would you rewrite to fix the problem in the code?</p>\n<p><strong>(b)</strong> Code <code>main()</code> that reads a file, test.out, byte by byte using <code>fgetc()</code> and counts how many bytes are ASCII characters. <code>main()</code> outputs the count to stdout. Focus on making sure that your code is robust and does not crash unexpectedly.</p>\n<details class=\"note success\"><summary><p>Problem 3 Solution</p>\n</summary>\n<p><strong>(a)</strong> The <code>scanf()</code> does not prevent user input that exceeds buffer size (100 characters) from overwriting memory in <code>readpasswd()</code>'s stack frame, potentially modifying its return address. This can lead to the execution of unintended code such as malware.</p>\n<p>Alternate: The <code>scanf()</code> functions can lead to a buffer overflow if used improperly. Here in this function, it does not have bound checking capability and if the input string is longer than 100 characters, then the input will overflow into the adjoining memory and corrupt the stack frame.</p>\n<p><strong>📝Notes:</strong> <em>This is a major security flaw in <code>scanf</code> family (<code>scanf</code>, <code>sscanf</code>, <code>fscanf</code> ..etc) esp when reading a string because they don't take the length of the buffer (into which they are reading) into account.</em></p>\n<p>To fix this, the code should explicitly check that no more than 100 characters are read from stdin to prevent overflow over <code>secret[100]</code>. This can be done by reading character by character using <code>getchar()</code> in a loop until a newline is encountered or 100 characters have been read.</p>\n<p><strong>(b)</strong> A sample solution can be seen below</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    <span class=\"type\">int</span> c, count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((fp = fopen(<span class=\"string\">&quot;test.out&quot;</span>,<span class=\"string\">&quot;r&quot;</span>)) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>,<span class=\"string\">&quot;opening file blog.dat failed\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((c = fgetc(fp)) != EOF) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"number\">0</span> &lt;= c &lt;= <span class=\"number\">127</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// it&#x27;s an ASCII character, increment count</span></span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;count = %d\\n&quot;</span>, count); <span class=\"comment\">//output result    fclose(fp);</span></span><br><span class=\"line\">    fp = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</details>\n<h3 id=\"bonus-problem-10-pts\">Bonus Problem (10 pts)</h3>\n<p>Suppose you are given the code in main.c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> s[<span class=\"number\">5</span>]; </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">50</span>; i++)</span><br><span class=\"line\">        s[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>which is compiled using gcc and executed. What are the two possible outcomes? Explain your answer.</p>\n<details class=\"note success\"><summary><p>Bonus Problem Solution</p>\n</summary>\n<ul>\n<li>Outcome 1: The for-loop overwrites global memory following <code>s[5]</code> which may, or may not, corrupt program data and computation but does not crash the running program (i.e., silent run-time bug).</li>\n<li>Outcome 2: The for-loop overwrites global memory following <code>s[5]</code> which exceeds the running program's valid memory, resulting in a segmentation fault.</li>\n</ul>\n\n</details>\n<h2 id=\"summer-2023-midterm-solutions-and-notes\">Summer 2023 Midterm Solutions and Notes</h2>\n<h3 id=\"problem-1-30-pts\">Problem 1 (30 pts)</h3>\n<p><strong>(a)</strong> Consider the code snippet</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> x, *y, *z;</span><br><span class=\"line\">x = <span class=\"number\">5</span>; </span><br><span class=\"line\">y = &amp;x;</span><br><span class=\"line\">*y = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %p\\n&quot;</span>, x, y);</span><br><span class=\"line\">*z = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p>Explain what is likely to happen if the code snippet is compiled and executed as part of <code>main()</code>.</p>\n<p><strong>(b)</strong> Explain what the declarations of g and h mean:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">g</span><span class=\"params\">(<span class=\"type\">char</span> *)</span>, <span class=\"params\">(*h)</span><span class=\"params\">(<span class=\"type\">char</span> *)</span>;</span><br></pre></td></tr></table></figure>\n<p>For the two assignment statements to be meaningful</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = g(s);</span><br><span class=\"line\">h = y;</span><br></pre></td></tr></table></figure>\n<p>what must be the types of <code>x</code> and <code>y</code>? Provide the C statements for their type declarations.</p>\n<details class=\"note success\"><summary><p>Problem 1 Solution</p>\n</summary>\n<p><strong>(a)</strong> <code>printf()</code> will output 10 (for x) and the address of x (in hexadecimal notation) which is contained in y. Assignment statement <code>*z = 3</code> will likely trigger a segmentation fault since a valid address has not been stored in z.</p>\n<p><strong>(b)</strong> g is a function that takes a single argument that is a pointer to char (i.e., <code>char *</code>), and g returns a pointer to char (i.e., address that points to char). h is a function pointer that takes a single argument that is a pointer to char, and h returns a value of type char.</p>\n<p>x is a pointer to char, i.e., <code>char *x</code>. y is a function that takes an argument that is a pointer to char and returns a value of type char, i.e., <code>char y(char *)</code>.</p>\n\n</details>\n<h3 id=\"problem-2-30-pts\">Problem 2 (30 pts)</h3>\n<p><strong>(a)</strong> For the function</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">fun</span><span class=\"params\">(<span class=\"type\">float</span> a)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">float</span> x[<span class=\"number\">5</span>], i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">8</span>; i++) </span><br><span class=\"line\">        x[i] = a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>explain what is likely to happen if <code>fun()</code> is called by <code>main()</code>. Explain how things change if 1-D array <code>x</code> is made to be global.</p>\n<p><strong>(b)</strong> What are potential issues associated with code snippet</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">FILE *f;</span><br><span class=\"line\"><span class=\"type\">char</span> r[<span class=\"number\">100</span>];</span><br><span class=\"line\">f = fopen(<span class=\"string\">&quot;data.dat&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">fscanf</span>(f, <span class=\"string\">&quot;%s&quot;</span>, r);</span><br></pre></td></tr></table></figure>\n<p>Provide modified code that fixes the issues.</p>\n<details class=\"note success\"><summary><p>Problem 2 Solution</p>\n</summary>\n<p><strong>(a)</strong> Calling fun() will likely generate a stack smashing error. This is so since x is local to <code>fun()</code> and overflowing the 1-D array (by 3 elements, i.e., 12 bytes) is likely to cause the canary (bit pattern) inserted by gcc (to guard the return address) to be changed. If x is made global, gcc does not insert a canary, hence stack smashing will not occur. However, overflowing x may, or may not, trigger a segmentation fault.</p>\n<p><strong>(b)</strong> Two potential issues:</p>\n<ol type=\"1\">\n<li><code>fopen()</code> may fail and return NULL.</li>\n<li><code>fscanf()</code> may overflow 1-D array r if the character sequence in <code>data.dat</code> exceeds 100 bytes.</li>\n</ol>\n<p>To fix these, do the following modifications:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">f = fopen(<span class=\"string\">&quot;data.dat&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (f == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;error opening data.dat&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">fscanf</span>(f, <span class=\"string\">&quot;%99s&quot;</span>, r);</span><br></pre></td></tr></table></figure>\n\n</details>\n<h3 id=\"problem-3-40-pts\">Problem 3 (40 pts)</h3>\n<p><strong>(a)</strong> A 2-D integer array, <code>int d[100][200]</code>, declaration is restrictive in that it hardcodes the number of rows and columns to fixed values 100 and 200, respectively. Suppose two integers N and M are read from stdin that specify the number of rows and columns of a 2-D integer array which is then used to read N x M integers from stdin into main memory. Provide C code <code>main()</code> that uses malloc() to achieve this task. Your code should be complete but for including header files.</p>\n<p><strong>(b)</strong> Provide code that reads a value of type <code>unsigned int</code> from stdin, then uses bit processing techniques to count how many of the 32 bits contain bit value 0. Annotate your code to note what the different parts are doing.</p>\n<details class=\"note success\"><summary><p>Problem 3 Solution</p>\n</summary>\n<p><strong>(a)</strong> The complete code is shown below (Note we skip the NULL check for the return of <code>malloc()</code>, add that after each such call if required)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> **d;</span><br><span class=\"line\">    <span class=\"type\">int</span> N, M, i, j;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;N, &amp;M);</span><br><span class=\"line\">    d = (<span class=\"type\">int</span> **)<span class=\"built_in\">malloc</span>(N * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span> *));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// can also use d[i] on the left below</span></span><br><span class=\"line\">        *(d + i) = (<span class=\"type\">int</span> *)<span class=\"built_in\">malloc</span>(M * <span class=\"keyword\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;N; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j=<span class=\"number\">0</span>; j&lt;M; j++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;d[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>📝Notes:</strong> Freeing memory of such a 2-D integer array also needs two steps:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">free_2d_array</span><span class=\"params\">(<span class=\"type\">int</span> **<span class=\"built_in\">array</span>, <span class=\"type\">int</span> rows)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; rows; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// equivalent to free(array[i])</span></span><br><span class=\"line\">        <span class=\"built_in\">free</span>(*(<span class=\"built_in\">array</span>+i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(<span class=\"built_in\">array</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>(b)</strong> The solution code can be seen below</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> x, m = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> i, count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%u&quot;</span>, &amp;x);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">32</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((x &amp; m) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x = x &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, count);</span><br></pre></td></tr></table></figure>\n\n</details>\n<h3 id=\"bonus-problem-10-pts-1\">Bonus Problem (10 pts)</h3>\n<p>Explain why <code>printf(\"%d\", x)</code> passes argument x by value whereas <code>scanf(\"%d\", &amp;x)</code> passes the argument by reference. Can one code <code>printf()</code> so that it passes x by reference? If so, why is it not done?</p>\n<details class=\"note success\"><summary><p>Bonus Problem Solution</p>\n</summary>\n<p><code>printf()</code> only needs a copy of the value of x to do its work of printing the value to stdout. <code>scanf()</code> needs the address of x so that the value entered through stdin (by default, keyboard) can be stored at the address of x. Yes, since following the address of x allows printf() to access its value. It is not necessary to reveal the address of x to <code>printf()</code> since it only requires its value.</p>\n\n</details>\n","categories":["Study Notes"],"tags":["C/C++ Programming"]},{"title":"Purdue MA 26500 Fall 2022 Midterm I Solutions","url":"/en/2024/01/19/Purdue-MA265-2022-Fall-Midterm1/","content":"<p>Linear algebra provides mathematical tools to represent and analyze data and models in higher dimensions. It is essential for machine learning, computer graphics, control theory, and other scientific and engineering fields. Starting from this post, I will provide study guides and solutions to Purdue MA26500 exams in the last few semesters.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>You can’t learn too much linear algebra</strong><br> <strong>— <em>Benedict Gross</em> (American mathematician, professor at the University of California San Diego and Harvard University, member of the National Academy of Sciences)</strong></p>\n</div>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Purdue University is a world-renowned public research university that advances scientific, technological, engineering, and math discoveries. Purdue Department of Mathematics provides a linear algebra course MA 26500 every semester, as it is mandatory for undergraduate students of many science and engineering majors.</p>\n<blockquote>\n<p><strong><em>Disclosure</em></strong>: <em>This blog site is reader-supported. When you buy through the affiliate links below, as an Amazon Associate, I earn a tiny commission from qualifying purchases. Thank you.</em></p>\n</blockquote>\n<h3 id=\"basic-information\">Basic Information</h3>\n<ul>\n<li><strong>Course Title</strong>: Introduction to Linear Algebra</li>\n<li><strong>Credit Hours</strong>: 3.00</li>\n<li><strong>Lectures</strong>: 50 minutes per session, 3 times a week, 16 weeks</li>\n<li><strong>Course Description</strong>: A computational introduction to linear algebra, which plays a fundamental role in science, engineering, and the social sciences, and this course will provide the student a firm basis for the use of such.</li>\n<li><strong>Key Topics</strong>: systems of linear equations; matrix algebra; vector spaces; determinants; eigenvalues and eigenvectors; diagonalization of matrices; and applications</li>\n<li><strong>Textbook</strong>: <a href=\"https://amzn.to/3Srz7qm\"><em>Linear Algebra and its Applications</em></a> (6th Edition) by David C. Lay, Steven R. Lay, and Judi J. McDonald</li>\n<li><strong>Study Guide</strong>: <a href=\"https://amzn.to/428m5Bl\"><em>Study Guide for Linear Algebra and Its Applications 6th Edition</em></a> by the same authors for the students.</li>\n</ul>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><a href=\"https://amzn.to/3Srz7qm\"><img src=\"Linear-Algebra-and-Its-Applications-6e.jpg\" /></a></div><div class=\"group-picture-column\"><a href=\"https://amzn.to/428m5Bl\"><img src=\"Linear-Algebra-and-Its-Appl-6th-study-guide.jpg\" /></a></div></div></div>\n<h3 id=\"homework-and-exams\">Homework and Exams</h3>\n<ul>\n<li>35 online homework assignments using <a href=\"pearson.com/mylab/math\">MyLab Math</a></li>\n<li>36 handwriting homework assignments (<a href=\"https://www.math.purdue.edu/academic/courses/semester/202420/ma26500/resources/Assignment_SS2024.pdf\">Spring 2024</a>)</li>\n<li><strong>Midterm I</strong> (Book Sections 1.1 – 3.3): 1 hour (6-week mark)</li>\n<li><strong>Midterm II</strong> (Book Sections 4.1 – 5.7): 1 hour (12-week mark)</li>\n<li>Midterm format: a combination of multiple-choice questions and short answer questions</li>\n<li><strong>Final</strong> (Comprehensive Common): 2 hours (16-week mark), all multiple-choice questions</li>\n<li><strong>Grades</strong>\n<ul>\n<li>Online Homework - 17%</li>\n<li>Written Homework - 8%</li>\n<li>Midterm Exam I - 20%</li>\n<li>Midterm Exam II - 20%</li>\n<li>Final Exam - 35%</li>\n</ul></li>\n</ul>\n<h3 id=\"reference-links\">Reference Links</h3>\n<ul>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/semester/semesters\">Purdue Department of Mathematics Course Achive</a></li>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/semester/202420/ma26500/index.html\">Purdue MA 26500 Spring 2024</a></li>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/oldexams.php?course=MA26500\">Purdue MA 26500 Exam Archive</a></li>\n</ul>\n<h2 id=\"fall-2022-midterm-i-solutions\">Fall 2022 Midterm I Solutions</h2>\n<h3 id=\"problem-1-10-points\">Problem 1 (10 points)</h3>\n<p>Let <span class=\"math inline\">\\(A=\\begin{bmatrix}1 &amp; 2\\\\3 &amp; 5\\\\\\end{bmatrix}\\)</span>，<span class=\"math inline\">\\(B=\\begin{bmatrix}3 &amp; 1\\\\4 &amp; 1\\\\\\end{bmatrix}\\)</span>, and <span class=\"math inline\">\\(C=AB^{-1}= \\begin{bmatrix}a &amp; b\\\\c &amp; d\\\\\\end{bmatrix}\\)</span>, then <span class=\"math inline\">\\(a+b+c+d=\\)</span></p>\n<ul>\n<li>A. <span class=\"math inline\">\\(-7\\)</span></li>\n<li>B. <span class=\"math inline\">\\(8\\)</span></li>\n<li>C. <span class=\"math inline\">\\(7\\)</span></li>\n<li>D. <span class=\"math inline\">\\(-8\\)</span></li>\n<li>E. <span class=\"math inline\">\\(0\\)</span></li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 1 Solution</p>\n</summary>\n<p>Because <span class=\"math inline\">\\(C=AB^{-1}\\)</span>, we can multiple both sides by <span class=\"math inline\">\\(B\\)</span> and obtain <span class=\"math inline\">\\(CB=AB^{-1}B=A\\)</span>. So <span class=\"math display\">\\[\n\\begin{bmatrix}a &amp; b\\\\c &amp; d\\\\\\end{bmatrix}\n\\begin{bmatrix}3 &amp; 1\\\\4 &amp; 1\\\\\\end{bmatrix}=\n\\begin{bmatrix}1 &amp; 2\\\\3 &amp; 5\\\\\\end{bmatrix}\n\\]</span> Further, compute at the left side <span class=\"math display\">\\[\n\\begin{bmatrix}3a+4b &amp; a+b\\\\3c+4d &amp; c+d\\\\\\end{bmatrix}=\n\\begin{bmatrix}1 &amp; 2\\\\3 &amp; 5\\\\\\end{bmatrix}\n\\]</span> From here we can directly see <span class=\"math inline\">\\(a+b=2\\)</span> and <span class=\"math inline\">\\(c+d=5\\)</span>, so <span class=\"math inline\">\\(a+b+c+d=7\\)</span>. The answer is <mark><strong>C</strong></mark>.</p>\n<p><strong>⚠️Alert:</strong> There is no need to find the inverse of the matrix <span class=\"math inline\">\\(B\\)</span> and multiply the result with <span class=\"math inline\">\\(A\\)</span>. Even if you can deduce the same answer, it is very inefficient and takes too much time.</p>\n\n</details>\n<h3 id=\"problem-2-10-points\">Problem 2 (10 points)</h3>\n<p>Let <span class=\"math inline\">\\(\\mathrm L\\)</span> be a linear transformation from <span class=\"math inline\">\\(\\mathbb R^3\\)</span> to <span class=\"math inline\">\\(\\mathbb R^3\\)</span> whose standard matrix is <span class=\"math inline\">\\(\\begin{bmatrix}1 &amp;2 &amp;3\\\\0 &amp;1 &amp;1\\\\2 &amp;3 &amp; k\\\\\\end{bmatrix}\\)</span> where <span class=\"math inline\">\\(k\\)</span> is a real number. Find all values of <span class=\"math inline\">\\(k\\)</span> such that <span class=\"math inline\">\\(\\mathrm L\\)</span> is one-to-one.</p>\n<ul>\n<li>A. <span class=\"math inline\">\\(k\\neq 1\\)</span></li>\n<li>B. <span class=\"math inline\">\\(k\\neq 2\\)</span></li>\n<li>C. <span class=\"math inline\">\\(k\\neq 3\\)</span></li>\n<li>D. <span class=\"math inline\">\\(k\\neq 4\\)</span></li>\n<li>E. <span class=\"math inline\">\\(k\\neq 5\\)</span></li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 2 Solution</p>\n</summary>\n<p>For this standard matrix, do elementary row operations below to achieve <strong>row echelon form</strong>.</p>\n<p>First, add -2 times row 1 to row 3: <span class=\"math display\">\\[\\begin{bmatrix}1 &amp;2 &amp;3\\\\0 &amp;1 &amp;1\\\\0 &amp;-1 &amp;k-6\\\\\\end{bmatrix}\\]</span> Then add row 2 to row 3: <span class=\"math display\">\\[\\begin{bmatrix}1 &amp;2 &amp;3\\\\0 &amp;1 &amp;1\\\\0 &amp;0 &amp;k-5\\\\\\end{bmatrix}\\]</span> If <span class=\"math inline\">\\(k=5\\)</span>, the equation <span class=\"math inline\">\\(A\\mathbf x=\\mathbf b\\)</span> has a free variable <span class=\"math inline\">\\(x_3\\)</span> and each <span class=\"math inline\">\\(\\mathbf b\\)</span> is the image of more than one <span class=\"math inline\">\\(\\mathbf x\\)</span>. That is, <span class=\"math inline\">\\(\\mathrm L\\)</span> is not one-to-one. So the answer is <mark><strong>E</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-3-10-points\">Problem 3 (10 points)</h3>\n<p>Which of the following statements is/are always TRUE?</p>\n<ol type=\"i\">\n<li><p>If <span class=\"math inline\">\\(A\\)</span> is a singular <span class=\"math inline\">\\(8\\times 8\\)</span> matrix, then its last column must be a linear combination of the first seven columns.</p></li>\n<li><p>Let <span class=\"math inline\">\\(A\\)</span> be a <span class=\"math inline\">\\(5\\times 7\\)</span> matrix such that <span class=\"math inline\">\\(A\\cdot\\pmb x=\\pmb b\\)</span> is consistent for any <span class=\"math inline\">\\(\\pmb{b}∈\\mathbb{R}^5\\)</span>, and let <span class=\"math inline\">\\(B\\)</span> be a <span class=\"math inline\">\\(7\\times 11\\)</span> matrix such that <span class=\"math inline\">\\(B\\cdot\\pmb x=\\pmb c\\)</span> is consistent for any <span class=\"math inline\">\\(\\pmb{c}∈\\mathbb{R}^7\\)</span>. Then, the matrix equation <span class=\"math inline\">\\(AB\\cdot \\pmb x=\\pmb b\\)</span> is consistent for any <span class=\"math inline\">\\(\\pmb{b}∈\\mathbb{R}^5\\)</span>.</p></li>\n<li><p>For any <span class=\"math inline\">\\(m\\times n\\)</span> matrix <span class=\"math inline\">\\(A\\)</span>, the dimension of the null space of <span class=\"math inline\">\\(A\\)</span> equals the dimension of the null space of its transpose <span class=\"math inline\">\\(A^T\\)</span>.</p></li>\n<li><p>If <span class=\"math inline\">\\(A\\)</span> is an <span class=\"math inline\">\\(m\\times n\\)</span> matrix, then the set <span class=\"math inline\">\\({A\\cdot\\pmb x|\\pmb x∈\\mathbb{R}^n}\\)</span> is a subspace of <span class=\"math inline\">\\(\\mathbb{R}^m\\)</span>.</p></li>\n</ol>\n<ul>\n<li>A. (i) only</li>\n<li>B. (i) and (ii) only</li>\n<li>C. (iv) only</li>\n<li>D. (ii) and (iv) only</li>\n<li>E. (iii) and (iv) only</li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 3 Solution</p>\n</summary>\n<p>For (i), a singular matrix <span class=\"math inline\">\\(A\\)</span> is noninvertible and has <span class=\"math inline\">\\(det(A)=0\\)</span>. By Theorem 8 of Section 2.3, the columns of <span class=\"math inline\">\\(A\\)</span> form a linearly dependent set. Denote <span class=\"math inline\">\\(A=[\\pmb{v}_1\\cdots\\pmb{v}_8]\\)</span>, then there exist weights <span class=\"math inline\">\\(c_1, c_2,\\cdots,c_8\\)</span>, not all zero, such that <span class=\"math display\">\\[c_1\\pmb{v}_1+c_2\\pmb{v}_2+\\cdots+c_8\\pmb{v}_8=\\pmb{0}\\]</span> Does this imply that statement (i) is true? No! If <span class=\"math inline\">\\(c_8\\)</span> is 0, <span class=\"math inline\">\\(\\pmb{v}_8\\)</span> is NOT a linear combination of the columns <span class=\"math inline\">\\(\\pmb{v}_1\\)</span> to <span class=\"math inline\">\\(\\pmb{v}_7\\)</span>.</p>\n<p>For (ii), since <span class=\"math inline\">\\(AB\\cdot\\pmb x=A(B\\pmb{x})=A\\pmb c=\\pmb b\\)</span>. the consistency holds for the new <span class=\"math inline\">\\(5\\times 11\\)</span> matrix <span class=\"math inline\">\\(AB\\)</span> as well. It is true.</p>\n<p>For (iii), since <span class=\"math inline\">\\(A\\)</span> is a <span class=\"math inline\">\\(m\\times n\\)</span> matrix, <span class=\"math inline\">\\(A^T\\)</span> is a <span class=\"math inline\">\\(n\\times m\\)</span> matrix. From Section 2.9 Dimension and Rank, we know that \"If a matrix <span class=\"math inline\">\\(A\\)</span> has <span class=\"math inline\">\\(n\\)</span> columns, then <span class=\"math inline\">\\(\\mathrm rank\\,A+\\mathrm{dim\\,Nul}\\,A= n\\)</span>.\" From this, we can list <span class=\"math display\">\\[\\begin{align}\n\\mathrm{dim\\,Nul}\\,A&amp;=n-rank\\,A\\\\\n\\mathrm{dim\\,Nul}\\,A^T&amp;=m-rank\\,A^T\n\\end{align}\\]</span> As these two dimension numbers are not necessarily the same, (iii) is not true.</p>\n<p>For (iv), we can first review the definition of subspace. From Section 2.8 Subspaces of <span class=\"math inline\">\\(\\mathbb R^n\\)</span>,</p>\n<blockquote>\n<p>A subspace of <span class=\"math inline\">\\(\\mathbb R^n\\)</span> is any set <span class=\"math inline\">\\(H\\)</span> in <span class=\"math inline\">\\(\\mathbb R^n\\)</span> that has three properties:<br />\na. The zero vector is in <span class=\"math inline\">\\(H\\)</span>.<br />\nb. For each <span class=\"math inline\">\\(\\pmb u\\)</span> and <span class=\"math inline\">\\(\\pmb v\\)</span> in <span class=\"math inline\">\\(H\\)</span>, the sum <span class=\"math inline\">\\(\\pmb u+\\pmb v\\)</span> is in <span class=\"math inline\">\\(H\\)</span>.<br />\nc. For each <span class=\"math inline\">\\(\\pmb u\\)</span> in <span class=\"math inline\">\\(H\\)</span> and each scalar <span class=\"math inline\">\\(c\\)</span>, the vector <span class=\"math inline\">\\(c\\pmb u\\)</span> is in H.</p>\n</blockquote>\n<p>Denote <span class=\"math inline\">\\(\\pmb u=A\\pmb x\\)</span>, <span class=\"math inline\">\\(\\pmb v=A\\pmb y\\)</span>, we have <span class=\"math display\">\\[\\begin{align}\nA\\cdot\\pmb{0}&amp;=\\pmb{0}\\\\\n\\pmb u+\\pmb v&amp;=A\\pmb{x}+A\\pmb{y}=A(\\pmb{x}+\\pmb{y})\\\\\nc\\pmb u&amp;=cA\\pmb{x}=A(c\\pmb x)\n\\end{align}\\]</span> All the results on the right side are in the set as well. This proves that (iv) is true.</p>\n<p>As both (ii) and (iv) are true, the answer is <mark><strong>D</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-4-10-points\">Problem 4 (10 points)</h3>\n<p>Compute the determinant of the given matrix <span class=\"math inline\">\\(\\begin{bmatrix}5 &amp;7 &amp;2 &amp;2\\\\0 &amp;3 &amp;0 &amp;-4\\\\-5 &amp;-8 &amp;0 &amp;3\\\\0 &amp;5 &amp;0 &amp;-6\\\\\\end{bmatrix}\\)</span></p>\n<ul>\n<li>A. <span class=\"math inline\">\\(-20\\)</span></li>\n<li>B. <span class=\"math inline\">\\(20\\)</span></li>\n<li>C. <span class=\"math inline\">\\(18\\)</span></li>\n<li>D. <span class=\"math inline\">\\(2\\)</span></li>\n<li>E. <span class=\"math inline\">\\(0\\)</span></li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 4 Solution</p>\n</summary>\n<p>Notice that the third column of the given matrix has all entries equal to zero except <span class=\"math inline\">\\(a_{13}\\)</span>. Taking advantage of this, we can do a cofactor expansion down the third column, then continue to do cofactor expansion with the <span class=\"math inline\">\\(3\\times3\\)</span> submatrix <span class=\"math display\">\\[\\begin{align}\n\\begin{vmatrix}5 &amp;7 &amp;\\color{fuchsia}2 &amp;2\\\\0 &amp;3 &amp;0 &amp;-4\\\\-5 &amp;-8 &amp;0 &amp;3\\\\0 &amp;5 &amp;0 &amp;-6\\\\\\end{vmatrix}&amp;=(-1)^{1+3}\\cdot{\\color{fuchsia}2}\\cdot\\begin{vmatrix}0 &amp;3 &amp;-4\\\\\\color{blue}{-5} &amp;-8 &amp;3\\\\0 &amp;5 &amp;-6\\\\\\end{vmatrix}\\\\\n&amp;=2\\cdot(-1)^{2+1}\\cdot({\\color{blue}{-5}})\\begin{vmatrix}3 &amp;-4\\\\5 &amp;-6\\\\\\end{vmatrix}=20\n\\end{align}\\]</span> So the answer is <mark><strong>B</strong></mark>.</p>\n<p><strong>📝Notes:</strong>This problem is directly taken from the textbook. It is the Practice Problem of Section 3.1 Introduction to Determinants.</p>\n\n</details>\n<h3 id=\"problem-5-10-points\">Problem 5 (10 points)</h3>\n<p>Which of the following statements is always TRUE</p>\n<p>A. If <span class=\"math inline\">\\(A\\)</span> is an <span class=\"math inline\">\\(n\\times n\\)</span> matrix with all entries being positive, then <span class=\"math inline\">\\(\\det(A)&gt;0\\)</span>.</p>\n<p>B. If <span class=\"math inline\">\\(A\\)</span> and <span class=\"math inline\">\\(B\\)</span> are two <span class=\"math inline\">\\(n\\times n\\)</span> matrices with <span class=\"math inline\">\\(\\det(A)&gt;0\\)</span> and <span class=\"math inline\">\\(\\det(B)&gt;0\\)</span>, then also <span class=\"math inline\">\\(\\det(A+B)&gt;0\\)</span>.</p>\n<p>C. If <span class=\"math inline\">\\(A\\)</span> and <span class=\"math inline\">\\(B\\)</span> are two <span class=\"math inline\">\\(n\\times n\\)</span> matrices such that <span class=\"math inline\">\\(AB=0\\)</span>, then both <span class=\"math inline\">\\(A\\)</span> and <span class=\"math inline\">\\(B\\)</span> are singular.</p>\n<p>D. If rows of an <span class=\"math inline\">\\(n\\times n\\)</span> matrix <span class=\"math inline\">\\(A\\)</span> are linearly independent, then <span class=\"math inline\">\\(\\det(A^{T}A)&gt;0\\)</span>.</p>\n<p>E. If <span class=\"math inline\">\\(A\\)</span> is an <span class=\"math inline\">\\(n\\times n\\)</span> matrix with <span class=\"math inline\">\\(A^2=I_n\\)</span>, then <span class=\"math inline\">\\(\\det(A)=1\\)</span>.</p>\n<details class=\"note success no-icon\"><summary><p>Problem 5 Solution</p>\n</summary>\n<p>Let's analyze the statements one by one.</p>\n<ul>\n<li><p>A is false. It is trivial to find a <span class=\"math inline\">\\(2\\times 2\\)</span> example to disprove it, such as <span class=\"math display\">\\[\\begin{vmatrix}1 &amp;2\\\\3 &amp;4\\\\\\end{vmatrix}=1\\times 4-2\\times 3=-2\\]</span></p></li>\n<li><p>For B, as stated in Section 3 Properties of Determinants \"<span class=\"math inline\">\\(\\det(A+B)\\)</span> is <em>not</em> equal to <span class=\"math inline\">\\(\\det(A)+\\det(B)\\)</span>, in general\", this statement is not necessarily true. On the contrary, we can have a simple case like <span class=\"math inline\">\\(A=\\begin{bmatrix}1 &amp;0\\\\0 &amp;1\\\\\\end{bmatrix}\\)</span> and <span class=\"math inline\">\\(B=\\begin{bmatrix}-1 &amp;0\\\\0 &amp;-1\\\\\\end{bmatrix}\\)</span>, then <span class=\"math inline\">\\(\\det(A+B)=0\\)</span>.</p></li>\n<li><p>C is also false since B could be a zero matrix. If that is the case, A is not necessarily singular.</p></li>\n<li><p>For D, first with the linearly independent property, we can see <span class=\"math inline\">\\(\\det(A)\\neq 0\\)</span>. Secondary, the multiplicative property gives <span class=\"math inline\">\\(\\det(A^{T}A)=\\det(A^{T})\\det(A)=(\\det(A))^2\\)</span>. So it is true that <span class=\"math inline\">\\(\\det(A^{T}A) &gt; 0\\)</span>.</p></li>\n<li><p>For E, from <span class=\"math inline\">\\(A^2=I_n\\)</span>, we can deduce <span class=\"math inline\">\\(\\det(A^{2})=(\\det(A))^2=1\\)</span>, so <span class=\"math inline\">\\(\\det(A)=\\pm 1\\)</span>. For example, if <span class=\"math inline\">\\(A=\\begin{bmatrix}1 &amp;0\\\\0 &amp;-1\\\\\\end{bmatrix}\\)</span>, then <span class=\"math inline\">\\(\\det(A)=-1\\)</span>. This statement is false.</p></li>\n</ul>\n<p>So we conclude that the answer is <mark><strong>D</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-6-10-points\">Problem 6 (10 points)</h3>\n<p>Let <span class=\"math inline\">\\(A=\\begin{bmatrix}1 &amp;2 &amp;6\\\\2 &amp;6 &amp;3\\\\3 &amp;8 &amp;10\\\\\\end{bmatrix}\\)</span> and let its inverse <span class=\"math inline\">\\(A^{-1}=[b_{ij}]\\)</span>. Find <span class=\"math inline\">\\(b_{12}\\)</span></p>\n<ul>\n<li>A. <span class=\"math inline\">\\(14\\)</span></li>\n<li>B. <span class=\"math inline\">\\(-14\\)</span></li>\n<li>C. <span class=\"math inline\">\\(1\\)</span></li>\n<li>D. <span class=\"math inline\">\\(-1\\)</span></li>\n<li>E. <span class=\"math inline\">\\(6\\)</span></li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 6 Solution</p>\n</summary>\n<p>According to Theorem 8 of Section 3.3, <span class=\"math inline\">\\(A^{-1}=\\frac{\\large{1}}{\\large{\\mathrm{det}\\,A}}\\mathrm{adj}\\,A\\)</span>. Here the adjugate matrix <span class=\"math inline\">\\(\\mathrm{adj}\\, A\\)</span> is the transpose of the matrix of cofactors. Hence <span class=\"math display\">\\[b_{12}=\\frac{C_{21}}{\\mathrm{det}\\,A}\\]</span></p>\n<p>First computer the cofactor <span class=\"math display\">\\[C_{21}=(-1)^{2+1}\\begin{vmatrix}2 &amp;6\\\\8 &amp;10\\end{vmatrix}=(-1)\\cdot(20-48)=28\\]</span> Now computer the determinant efficiently with row operations (Theorem 3 of Section 3.2) for <span class=\"math inline\">\\(A\\)</span> <span class=\"math display\">\\[\n{\\mathrm{det}\\,A}=\n\\begin{vmatrix}1 &amp;2 &amp;6\\\\2 &amp;6 &amp;3\\\\3 &amp;8 &amp;10\\\\\\end{vmatrix}=\n\\begin{vmatrix}1 &amp;2 &amp;6\\\\0 &amp;2 &amp;-9\\\\0 &amp;2 &amp;-8\\\\\\end{vmatrix}=\n\\begin{vmatrix}\\color{blue}1 &amp;2 &amp;6\\\\0 &amp;\\color{blue}2 &amp;-9\\\\0 &amp;0 &amp;\\color{blue}1\\\\\\end{vmatrix}=\\color{blue}1\\cdot\\color{blue}2\\cdot\\color{blue}1=2\n\\]</span> So <span class=\"math inline\">\\(C_{21}=28/2=14\\)</span>, the answer is <mark><strong>A</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-7-10-points\">Problem 7 (10 points)</h3>\n<p>Let <span class=\"math inline\">\\(\\pmb{v_1}=\\begin{bmatrix}1\\\\2\\\\5\\\\\\end{bmatrix}\\)</span>, <span class=\"math inline\">\\(\\pmb{v_2}=\\begin{bmatrix}-2\\\\-3\\\\1\\\\\\end{bmatrix}\\)</span> and <span class=\"math inline\">\\(\\pmb{x}=\\begin{bmatrix}-4\\\\-5\\\\13\\\\\\end{bmatrix}\\)</span>, and <span class=\"math inline\">\\(\\pmb{B}=\\{\\pmb{v_1},\\pmb{v_2}\\}\\)</span>. Then <span class=\"math inline\">\\(\\pmb B\\)</span> is a basis for <span class=\"math inline\">\\(H=\\mathrm{span}\\{\\mathbf{v_1,v_2}\\}\\)</span>. Determine if <span class=\"math inline\">\\(\\pmb x\\)</span> is in <span class=\"math inline\">\\(H\\)</span>, and if it is, find the coordinate vector of <span class=\"math inline\">\\(\\pmb x\\)</span> relative to B.</p>\n<ul>\n<li>A. <span class=\"math inline\">\\([\\pmb x]_B=\\begin{bmatrix}1\\\\2\\\\\\end{bmatrix}\\)</span></li>\n<li>B. <span class=\"math inline\">\\([\\pmb x]_B=\\begin{bmatrix}2\\\\1\\\\\\end{bmatrix}\\)</span></li>\n<li>C. <span class=\"math inline\">\\([\\pmb x]_B=\\begin{bmatrix}2\\\\2\\\\\\end{bmatrix}\\)</span></li>\n<li>D. <span class=\"math inline\">\\([\\pmb x]_B=\\begin{bmatrix}3\\\\2\\\\\\end{bmatrix}\\)</span></li>\n<li>E. <span class=\"math inline\">\\([\\pmb x]_B=\\begin{bmatrix}2\\\\3\\\\\\end{bmatrix}\\)</span></li>\n</ul>\n<details class=\"note success no-icon\"><summary><p>Problem 7 Solution</p>\n</summary>\n<p>By definition in Section 1.3, <span class=\"math inline\">\\(\\mathrm{Span}\\{\\pmb{v_1,v_2}\\}\\)</span> is the collection of all vectors that can be written in the form <span class=\"math inline\">\\(c_1\\mathbf{v_1}+c_2\\mathbf{v_2}\\)</span> with <span class=\"math inline\">\\(c_1,c_2\\)</span> scalars. So asking whether a vector <span class=\"math inline\">\\(\\pmb x\\)</span> is in <span class=\"math inline\">\\(\\mathrm{Span}\\{\\pmb{v_1,v_2}\\}\\)</span> amounts to asking whether the vector equation <span class=\"math display\">\\[c_1\\pmb{v_1}+c_2\\pmb{v_2}=\\pmb{x}\\]</span> has a solution. To answer this, row reduce the <strong>augmented matrix</strong> <span class=\"math inline\">\\([\\pmb{v_1}\\,\\pmb{v_2}\\,\\pmb{x}]\\)</span>: <span class=\"math display\">\\[\n\\begin{bmatrix}1 &amp;-2 &amp;-4\\\\2 &amp;-3 &amp;-5\\\\5 &amp;1 &amp;13\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;-2 &amp;-4\\\\0 &amp;1 &amp;3\\\\0 &amp;11 &amp;33\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;-2 &amp;-4\\\\0 &amp;1 &amp;3\\\\0 &amp;0 &amp;0\\\\\\end{bmatrix}\\sim\n\\]</span> We have a unique solution <span class=\"math inline\">\\(c_1=2\\)</span>, <span class=\"math inline\">\\(c_2=3\\)</span>. So the answer is <mark><strong>E</strong></mark>.</p>\n<p><strong>📝Notes:</strong>This problem is similar to Example 6 of Section 1.3 Vector Equations.</p>\n\n</details>\n<h3 id=\"problem-8-10-points\">Problem 8 (10 points)</h3>\n<p>Let <span class=\"math inline\">\\(T: \\mathbb R^2\\to\\mathbb R^3\\)</span> be the linear tranformation for which <span class=\"math display\">\\[\nT\\left(\\begin{bmatrix}1\\\\1\\\\\\end{bmatrix}\\right)=\n\\begin{bmatrix}3\\\\2\\\\1\\\\\\end{bmatrix}\\quad \\mathrm{and}\\quad\nT\\left(\\begin{bmatrix}1\\\\2\\\\\\end{bmatrix}\\right)=\n\\begin{bmatrix}1\\\\0\\\\2\\\\\\end{bmatrix}.\n\\]</span> (4 points)(1) Let <span class=\"math inline\">\\(A\\)</span> be the standard matrix of <span class=\"math inline\">\\(T\\)</span>, find <span class=\"math inline\">\\(A\\)</span>.</p>\n<p>(2 points)(2) Find the image of the vector <span class=\"math inline\">\\(\\pmb u=\\begin{bmatrix}1\\\\3\\\\\\end{bmatrix}\\)</span>.</p>\n<p>(4 points)(3) Is the vector <span class=\"math inline\">\\(\\pmb b=\\begin{bmatrix}0\\\\-2\\\\5\\\\\\end{bmatrix}\\)</span> in the range of <span class=\"math inline\">\\(T\\)</span>? If so, find all the vectors <span class=\"math inline\">\\(\\pmb x\\)</span> in <span class=\"math inline\">\\(\\mathbb R^2\\)</span> such that <span class=\"math inline\">\\(T(\\pmb x)=\\pmb b\\)</span></p>\n<details class=\"note success no-icon\"><summary><p>Problem 8 Solution</p>\n</summary>\n<ol type=\"1\">\n<li><p>Referring to Theorem 10 of Section 1.9 The Matrix of a Linear Transformation, we know that <span class=\"math display\">\\[A=[T(\\pmb{e}_1)\\quad\\dots\\quad T(\\pmb{e}_n)]\\]</span> So if we can find <span class=\"math inline\">\\(T(\\pmb{e}_1)\\)</span> and <span class=\"math inline\">\\(T(\\pmb{e}_2)\\)</span>, we obtain <span class=\"math inline\">\\(A\\)</span>. Remember the property <span class=\"math display\">\\[T(c\\pmb u+d\\pmb v)=cT(\\pmb u)+dT(\\pmb v)\\]</span></p>\n<p>We can use this property to find <span class=\"math inline\">\\(A\\)</span>. First, it is trivial to see that <span class=\"math display\">\\[\\begin{align}\n \\pmb{e}_1&amp;=\\begin{bmatrix}1\\\\0\\end{bmatrix}\n         =2\\begin{bmatrix}1\\\\1\\end{bmatrix}-\\begin{bmatrix}1\\\\2\\end{bmatrix}\\\\\n \\pmb{e}_2&amp;=\\begin{bmatrix}0\\\\1\\end{bmatrix}\n         =-\\begin{bmatrix}1\\\\1\\end{bmatrix}+\\begin{bmatrix}1\\\\2\\end{bmatrix}\n \\end{align}\\]</span> Then apply the property and compute <span class=\"math display\">\\[\\begin{align}\n T(\\pmb{e}_1)&amp;=2T\\left(\\begin{bmatrix}1\\\\1\\end{bmatrix}\\right)-T\\left(\\begin{bmatrix}1\\\\2\\end{bmatrix}\\right)=\\begin{bmatrix}5\\\\4\\\\0\\end{bmatrix}\\\\\n T(\\pmb{e}_2)&amp;=-T\\left(\\begin{bmatrix}1\\\\1\\end{bmatrix}\\right)+T\\left(\\begin{bmatrix}1\\\\2\\end{bmatrix}\\right)=\\begin{bmatrix}-2\\\\-2\\\\1\\end{bmatrix}\n \\end{align}\\]</span> So <span class=\"math inline\">\\(A\\)</span> is <span class=\"math inline\">\\(\\begin{bmatrix}5 &amp;-2\\\\4 &amp;-2\\\\0 &amp;1\\end{bmatrix}\\)</span>.</p></li>\n<li><p>The image of the vector <span class=\"math inline\">\\(\\pmb u\\)</span> can be obtained by <span class=\"math inline\">\\(A\\pmb u\\)</span>, the result is <span class=\"math display\">\\[A\\pmb u=\\begin{bmatrix}5 &amp;-2\\\\4 &amp;-2\\\\0 &amp;1\\end{bmatrix}\\begin{bmatrix}1\\\\3\\\\\\end{bmatrix}=\\begin{bmatrix}-1\\\\-2\\\\3\\\\\\end{bmatrix}\\]</span></p></li>\n<li><p>This is the case of <span class=\"math inline\">\\(A\\pmb x=\\pmb b\\)</span> and we need to solve it. The augmented matrix here is <span class=\"math display\">\\[\\begin{bmatrix}5 &amp;-2 &amp;0\\\\4 &amp;-2 &amp;-2\\\\0 &amp;1 &amp;5\\end{bmatrix}\\]</span> This has unique solution <span class=\"math inline\">\\(\\begin{bmatrix}2\\\\5\\\\\\end{bmatrix}\\)</span>. So the vector <span class=\"math inline\">\\(\\pmb b\\)</span> is in the span of <span class=\"math inline\">\\(T\\)</span>.</p></li>\n</ol>\n\n</details>\n<h3 id=\"problem-9-10-points\">Problem 9 (10 points)</h3>\n<p>Consider the linear system <span class=\"math display\">\\[\n\\begin{align}\nx + 2y +3z &amp;= 2\\\\\ny+az &amp;= -4\\\\\n2x+5y+a^{2}z &amp;= a-3\n\\end{align}\n\\]</span> (4 points)(1) Find a row echelon form for the augmented matrix of the system.</p>\n<p>(2 points)(2) For which value(s) of <span class=\"math inline\">\\(a\\)</span> does this system have a infinite number of solutions?</p>\n<p>(2 points)(3) For which value(s) of <span class=\"math inline\">\\(a\\)</span> does this system have no solution?</p>\n<p>(2 points)(4) For which value(s) of <span class=\"math inline\">\\(a\\)</span> does this system have a unique solution?</p>\n<details class=\"note success no-icon\"><summary><p>Problem 9 Solution</p>\n</summary>\n<ol type=\"1\">\n<li><p>The augmented matrix and the row reduction results can be seen below <span class=\"math display\">\\[\n\\begin{bmatrix}1 &amp;2 &amp;3 &amp;2\\\\0 &amp;1 &amp;a &amp;-4\\\\2 &amp;5 &amp;a^2 &amp;a-3\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;2 &amp;3 &amp;2\\\\0 &amp;1 &amp;a &amp;-4\\\\0 &amp;1 &amp;a^2-6 &amp;a-7\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;2 &amp;3 &amp;2\\\\0 &amp;1 &amp;a &amp;-4\\\\0 &amp;0 &amp;a^2-a-6 &amp;a-3\\\\\\end{bmatrix}\n\\]</span> The pivots are <span class=\"math inline\">\\(1\\)</span>, <span class=\"math inline\">\\(1\\)</span>, and <span class=\"math inline\">\\(a2-a-6\\)</span>.</p></li>\n<li><p>Look at the last row of the row echelon form, we can write it as <span class=\"math inline\">\\((a-3)(a+2)z=(a-3)\\)</span>. Obviously if <span class=\"math inline\">\\(a=3\\)</span>, <span class=\"math inline\">\\(z\\)</span> can be any number. So this system has an infinite number of solutions when <span class=\"math inline\">\\(a=3\\)</span>.</p></li>\n<li><p>If <span class=\"math inline\">\\(a=-2\\)</span>, the equation becomes <span class=\"math inline\">\\(0\\cdot z=-5\\)</span>. This is impossible. So the system is inconsistent and has no solution when <span class=\"math inline\">\\(a=-2\\)</span>.</p></li>\n<li><p>If <span class=\"math inline\">\\(a\\neq -2\\)</span> and <span class=\"math inline\">\\(a\\neq 3\\)</span>，<span class=\"math inline\">\\(z=\\frac 1 {a+2}\\)</span>, we can deduce unique solution for this system</p></li>\n</ol>\n\n</details>\n<h3 id=\"problem-10-10-points\">Problem 10 (10 points)</h3>\n<p>Let <span class=\"math display\">\\[\nA=\\begin{bmatrix}1 &amp;2 &amp;0 &amp;-1 &amp;2\\\\2 &amp;3 &amp;1 &amp;-3 &amp;7\\\\3 &amp;4 &amp;1 &amp;-3 &amp;9\\\\\\end{bmatrix}\n\\]</span></p>\n<p>(5 points)(1) Find the REDUCED row echelon form for the matrix <span class=\"math inline\">\\(A\\)</span>.</p>\n<p>(5 points)(2) Find a basis for the null space of <span class=\"math inline\">\\(A\\)</span></p>\n<details class=\"note success no-icon\"><summary><p>Problem 10 Solution</p>\n</summary>\n<ol type=\"1\">\n<li><p>The row reduction is completed next. The symbol ~ before a matrix indicates that the matrix is row equivalent to the preceding matrix. <span class=\"math display\">\\[\n\\begin{bmatrix}1 &amp;2 &amp;0 &amp;-1 &amp;2\\\\2 &amp;3 &amp;1 &amp;-3 &amp;7\\\\3 &amp;4 &amp;1 &amp;-3 &amp;9\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;2 &amp;0 &amp;-1 &amp;2\\\\0 &amp;-1 &amp;1 &amp;-1 &amp;3\\\\0 &amp;-2 &amp;1 &amp;0 &amp;3\\\\\\end{bmatrix}\\sim\\begin{bmatrix}1 &amp;2 &amp;0 &amp;-1 &amp;2\\\\0 &amp;1 &amp;-1 &amp;1 &amp;-3\\\\0 &amp;0 &amp;1 &amp;-2 &amp;3\\\\\\end{bmatrix}\n\\]</span> <span class=\"math display\">\\[\\sim\n\\begin{bmatrix}1 &amp;2 &amp;0 &amp;-1 &amp;2\\\\0 &amp;1 &amp;0 &amp;-1 &amp;0\\\\0 &amp;0 &amp;1 &amp;-2 &amp;3\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;0 &amp;1 &amp;2\\\\0 &amp;1 &amp;0 &amp;-1 &amp;0\\\\0 &amp;0 &amp;1 &amp;-2 &amp;3\\\\\\end{bmatrix}\n\\]</span></p></li>\n<li><p>Referring to Section 2.8 Subspaces of <span class=\"math inline\">\\(\\mathbb R^n\\)</span>, by definition the null space of a matrix <span class=\"math inline\">\\(A\\)</span> is the set Nul <span class=\"math inline\">\\(A\\)</span> of all solutions of the homogeneous equation <span class=\"math inline\">\\(A\\pmb{x}=\\pmb{0}\\)</span>. Also \"A basis for a subspace <span class=\"math inline\">\\(H\\)</span> of <span class=\"math inline\">\\(\\mathbb R^n\\)</span> is a linearly independent set in <span class=\"math inline\">\\(H\\)</span> that spans <span class=\"math inline\">\\(H\\)</span>\".</p>\n<p>Now write the solution of <span class=\"math inline\">\\(A\\mathrm x=\\pmb 0\\)</span> in parametric vector form <span class=\"math display\">\\[[A\\;\\pmb 0]\\sim\\begin{bmatrix}1 &amp;0 &amp;0 &amp;1 &amp;2 &amp;0\\\\0 &amp;1 &amp;0 &amp;-1 &amp;0 &amp;0\\\\0 &amp;0 &amp;1 &amp;-2 &amp;3 &amp;0\\\\\\end{bmatrix}\\]</span></p>\n<p>The general solution is <span class=\"math inline\">\\(x_1=-x_4-2x_5\\)</span>, <span class=\"math inline\">\\(x_2=x_4\\)</span>, <span class=\"math inline\">\\(x_3=2x_4-3x_5\\)</span>, with <span class=\"math inline\">\\(x_4\\)</span> and <span class=\"math inline\">\\(x_5\\)</span> free. This can be written as <span class=\"math display\">\\[\n \\begin{bmatrix}x_1\\\\x_2\\\\x_3\\\\x_4\\\\x_5\\end{bmatrix}=\n \\begin{bmatrix}-x_4-2x_5\\\\x_4\\\\2x_4-3x_5\\\\x_4\\\\x_5\\end{bmatrix}=\n x_4\\begin{bmatrix}-1\\\\1\\\\2\\\\1\\\\0\\end{bmatrix}+\n x_5\\begin{bmatrix}-2\\\\0\\\\-3\\\\0\\\\1\\end{bmatrix}\n \\]</span> So the basis for Nul <span class=\"math inline\">\\(A\\)</span> is <span class=\"math display\">\\[\n \\begin{Bmatrix}\\begin{bmatrix}-1\\\\1\\\\2\\\\1\\\\0\\end{bmatrix},\n \\begin{bmatrix}-2\\\\0\\\\-3\\\\0\\\\1\\end{bmatrix}\\end{Bmatrix}\n \\]</span></p></li>\n</ol>\n<p><strong>📝Notes:</strong>This problem is similar to Example 6 of Section 2.8 Subspaces of <span class=\"math inline\">\\(\\mathbb R^n\\)</span>. Read the solution for that example to get a deep understanding of this problem. Also pay attention to Example 7, Example 8, Theorem 13, and the Warning below this theorem in the same section.</p>\n<blockquote>\n<p><em><strong>Warning:</strong></em> Be careful to use <strong>pivot columns of <span class=\"math inline\">\\(A\\)</span> itself</strong> for the basis of Col <span class=\"math inline\">\\(A\\)</span>. The columns of an echelon form <span class=\"math inline\">\\(B\\)</span> are often not in the column space of <span class=\"math inline\">\\(A\\)</span>.</p>\n</blockquote>\n\n</details>\n<h2 id=\"summary\">Summary</h2>\n<p>This test set focuses on the following points of linear algebra：</p>\n<ul>\n<li>Systems of linear equations\n<ul>\n<li>Elementary row operations, system consistency</li>\n<li>Row echelon form, and reduced row echelon form</li>\n</ul></li>\n<li>Column vector, linear combinations of vectors, and span</li>\n<li>Matrix equation, solution existence, linear independence</li>\n<li>Linear transformation\n<ul>\n<li>Image, range, identity matrix, standard matrix</li>\n<li>Onto and one-to-one mappings</li>\n</ul></li>\n<li>Matrix operations, the inverse of a matrix</li>\n<li>Subspace and basis, null space, dimension, and rank</li>\n<li>Determinant, Cramer's rule, adjugate matrix, and inverse formula</li>\n</ul>\n<p>As can be seen, it has a very decent coverage of the basic ideas of linear algebra. So this set of exam problems provides a good test of students' knowledge of linear algebra.</p>\n<p>One thing I would like to highlight for preparing for the first exam of linear algebra is to have a complete understanding of two aspects of matrix equations. It is like two profiles of one object. As can be seen in the following snapshot taken from the textbook, a matrix equation can represent a linear combination of its column vectors. From a different viewpoint, it is used to describe the transformation that maps a vector in one space to a new vector in the other space.</p>\n<p><img src=\"Linear-Transformation.png\" style=\"width:70.0%;height:70.0%\" /></p>\n","categories":["Study Notes"],"tags":["Linear Algebra","Machine Learning"]},{"title":"Purdue MA 26500 Fall 2022 Midterm II Solutions","url":"/en/2024/02/10/Purdue-MA265-2022-Fall-Midterm2/","content":"<p>Here comes the solution and analysis for Purdue MA 26500 Fall 2022 Midterm II. This second midterm covers topics in Chapter 4 (Vector Spaces) and Chapter 5 (Eigenvalues and Eigenvectors) of the textbook. <span id=\"more\"></span></p>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Purdue Department of Mathematics provides a linear algebra course MA 26500 every semester, which is mandatory for undergraduate students of almost all science and engineering majors.</p>\n<h3 id=\"textbook-and-study-guide\">Textbook and Study Guide</h3>\n<blockquote>\n<p><strong><em>Disclosure</em></strong>: <em>This blog site is reader-supported. When you buy through the affiliate links below, as an Amazon Associate, I earn a tiny commission from qualifying purchases. Thank you.</em></p>\n</blockquote>\n<p>MA 26500 textbook is <a href=\"https://amzn.to/3Srz7qm\"><em>Linear Algebra and its Applications</em></a> (6th Edition) by David C. Lay, Steven R. Lay, and Judi J. McDonald. The authors have also published a <a href=\"https://amzn.to/428m5Bl\"><em>student study guide</em></a> for it, which is available for purchase on Amazon as well.</p>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><a href=\"https://amzn.to/3Srz7qm\"><img src=\"https://www.packetmania.net/en/2024/01/19/Purdue-MA265-2022-Fall-Midterm1/Linear-Algebra-and-Its-Applications-6e.jpg\" /></a></div><div class=\"group-picture-column\"><a href=\"https://amzn.to/428m5Bl\"><img src=\"https://www.packetmania.net/en/2024/01/19/Purdue-MA265-2022-Fall-Midterm1/Linear-Algebra-and-Its-Appl-6th-study-guide.jpg\" /></a></div></div></div>\n<h3 id=\"exam-information\">Exam Information</h3>\n<p>MA 26500 midterm II covers the topics of Sections 4.1 – 5.7 in the textbook. It is usually scheduled at the beginning of the thirteenth week. The exam format is a combination of multiple-choice questions and short-answer questions. Students are given one hour to finish answering the exam questions.</p>\n<p>Based on the knowledge of linear equations and matrix algebra learned in the book chapters 1 and 2, Chapter 4 leads the student to a deep dive into the vector space framework. Chapter 5 introduces the important concepts of eigenvectors and eigenvalues. They are useful throughout pure and applied mathematics. Eigenvalues are also used to study differential equations and continuous dynamical systems, they provide critical information in engineering design,</p>\n<h3 id=\"reference-links\">Reference Links</h3>\n<ul>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/semester/semesters\">Purdue Department of Mathematics Course Achive</a></li>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/semester/202420/ma26500/index.html\">Purdue MA 26500 Spring 2024</a></li>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/oldexams.php?course=MA26500\">Purdue MA 26500 Exam Archive</a></li>\n</ul>\n<h2 id=\"fall-2022-midterm-ii-solutions\">Fall 2022 Midterm II Solutions</h2>\n<h3 id=\"problem-1-10-points\">Problem 1 (10 points)</h3>\n<p>Let <span class=\"math display\">\\[A=\\begin{bmatrix}1 &amp;0 &amp;2 &amp;0 &amp;-1\\\\1 &amp;2 &amp;4 &amp;-2 &amp;-1\\\\2 &amp;3 &amp;7 &amp;-3 &amp;-2\\end{bmatrix}\\]</span> Let <span class=\"math inline\">\\(a\\)</span> be the rank of <span class=\"math inline\">\\(A\\)</span> and <span class=\"math inline\">\\(b\\)</span> be the nullity of <span class=\"math inline\">\\(A\\)</span>, find <span class=\"math inline\">\\(5b-3a\\)</span></p>\n<ul>\n<li>A. 25</li>\n<li>B. 17</li>\n<li>C. 9</li>\n<li>D. 1</li>\n<li>E. 0</li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 1 Solution</p>\n</summary>\n<p>Do row reduction as follows:</p>\n<ol type=\"1\">\n<li>Add <span class=\"math inline\">\\(-1\\)</span> times row 1 to row 2</li>\n<li>Add <span class=\"math inline\">\\(-2\\)</span> times row 1 to row 2</li>\n<li>Scale row 2 by <span class=\"math inline\">\\(\\frac{1}{2}\\)</span></li>\n<li>Add <span class=\"math inline\">\\(-3\\)</span> times row 2 to row 3</li>\n</ol>\n<p><span class=\"math display\">\\[\n\\begin{bmatrix}1 &amp;0 &amp;2 &amp;0 &amp;-1\\\\1 &amp;2 &amp;4 &amp;-2 &amp;-1\\\\2 &amp;3 &amp;7 &amp;-3 &amp;-2\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;2 &amp;0 &amp;-1\\\\0 &amp;2 &amp;2 &amp;-2 &amp;0\\\\0 &amp;3 &amp;3 &amp;-3 &amp;0\\end{bmatrix}\\sim\n\\begin{bmatrix}\\color{fuchsia}1 &amp;0 &amp;2 &amp;0 &amp;-1\\\\0 &amp;\\color{fuchsia}1 &amp;1 &amp;-1 &amp;0\\\\0 &amp;0 &amp;0 &amp;0 &amp;0\\end{bmatrix}\n\\]</span></p>\n<p>So we have 2 pivots, the rank is 2 and the nullity is 3. This results in <span class=\"math inline\">\\(5b-3a=5\\cdot 3-3\\cdot 2=9\\)</span>.</p>\n<p>The answer is <mark><strong>C</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-2-10-points\">Problem 2 (10 points)</h3>\n<p>Let <span class=\"math inline\">\\(\\pmb u=\\begin{bmatrix}2\\\\0\\\\1\\end{bmatrix}\\)</span>, <span class=\"math inline\">\\(\\pmb v=\\begin{bmatrix}3\\\\1\\\\0\\end{bmatrix}\\)</span>, and <span class=\"math inline\">\\(\\pmb w=\\begin{bmatrix}1\\\\-1\\\\c\\end{bmatrix}\\)</span> where <span class=\"math inline\">\\(c\\)</span> is a real number. The set <span class=\"math inline\">\\(\\{\\pmb u, \\pmb v, \\pmb w\\}\\)</span> is a basis for <span class=\"math inline\">\\(\\mathbb R^3\\)</span> provided that <span class=\"math inline\">\\(c\\)</span> is not equal</p>\n<ul>\n<li>A. <span class=\"math inline\">\\(-2\\)</span></li>\n<li>B. <span class=\"math inline\">\\(2\\)</span></li>\n<li>C. <span class=\"math inline\">\\(-3\\)</span></li>\n<li>D. <span class=\"math inline\">\\(3\\)</span></li>\n<li>E. <span class=\"math inline\">\\(-1\\)</span></li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 2 Solution</p>\n</summary>\n<p>For set <span class=\"math inline\">\\(\\{\\pmb u, \\pmb v, \\pmb w\\}\\)</span> to be a basis for <span class=\"math inline\">\\(\\mathbb R^3\\)</span>, the three vectors should be linearly independent. Let's create a matrix with these vectors as columns, then do row reduction like below <span class=\"math display\">\\[\n\\begin{bmatrix}2 &amp;3 &amp;1\\\\0 &amp;1 &amp;-1\\\\1 &amp;0 &amp;c\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;c\\\\0 &amp;1 &amp;-1\\\\2 &amp;3 &amp;1\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;c\\\\0 &amp;1 &amp;-1\\\\0 &amp;3 &amp;1-2c\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;c\\\\0 &amp;1 &amp;-1\\\\0 &amp;0 &amp;4-2c\\end{bmatrix}\n\\]</span></p>\n<p>As can be seen, we need 3 pivots to make these column vectors linearly independent. If <span class=\"math inline\">\\(c\\)</span> is 2, the last row above has all-zero entries, there would be only 2 pivots. So C cannot be 2 for these three vectors to be linearly independent.</p>\n<p>The answer is <mark><strong>B</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-3-10-points\">Problem 3 (10 points)</h3>\n<p>Which of the following statements is always TRUE?</p>\n<ul>\n<li>A. If <span class=\"math inline\">\\(A\\pmb x=\\lambda\\pmb x\\)</span> for some vector <span class=\"math inline\">\\(\\pmb x\\)</span>, then <span class=\"math inline\">\\(\\lambda\\)</span> is an eigenvalue of <span class=\"math inline\">\\(A\\)</span>.</li>\n<li>B. If <span class=\"math inline\">\\(\\pmb v\\)</span> is an eigenvector corresponding to eigenvalue 2, then <span class=\"math inline\">\\(-\\pmb v\\)</span> is an eigenvector corresonding to eignevalue <span class=\"math inline\">\\(-2\\)</span>.</li>\n<li>C. If <span class=\"math inline\">\\(B\\)</span> is invertible, then matrix <span class=\"math inline\">\\(A\\)</span> and <span class=\"math inline\">\\(B^{-1}AB\\)</span> could have different sets of eigenvalues.</li>\n<li>D. If <span class=\"math inline\">\\(\\lambda\\)</span> is an eigenvalue of matrix <span class=\"math inline\">\\(A\\)</span>, then <span class=\"math inline\">\\(\\lambda^2\\)</span> is an eigenvalue of matrix <span class=\"math inline\">\\(A^2\\)</span>.</li>\n<li>E. If <span class=\"math inline\">\\(-5\\)</span> is an eigenvalue of matrix <span class=\"math inline\">\\(B\\)</span>, then matrix <span class=\"math inline\">\\(B-5I\\)</span> is not invertible.</li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 3 Solution</p>\n</summary>\n<p>Per definitions in 5.1 \"Eigenvectors and Eigenvalues\":</p>\n<blockquote>\n<p>An eigenvector of an <span class=\"math inline\">\\(n\\times n\\)</span> matrix <span class=\"math inline\">\\(A\\)</span> is a <em><mark class=\"label danger\">nonzero vector</mark></em> <span class=\"math inline\">\\(\\pmb x\\)</span> such that <span class=\"math inline\">\\(A\\pmb x=\\lambda\\pmb x\\)</span> for some scalar <span class=\"math inline\">\\(\\lambda\\)</span>. A scalar <span class=\"math inline\">\\(\\lambda\\)</span> is called an eigenvalue of <span class=\"math inline\">\\(A\\)</span> if there is a <em><mark class=\"label danger\">nontrivial solution</mark></em> <span class=\"math inline\">\\(\\pmb x\\)</span> of <span class=\"math inline\">\\(A\\pmb x=\\lambda\\pmb x\\)</span>; such an <span class=\"math inline\">\\(\\pmb x\\)</span> is called an eigenvector corresponding to <span class=\"math inline\">\\(\\lambda\\)</span>.</p>\n</blockquote>\n<p>Statement A is missing the \"nonzero\" keyword, so it is NOT always TRUE.</p>\n<p>For Statement B, given <span class=\"math inline\">\\(A\\pmb v=2\\pmb v\\)</span>, we can obtain <span class=\"math inline\">\\(A(\\pmb{-v})=2(\\pmb{-v})\\)</span>. The eigenvalue is still 2, not <span class=\"math inline\">\\(-2\\)</span>. This statement is FALSE.</p>\n<p>Statement C involves the definition of Similarity. Denote <span class=\"math inline\">\\(P=B^{-1}AB\\)</span>, we have <span class=\"math display\">\\[BPB^{-1}=BB^{-1}ABB^{-1}=A\\]</span> So <span class=\"math inline\">\\(A\\)</span> and <span class=\"math inline\">\\(P\\)</span> <strong>are similar</strong>. <u>Similar matrices have the same eigenvalues</u> (Theorem 4 in Section 5.2 \"The Characteristic Equation\"). Statement C is FALSE</p>\n<blockquote>\n<p>This can be proved easily, as seen below <span class=\"math display\">\\[\\begin{align}\n\\det (A-\\lambda I)&amp;=\\det (BPB^{-1}-\\lambda I)=\\det (BPB^{-1}-\\lambda BB^{-1})\\\\\n                 &amp;=\\det(B)\\det(P-\\lambda I)\\det(B^{-1})\\\\\n                 &amp;=\\det(B)\\det(B^{-1})\\det(P-\\lambda I)\n\\end{align}\\]</span> Since <span class=\"math inline\">\\(\\det(B)\\det(B^{-1})=\\det(BB^{-1})=\\det I=1\\)</span>, we see that <span class=\"math inline\">\\(\\det (A-\\lambda I)=\\det(P-\\lambda I)\\)</span>. ■</p>\n</blockquote>\n<p>For Statement D, given <span class=\"math inline\">\\(A\\pmb x=\\lambda\\pmb x\\)</span>, we can do the following deduction <span class=\"math display\">\\[A^2\\pmb x=AA\\pmb x=A\\lambda\\pmb x=\\lambda A\\pmb x=\\lambda^2\\pmb x\\]</span> So it is always <mark class=\"label success\">TRUE</mark> that <span class=\"math inline\">\\(\\lambda^2\\)</span> is an eigenvalue of matrix <span class=\"math inline\">\\(A^2\\)</span>.</p>\n<p>Statement E is FALSE. An eigenvalue <span class=\"math inline\">\\(-5\\)</span> means matrix <span class=\"math inline\">\\(B-(-5)I\\)</span> is not invertible since <span class=\"math inline\">\\(\\det(B-(-5)I)=\\det(B+5I)=0\\)</span>. But the statement refers to a different matrix <span class=\"math inline\">\\(B-5I\\)</span>.</p>\n<p>The answer is <mark><strong>D</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-4-10-points\">Problem 4 (10 points)</h3>\n<p>Let <span class=\"math inline\">\\(\\mathbb P_3\\)</span> be the vector space of all polynomials of degree at most 3. Which of the following subsets are subspaces of <span class=\"math inline\">\\(\\mathbb P_3\\)</span>?</p>\n<ol type=\"i\">\n<li>A set of polynomials in <span class=\"math inline\">\\(\\mathbb P_3\\)</span> satisfying <span class=\"math inline\">\\(p(0)=p(1)\\)</span>.<br />\n</li>\n<li>A set of polynomials in <span class=\"math inline\">\\(\\mathbb P_3\\)</span> satisfying <span class=\"math inline\">\\(p(0)p(1)=0\\)</span>.<br />\n</li>\n<li>A set of polynomials in <span class=\"math inline\">\\(\\mathbb P_3\\)</span> with integer coefficients.</li>\n</ol>\n<ul>\n<li>A. (i) only</li>\n<li>B. (i) and (ii) only</li>\n<li>C. (i) and (iii) only</li>\n<li>D. (ii) only</li>\n<li>E. (ii) and (iii) only</li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 4 Solution</p>\n</summary>\n<p>Per the definition of Subspace in Section 4.1 \"Vector Spaces and Subspaces\"</p>\n<blockquote>\n<p>A <strong>subspace</strong> of a vector space <span class=\"math inline\">\\(V\\)</span> is a subset <span class=\"math inline\">\\(H\\)</span> of <span class=\"math inline\">\\(V\\)</span> that has three properties:<br />\na. The zero vector of <span class=\"math inline\">\\(V\\)</span> is in <span class=\"math inline\">\\(H\\)</span>.<br />\nb. <span class=\"math inline\">\\(H\\)</span> is closed under vector addition. That is, for each <span class=\"math inline\">\\(\\pmb u\\)</span> and <span class=\"math inline\">\\(\\pmb v\\)</span> in <span class=\"math inline\">\\(H\\)</span>, the sum <span class=\"math inline\">\\(\\pmb u + \\pmb v\\)</span> is in <span class=\"math inline\">\\(H\\)</span>.<br />\nc. <span class=\"math inline\">\\(H\\)</span> is closed under multiplication by scalars. That is, for each <span class=\"math inline\">\\(\\pmb u\\)</span> in <span class=\"math inline\">\\(H\\)</span> and each scalar <span class=\"math inline\">\\(c\\)</span>, the vector <span class=\"math inline\">\\(c\\pmb u\\)</span> is in <span class=\"math inline\">\\(H\\)</span>.</p>\n</blockquote>\n<p>So to be qualified as the subspace, the subset should have all the above three properties. Denote the polynomials as <span class=\"math inline\">\\(p(x)=a_0+a_1x+a_2x^2+a_3x^3\\)</span>.</p>\n<ul>\n<li><p><strong>(i)</strong> Since <span class=\"math inline\">\\(p(0)=p(1)\\)</span>, we have <span class=\"math inline\">\\(a_0=a_0+a_1+a_2+a_3\\)</span>, so <span class=\"math inline\">\\(a_1+a_2+a_3=0\\)</span>.</p>\n<ul>\n<li>Obviously, it satisfies the first property as if <span class=\"math inline\">\\(a_i=0\\)</span> for all <span class=\"math inline\">\\(i\\)</span>, <span class=\"math inline\">\\(a_1+a_2+a_3=0\\)</span> is true as well.</li>\n<li>Now assume <span class=\"math inline\">\\(p_1(x)\\)</span> and <span class=\"math inline\">\\(p_2(x)\\)</span> are two polynomials in this set and <span class=\"math display\">\\[\np_1(x)=a_0+a_1x+a_2x^2+a_3x^3\\\\\np_2(x)=b_0+b_1x+b_2x^2+b_3x^3\n\\]</span> So we have <span class=\"math inline\">\\(a_1+a_2+a_3=0\\)</span> and <span class=\"math inline\">\\(b_1+b_2+b_3=0\\)</span>. Then define a third polynomial <span class=\"math display\">\\[\\begin{align}\np_3(x)&amp;=p_1(x)+p_2(x)\\\\\n&amp;=(a_0+b_0)+(a_1+b_1)x+(a_2+b_2)x^2+(a_3+b_3)x^3\\\\\n&amp;=c_0+c_1x+c_2x^2+c_3x^3\n\\end{align}\\]</span> It is true that <span class=\"math inline\">\\(c_1+c_2+c_3=0\\)</span> as well. So the set has the second property.</li>\n<li>This set does have the third property since <span class=\"math inline\">\\(cp(x)\\)</span> has <span class=\"math inline\">\\(ca_1+ca_2+ca_3=0\\)</span> and it is also in the same set.</li>\n</ul>\n<p>This proves that set (i) is a subspace of <span class=\"math inline\">\\(\\mathbb P_3\\)</span>.</p></li>\n<li><p><strong>(ii)</strong> From <span class=\"math inline\">\\(p(0)p(1)=0\\)</span>, we can deduce that <span class=\"math inline\">\\(a_0(a_0+a_1+a_2+a_3)=0\\)</span>. So any polynomial in this set should satisfy this condition.</p>\n<ul>\n<li>Obviously, it satisfies the first property as if <span class=\"math inline\">\\(a_i=0\\)</span> for all <span class=\"math inline\">\\(i\\)</span>, <span class=\"math inline\">\\(a_0(a_0+a_1+a_2+a_3)=0\\)</span> is true as well.</li>\n<li>With the same notation of <span class=\"math inline\">\\(p_1(x)\\)</span>, <span class=\"math inline\">\\(p_2(x)\\)</span> and <span class=\"math inline\">\\(p_3(x)\\)</span>. We have <span class=\"math display\">\\[\\begin{align}\nc_0(c_0+c_1+c_2+c_3)&amp;=(a_0+b_0)(a_0+b_0+a_1+b_1+a_2+b_2+a_3+b_3)\\\\\n&amp;=(a_0+b_0)((a_0+a_1+a_2+a_3)+(b_0+b_1++b_2+b_3))\\\\\n&amp;=a_0(a_0+a_1+a_2+a_3)+a_0(b_0+b_1++b_2+b_3)+b_0(a_0+a_1+a_2+a_3)+b_0(b_0+b_1++b_2+b_3)\\\\\n&amp;=a_0(b_0+b_1+b_2+b_3)+b_0(a_0+a_1+a_2+a_3)\n\\end{align}\\]</span> If <span class=\"math inline\">\\(a_0=0\\)</span> and <span class=\"math inline\">\\(b_0\\ne 0\\)</span>, the above ends up with <span class=\"math inline\">\\(b_0(a_1+a_2+a_3)\\)</span>, which is not necessary equal 0. So this polynomial in this set does NOT have the second property.</li>\n</ul>\n<p>This proves that set (ii) is NOT a subspace of <span class=\"math inline\">\\(\\mathbb P_3\\)</span>.</p></li>\n<li><p><strong>(iii)</strong> It is easy to tell that this set is NOT a subspace of <span class=\"math inline\">\\(\\mathbb P_3\\)</span>. If we do multiplication by floating-point scalars, the new polynomial does not necessarily have an integer coefficient for each term and might not be in the same set.</p></li>\n</ul>\n<p>So the answer is <mark><strong>A</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-5-10-points\">Problem 5 (10 points)</h3>\n<p>Consider the differential equation <span class=\"math display\">\\[\n\\begin{bmatrix}x&#39;(t)\\\\y&#39;(t)\\end{bmatrix}=\n\\begin{bmatrix}1 &amp;3\\\\-2 &amp;2\\end{bmatrix}\\begin{bmatrix}x(t)\\\\y(t)\\end{bmatrix}\n\\]</span>.</p>\n<p>Then the origin is</p>\n<ul>\n<li>A. an attractor</li>\n<li>B. a repeller</li>\n<li>C. a saddle point</li>\n<li>D. a spiral point</li>\n<li>E. none of the above</li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 5 Solution</p>\n</summary>\n<p>First, write the system as a matrix differential equation <span class=\"math inline\">\\(\\pmb x&#39;(t)=A\\pmb x(t)\\)</span>. We learn from Section 5.7 \"Applications to Differential Equations\" that each eigenvalue–eigenvector pair provides a solution.</p>\n<p>Now let's find out the eigenvalues of <span class=\"math inline\">\\(A\\)</span>. From <span class=\"math inline\">\\(\\det (A-\\lambda I)=0\\)</span>, we have <span class=\"math display\">\\[\\begin{vmatrix}1-\\lambda &amp;3\\\\-2 &amp;2-\\lambda\\end{vmatrix}=\\lambda^2-3\\lambda+8=0\\]</span> This only gives two complex numbers as eigenvalues <span class=\"math display\">\\[\\lambda=\\frac{3\\pm\\sqrt{23}i}{2}\\]</span></p>\n<p>Referring to the Complex Eigenvalues discussion at the end of this section, \"the origin is called a spiral point of the dynamical system. The rotation is caused by the sine and cosine functions that arise from a complex eigenvalue\". Because the complex eigenvalues have a positive real part, the trajectories spiral outward.</p>\n<p>So the answer is <mark><strong>D</strong></mark>.</p>\n<blockquote>\n<p>Refer to the following table for the mapping from <span class=\"math inline\">\\(2\\times 2\\)</span> matrix eigenvalues to trajectories:</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Eigenvalues</th>\n<th style=\"text-align: center;\">Trajectories</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\lambda_1&gt;0, \\lambda_2&gt;0\\)</span></td>\n<td style=\"text-align: center;\">Repeller/Source</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\lambda_1&lt;0, \\lambda_2&lt;0\\)</span></td>\n<td style=\"text-align: center;\">Attactor/Sink</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\lambda_1&lt;0, \\lambda_2&gt;0\\)</span></td>\n<td style=\"text-align: center;\">Saddle Point</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\lambda = a\\pm bi, a&gt;0\\)</span></td>\n<td style=\"text-align: center;\">Spiral (outward) Point</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\lambda = a\\pm bi, a&lt;0\\)</span></td>\n<td style=\"text-align: center;\">Spiral (inward) Point</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\"><span class=\"math inline\">\\(\\lambda = \\pm bi\\)</span></td>\n<td style=\"text-align: center;\">Ellipses (circles if <span class=\"math inline\">\\(b=1\\)</span>)</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n\n</details>\n<h3 id=\"problem-6-10-points\">Problem 6 (10 points)</h3>\n<p>Which of the following matrices are diagonalizable over the real numbers?</p>\n<ol type=\"i\">\n<li><span class=\"math inline\">\\(\\begin{bmatrix}2 &amp;-5\\\\3 &amp;-6\\end{bmatrix}\\)</span> (ii) <span class=\"math inline\">\\(\\begin{bmatrix}4 &amp;1\\\\0 &amp;4\\end{bmatrix}\\)</span> (iii) <span class=\"math inline\">\\(\\begin{bmatrix}1 &amp;-1 &amp;3\\\\0 &amp;5 &amp;-2\\\\0 &amp;0 &amp;7\\end{bmatrix}\\)</span> (iv) <span class=\"math inline\">\\(\\begin{bmatrix}7 &amp;1 &amp;1\\\\0 &amp;2 &amp;2\\\\0 &amp;1 &amp;3\\end{bmatrix}\\)</span></li>\n</ol>\n<ul>\n<li>A. (i) and (iii) only</li>\n<li>B. (iii) and (iv) only</li>\n<li>C. (i), (iii) and (iv) only</li>\n<li>D. (i), (ii) and (iii) only</li>\n<li>E. (i), (ii) and (iv) only</li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 6 Solution</p>\n</summary>\n<p>This problem tests our knowledge of Theorem 6 of Section 5.3 \"Diagonalization\":</p>\n<blockquote>\n<p>An <span class=\"math inline\">\\(n\\times n\\)</span> matrix with <span class=\"math inline\">\\(n\\)</span> distinct eigenvalues is diagonalizable.</p>\n</blockquote>\n<p>So let's find out the eigenvalues for each matrix:</p>\n<ul>\n<li><ol type=\"i\">\n<li>From the equation <span class=\"math inline\">\\(\\det A-\\lambda I=0\\)</span>, we can obtain <span class=\"math display\">\\[\\begin{vmatrix}2-\\lambda &amp;-5\\\\3 &amp;-6-\\lambda\\end{vmatrix}=(\\lambda-2)(\\lambda+6)+15=(\\lambda+1)\\lambda+3)=0\\]</span> This leads to two roots <span class=\"math inline\">\\(\\lambda_1=-1\\)</span>, <span class=\"math inline\">\\(\\lambda_2=-3\\)</span>.</li>\n</ol></li>\n<li><ol start=\"2\" type=\"i\">\n<li>Since this is a triangular matrix, the eigenvalue is just 4, with multiplicity 2.</li>\n</ol></li>\n<li><ol start=\"3\" type=\"i\">\n<li>For the same reason, this <span class=\"math inline\">\\(3\\times 3\\)</span> matrix has eigenvalues 1, 5 and 7.</li>\n</ol></li>\n<li><ol start=\"4\" type=\"i\">\n<li>Use cofactor expansion with <span class=\"math inline\">\\(C_{1,1}\\)</span>, we have <span class=\"math display\">\\[\\begin{align}\n\\begin{vmatrix}7-\\lambda &amp;1 &amp;1\\\\0 &amp;2-\\lambda &amp;2\\\\0 &amp;1 &amp;3-\\lambda\\end{vmatrix}&amp;=\n(7-\\lambda)(-1)^{1+1}\\begin{vmatrix}2-\\lambda &amp;2\\\\1 &amp;3-\\lambda\\end{vmatrix}\\\\\n&amp;=(7-\\lambda)(\\lambda^2-5\\lambda+6-2)\\\\\n&amp;=(7-\\lambda)(\\lambda-4)(\\lambda-1)\n\\end{align}\\]</span> The eigenvalues are 7, 4, and 1.</li>\n</ol></li>\n</ul>\n<p>Now we can see that (i), (iii), and (iv) have distinct eigenvalues, they are diagonalizable matrices.</p>\n<p>So the answer is <mark><strong>C</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-7-10-points\">Problem 7 (10 points)</h3>\n<p>A real <span class=\"math inline\">\\(2\\times 2\\)</span> matrix <span class=\"math inline\">\\(A\\)</span> has an eigenvalue <span class=\"math inline\">\\(\\lambda_1=2+i\\)</span> with corresponding eigenvector <span class=\"math inline\">\\(\\pmb v_1=\\begin{bmatrix}3-i\\\\4+i\\end{bmatrix}\\)</span>. Which of the following is the general REAL solution to the system of differential equations <span class=\"math inline\">\\(\\pmb x&#39;(t)=A\\pmb x(t)\\)</span></p>\n<ul>\n<li>A. <span class=\"math inline\">\\(c_{1}e^{2t}\\begin{bmatrix}3\\cos t-\\sin t\\\\4\\cos t+\\sin t\\end{bmatrix}+c_{2}e^{2t}\\begin{bmatrix}3\\sin t+\\cos t\\\\4\\sin t-\\cos t\\end{bmatrix}\\)</span></li>\n<li>B. <span class=\"math inline\">\\(c_{1}e^{2t}\\begin{bmatrix}-3\\cos t+\\sin t\\\\4\\cos t-\\sin t\\end{bmatrix}+c_{2}e^{2t}\\begin{bmatrix}3\\sin t-\\cos t\\\\4\\sin t-\\cos t\\end{bmatrix}\\)</span></li>\n<li>C. <span class=\"math inline\">\\(c_{1}e^{2t}\\begin{bmatrix}3\\cos t-\\sin t\\\\4\\cos t+\\sin t\\end{bmatrix}+c_{2}e^{2t}\\begin{bmatrix}3\\sin t-\\cos t\\\\4\\sin t-\\cos t\\end{bmatrix}\\)</span></li>\n<li>D. <span class=\"math inline\">\\(c_{1}e^{2t}\\begin{bmatrix}3\\cos t+\\sin t\\\\4\\cos t-\\sin t\\end{bmatrix}+c_{2}e^{2t}\\begin{bmatrix}3\\sin t+\\cos t\\\\4\\sin t-\\cos t\\end{bmatrix}\\)</span></li>\n<li>E. <span class=\"math inline\">\\(c_{1}e^{2t}\\begin{bmatrix}3\\cos t+\\sin t\\\\4\\cos t-\\sin t\\end{bmatrix}+c_{2}e^{2t}\\begin{bmatrix}3\\sin t-\\cos t\\\\4\\sin t+\\cos t\\end{bmatrix}\\)</span></li>\n</ul>\n<details class=\"note success\"><summary><p>Problem 7 Solution</p>\n</summary>\n<p>From Section 5.7 \"Applications to Differential Equations\", we learn that the general solution to a matrix differential equation is <span class=\"math display\">\\[\\pmb x(t)=c_1\\pmb{v}_1 e^{\\lambda_1 t}+c_2\\pmb{v}_2 e^{\\lambda_2 t}\\]</span> For a real matrix, complex eigenvalues and associated eigenvectors come in conjugate pairs. Hence we know that <span class=\"math inline\">\\(\\lambda_2=2-i\\)</span> and <span class=\"math inline\">\\(\\pmb{v}_2=\\begin{bmatrix}3+i\\\\4-i\\end{bmatrix}\\)</span>. However, we do not need these two to find our solution here. <strong>The real and imaginary parts of <span class=\"math inline\">\\(\\pmb{v}_1 e^{\\lambda_1 t}\\)</span> are (real) solutions of <span class=\"math inline\">\\(\\pmb x&#39;(t)=A\\pmb x(t)\\)</span>, because they are linear combinations of <span class=\"math inline\">\\(\\pmb{v}_1 e^{\\lambda_1 t}\\)</span> and <span class=\"math inline\">\\(\\pmb{v}_2 e^{\\lambda_2 t}\\)</span>.</strong> (See the proof in \"Complex Eigenvalues\" of Section 5.7)</p>\n<p>Now use Euler's formula (<span class=\"math inline\">\\(e^{ix}=\\cos x+i\\sin x\\)</span>), we have <span class=\"math display\">\\[\\begin{align}\n\\pmb{v}_1 e^{\\lambda_1 t}\n&amp;=e^{(2+i)t}\\begin{bmatrix}3-i\\\\4+i\\end{bmatrix}\\\\\n&amp;=e^{2t}(\\cos t+i\\sin t)\\begin{bmatrix}3-i\\\\4+i\\end{bmatrix}\\\\\n&amp;=e^{2t}\\begin{bmatrix}(3\\cos t+\\sin t)+(3\\sin t-\\cos t)i\\\\(4\\cos t-\\sin t)+(4\\sin t+\\cos t)i\\end{bmatrix}\n\\end{align}\\]</span> The general REAL solution is the linear combination of the REAL and IMAGINARY parts of the result above, it is <span class=\"math display\">\\[c_1 e^{2t}\\begin{bmatrix}3\\cos t+\\sin t\\\\4\\cos t-\\sin t\\end{bmatrix}+\nc_2 e^{2t}\\begin{bmatrix}3\\sin t-\\cos t\\\\4\\sin t+\\cos t\\end{bmatrix}\\]</span></p>\n<p>So the answer is <mark><strong>E</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-8-10-points\">Problem 8 (10 points)</h3>\n<p>Let <span class=\"math inline\">\\(T: M_{2\\times 2}\\to M_{2\\times 2}\\)</span> be a linear map defined as <span class=\"math inline\">\\(A\\mapsto A+A^T\\)</span>.</p>\n<p>(2 points) (1) Find <span class=\"math inline\">\\(T(\\begin{bmatrix}1 &amp;2\\\\3 &amp;4\\end{bmatrix})\\)</span></p>\n<p>(4 points) (2) Find a basis for the range of <span class=\"math inline\">\\(T\\)</span>.</p>\n<p>(4 points) (3) Find a basis for the kernel of <span class=\"math inline\">\\(T\\)</span>.</p>\n<details class=\"note success\"><summary><p>Problem 8 Solution</p>\n</summary>\n<ol type=\"1\">\n<li><p>As the mapping rule is <span class=\"math inline\">\\(A\\mapsto A+A^T\\)</span>, we can directly write down the transformation as below <span class=\"math display\">\\[T(\\begin{bmatrix}1 &amp;2\\\\3 &amp;4\\end{bmatrix})=\\begin{bmatrix}1 &amp;2\\\\3 &amp;4\\end{bmatrix}+\\begin{bmatrix}1 &amp;2\\\\3 &amp;4\\end{bmatrix}^T=\\begin{bmatrix}2 &amp;5\\\\5 &amp;8\\end{bmatrix}\\]</span></p></li>\n<li><p>If we denote the 4 entries of a <span class=\"math inline\">\\(2\\times 2\\)</span> matrix as <span class=\"math inline\">\\(\\begin{bmatrix}a &amp;b\\\\c &amp;d\\end{bmatrix}\\)</span>, the transformation can be written as <span class=\"math display\">\\[\\begin{align}\nT(\\begin{bmatrix}a &amp;b\\\\c &amp;d\\end{bmatrix})\n&amp;=\\begin{bmatrix}a &amp;b\\\\c &amp;d\\end{bmatrix}+\\begin{bmatrix}a &amp;b\\\\c &amp;d\\end{bmatrix}^T=\\begin{bmatrix}2a &amp;b+c\\\\b+c &amp;2d\\end{bmatrix}\\\\\n&amp;=2a\\begin{bmatrix}1 &amp;0\\\\0 &amp;0\\end{bmatrix}+(b+c)\\begin{bmatrix}0 &amp;1\\\\1 &amp;0\\end{bmatrix}+2d\\begin{bmatrix}0 &amp;0\\\\0 &amp;1\\end{bmatrix}\n\\end{align}\\]</span> So the basis can be the set of three <span class=\"math inline\">\\(3\\times 3\\)</span> matrices like below <span class=\"math display\">\\[\n\\begin{Bmatrix}\\begin{bmatrix}1 &amp;0\\\\0 &amp;0\\end{bmatrix},\\begin{bmatrix}0 &amp;1\\\\1 &amp;0\\end{bmatrix},\\begin{bmatrix}0 &amp;0\\\\0 &amp;1\\end{bmatrix}\\end{Bmatrix}\n\\]</span></p></li>\n<li><p>The kernel (or null space) of such a <span class=\"math inline\">\\(T\\)</span> is the set of all <span class=\"math inline\">\\(\\pmb u\\)</span> in vector space <span class=\"math inline\">\\(V\\)</span> such that <span class=\"math inline\">\\(T(\\pmb u)=\\pmb 0\\)</span>. Write this as <span class=\"math display\">\\[T(\\begin{bmatrix}a &amp;b\\\\c &amp;d\\end{bmatrix})=\\begin{bmatrix}2a &amp;b+c\\\\b+c &amp;2d\\end{bmatrix}=\\begin{bmatrix}0 &amp;0\\\\0 &amp;0\\end{bmatrix}\\]</span> This leads to <span class=\"math inline\">\\(a=d=0\\)</span> and <span class=\"math inline\">\\(c=-b\\)</span>. So the original matrix <span class=\"math inline\">\\(A\\)</span> that satified this conditioncan be represented as <span class=\"math inline\">\\(c\\begin{bmatrix}0 &amp;1\\\\-1 &amp;0\\end{bmatrix}\\)</span>. This shows that <span class=\"math inline\">\\(\\begin{bmatrix}0 &amp;1\\\\-1 &amp;0\\end{bmatrix}\\)</span> (or <span class=\"math inline\">\\(\\begin{bmatrix}0 &amp;-1\\\\1 &amp;0\\end{bmatrix}\\)</span>) is the basis for the null space of <span class=\"math inline\">\\(T\\)</span>.</p></li>\n</ol>\n\n</details>\n<h3 id=\"problem-9-10-points\">Problem 9 (10 points)</h3>\n<p>(6 points) (1) Find all the eigenvalues of matrix <span class=\"math inline\">\\(A=\\begin{bmatrix}4 &amp;0 &amp;0\\\\1 &amp;2 &amp;1\\\\-1 &amp;2 &amp;3\\end{bmatrix}\\)</span>, and find a basis for the eigenspace corresponding to each of the eigenvalues.</p>\n<p>(4 points) (2) Find an invertible matrix <span class=\"math inline\">\\(P\\)</span> and a diagonal matrix <span class=\"math inline\">\\(D\\)</span> such that <span class=\"math display\">\\[\n\\begin{bmatrix}4 &amp;0 &amp;0\\\\1 &amp;2 &amp;1\\\\-1 &amp;2 &amp;3\\end{bmatrix}=PDP^{-1}\n\\]</span></p>\n<details class=\"note success\"><summary><p>Problem 9 Solution</p>\n</summary>\n<ol type=\"1\">\n<li>Apply the equation <span class=\"math inline\">\\(\\det A-\\lambda I=0\\)</span>, we have <span class=\"math display\">\\[\\begin{vmatrix}4-\\lambda &amp;0 &amp;0\\\\1 &amp;2-\\lambda &amp;1\\\\-1 &amp;2 &amp;3-\\lambda\\end{vmatrix}=(4-\\lambda)\\begin{vmatrix}2-\\lambda &amp;1\\\\2 &amp;3-\\lambda\\end{vmatrix}=-(\\lambda-4)^2(\\lambda-1)=0\\]</span> So the eigenvalues are 4 an 1. Now to find eigenvector for each eigenvalue, we take the eigenvalue to the system <span class=\"math inline\">\\((A-\\lambda I)\\pmb x=\\pmb 0\\)</span> and find the basis vector(s) which would be the eigenvector.\n<ul>\n<li>For <span class=\"math inline\">\\(\\lambda_1=\\lambda_2=4\\)</span>, we have the new matrix as <span class=\"math display\">\\[\\begin{bmatrix}0 &amp;0 &amp;0\\\\1 &amp;-2 &amp;1\\\\-1 &amp;2 &amp;-1\\end{bmatrix}\\sim\n \\begin{bmatrix}0 &amp;0 &amp;0\\\\1 &amp;-2 &amp;1\\\\0 &amp;0 &amp;0\\end{bmatrix}\\]</span> This gives <span class=\"math inline\">\\(x_1-2x_2+x_3=0\\)</span> with two free variables <span class=\"math inline\">\\(x_2\\)</span> and <span class=\"math inline\">\\(x_3\\)</span>. Now in parametric vector form, we can obtain <span class=\"math display\">\\[\\begin{bmatrix}x_1\\\\x_2\\\\x_3\\end{bmatrix}=\\begin{bmatrix}2x_2-x_3\\\\x_2\\\\x_3\\end{bmatrix}=x_2\\begin{bmatrix}2\\\\1\\\\0\\end{bmatrix}+x_3\\begin{bmatrix}-1\\\\0\\\\1\\end{bmatrix}\\]</span> A basis is <span class=\"math inline\">\\(\\begin{Bmatrix}\\begin{bmatrix}2\\\\1\\\\0\\end{bmatrix},\\begin{bmatrix}-1\\\\0\\\\1\\end{bmatrix}\\end{Bmatrix}\\)</span>.</li>\n<li>For <span class=\"math inline\">\\(\\lambda_3=1\\)</span>, the new matrix is <span class=\"math display\">\\[\\begin{bmatrix}3 &amp;0 &amp;0\\\\1 &amp;1 &amp;1\\\\-1 &amp;2 &amp;2\\end{bmatrix}\\sim\n \\begin{bmatrix}1 &amp;0 &amp;0\\\\0 &amp;1 &amp;1\\\\0 &amp;2 &amp;2\\end{bmatrix}\\sim\n \\begin{bmatrix}1 &amp;0 &amp;0\\\\0 &amp;1 &amp;1\\\\0 &amp;0 &amp;0\\end{bmatrix}\\]</span> This gives <span class=\"math inline\">\\(x_1=0\\)</span> and <span class=\"math inline\">\\(x_2=-x_3\\)</span> with one free variable <span class=\"math inline\">\\(x_3\\)</span>. Again in parametric vector form, we can obtain <span class=\"math display\">\\[\\begin{bmatrix}x_1\\\\x_2\\\\x_3\\end{bmatrix}=\\begin{bmatrix}0\\\\-x_3\\\\x_3\\end{bmatrix}=x_3\\begin{bmatrix}0\\\\-1\\\\1\\end{bmatrix}\\]</span> A basis is <span class=\"math inline\">\\(\\begin{Bmatrix}\\begin{bmatrix}0\\\\-1\\\\1\\end{bmatrix}\\end{Bmatrix}\\)</span>.</li>\n</ul></li>\n<li>From the above solution we can directly write <span class=\"math inline\">\\(P\\)</span> and <span class=\"math inline\">\\(D\\)</span> below <span class=\"math display\">\\[P=\\begin{bmatrix}2 &amp;-1 &amp;0\\\\1 &amp;0 &amp;-1\\\\0 &amp;1 &amp;1\\end{bmatrix}\\quad\nD=\\begin{bmatrix}4 &amp;0 &amp;0\\\\0 &amp;4 &amp;0\\\\0 &amp;0 &amp;1\\end{bmatrix}\\]</span></li>\n</ol>\n\n</details>\n<h3 id=\"problem-10-10-points\">Problem 10 (10 points)</h3>\n<p>(4 points) (1) Find the eigenvalues and corresponding eigenvectors of the matrix <span class=\"math display\">\\[\\begin{bmatrix}-5 &amp;1\\\\4 &amp;-2\\end{bmatrix}\\]</span></p>\n<p>(2 points) (2) Find a general solution to the system of differential equations <span class=\"math display\">\\[\n\\begin{bmatrix}x&#39;(t)\\\\y&#39;(t)\\end{bmatrix}=\n\\begin{bmatrix}-5 &amp;1\\\\4 &amp;-2\\end{bmatrix}\\begin{bmatrix}x(t)\\\\y(t)\\end{bmatrix}\n\\]</span></p>\n<p>(4 points) (3) Let <span class=\"math inline\">\\(\\begin{bmatrix}x(t)\\\\y(t)\\end{bmatrix}\\)</span> be a particular soilution to the initial value problem <span class=\"math display\">\\[\n\\begin{bmatrix}x&#39;(t)\\\\y&#39;(t)\\end{bmatrix}=\n\\begin{bmatrix}-5 &amp;1\\\\4 &amp;-2\\end{bmatrix}\\begin{bmatrix}x(t)\\\\y(t)\\end{bmatrix},\n\\begin{bmatrix}x(0)\\\\y(0)\\end{bmatrix}=\\begin{bmatrix}3\\\\7\\end{bmatrix}.\n\\]</span> Find <span class=\"math inline\">\\(x(1)+y(1)\\)</span>.</p>\n<details class=\"note success\"><summary><p>Problem 10 Solution</p>\n</summary>\n<ol type=\"1\">\n<li>To find eigenvalues, write down the determinant as <span class=\"math display\">\\[\\begin{vmatrix}-5-\\lambda &amp;1\\\\4 &amp;-2-\\lambda\\end{vmatrix}=(\\lambda+6)(\\lambda+1)=0\\]</span> So the eigenvalues are <span class=\"math inline\">\\(\\lambda_1=-6\\)</span> and <span class=\"math inline\">\\(\\lambda_2=-1\\)</span>. Now follow the same method as Problem 9 solution to get eigenvectors for them.\n<ul>\n<li>For <span class=\"math inline\">\\(\\lambda_1=-6\\)</span>, the new matrix is <span class=\"math display\">\\[\\begin{bmatrix}1 &amp;1\\\\4 &amp;4\\end{bmatrix}\\sim\n \\begin{bmatrix}1 &amp;1\\\\0 &amp;0\\end{bmatrix}\\]</span> The eigenvector is <span class=\"math inline\">\\(\\begin{bmatrix}1\\\\-1\\end{bmatrix}\\)</span>.</li>\n<li>For <span class=\"math inline\">\\(\\lambda_1=-1\\)</span>, the new matrix is <span class=\"math display\">\\[\\begin{bmatrix}-4 &amp;1\\\\4 &amp;-1\\end{bmatrix}\\sim\n \\begin{bmatrix}-4 &amp;1\\\\0 &amp;0\\end{bmatrix}\\]</span> The eigenvector is <span class=\"math inline\">\\(\\begin{bmatrix}1\\\\4\\end{bmatrix}\\)</span>.</li>\n</ul></li>\n<li>The general solution to a matrix differential equation is <span class=\"math display\">\\[\\pmb x(t)=c_1\\pmb{v}_1 e^{\\lambda_1 t}+c_2\\pmb{v}_2 e^{\\lambda_2 t}\\]</span> So from this, since we already found out the eigenvalues and the corresponding eigenvectors, we can write down <span class=\"math display\">\\[\n\\begin{bmatrix}x(t)\\\\y(t)\\end{bmatrix}=c_1\\begin{bmatrix}1\\\\-1\\end{bmatrix}e^{-6t}+c_2\\begin{bmatrix}1\\\\4\\end{bmatrix}e^{-t}\n\\]</span> Now apply the initial values of <span class=\"math inline\">\\(x(0)\\)</span> and <span class=\"math inline\">\\(y(0)\\)</span>, here comes the following equations: <span class=\"math display\">\\[\\begin{align}\nc_1+c_2&amp;=3\\\\\n-c_1+4c_2&amp;=7\n\\end{align}\\]</span> This gives <span class=\"math inline\">\\(c_1=1\\)</span> and <span class=\"math inline\">\\(c_2=2\\)</span>. So <span class=\"math inline\">\\(x(1)+y(1)=e^{-6}+2e^{-1}-e^{-6}+8e^{-1}=10e^{-1}\\)</span>.</li>\n</ol>\n\n</details>\n<h2 id=\"summary\">Summary</h2>\n<p>Here is the table listing the key knowledge points for each problem in this exam:</p>\n<table>\n<colgroup>\n<col style=\"width: 10%\" />\n<col style=\"width: 44%\" />\n<col style=\"width: 44%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Problem #</th>\n<th style=\"text-align: center;\">Points of Knowledge</th>\n<th style=\"text-align: center;\">Book Sections</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">The Rank Theorem</td>\n<td style=\"text-align: center;\">4.6 \"Rank\"</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">Linear dependence, Invertible Matrix Theorem</td>\n<td style=\"text-align: center;\">4.3 \"Linearly Independent Sets; Bases\", 4.6 \"Rank\"</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">3</td>\n<td style=\"text-align: center;\">Eigenvectors and Eigenvalues</td>\n<td style=\"text-align: center;\">5.1 \"Eigenvectors and Eigenvalues\"</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">4</td>\n<td style=\"text-align: center;\">Vector Spaces and Subspaces</td>\n<td style=\"text-align: center;\">4.1 \"Vector Spaces and Subspaces\"</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">5</td>\n<td style=\"text-align: center;\">Eigenfunctions of the Differential Equation</td>\n<td style=\"text-align: center;\">5.7 \"Applications to Differential Equations\"</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">6</td>\n<td style=\"text-align: center;\">The Diagonalization Theorem, Diagonalizing Matrices</td>\n<td style=\"text-align: center;\">5.3 \"Diagonalization\"</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">7</td>\n<td style=\"text-align: center;\">Complex Eigenvalues and Eigenvectors</td>\n<td style=\"text-align: center;\">5.5 \"Complex Eigenvalues\"</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">8</td>\n<td style=\"text-align: center;\">Kernel and Range of a Linear Transformation</td>\n<td style=\"text-align: center;\">4.2 \"Null Spaces, Column Spaces, and Linear Transformations\"</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">9</td>\n<td style=\"text-align: center;\">Eigenvalues, Basis for Eigenspace, Diagonalizing Matrices</td>\n<td style=\"text-align: center;\">5.1 \"Eigenvectors and Eigenvalues\", 5.3 \"Diagonalization\"</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">10</td>\n<td style=\"text-align: center;\">Eigenvectors and Eigenvalues</td>\n<td style=\"text-align: center;\">5.1 \"Eigenvectors and Eigenvalues\", 5.7 \"Applications to Differential Equations\"</td>\n</tr>\n</tbody>\n</table>\n","categories":["Study Notes"],"tags":["Linear Algebra","Machine Learning"]},{"title":"Purdue MA 26500 Fall 2023 Midterm I Solutions","url":"/en/2024/01/28/Purdue-MA265-2023-Fall-Midterm1/","content":"<p>This is the 3rd study notes post for the college linear algebra course. Here is the review of Purdue MA 26500 Fall 2023 midterm I. I provide solutions to all exam questions as well as concise explanations. <span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>There is hardly any theory which is more elementary [than linear algebra], in spite of the fact that generations of professors and textbook writers have obscured its simplicity by preposterous calculations with matrices.</strong><br> <strong>— <em>Jean Dieudonné</em> (1906~1992, French mathematician, notable for research in abstract algebra, algebraic geometry, and functional analysis.)</strong></p>\n</div>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Purdue University Department of Mathematics provides an introductory-level linear algebra course MA 26500 every semester. Undergraduate students of science and engineering majors taking this course would gain a good mathematical foundation for their advanced studies in machine learning, computer graphics, control theory, etc.</p>\n<blockquote>\n<p><strong><em>Disclosure</em></strong>: <em>This blog site is reader-supported. When you buy through the affiliate links below, as an Amazon Associate, I earn a tiny commission from qualifying purchases. Thank you.</em></p>\n</blockquote>\n<p>MA 26500 textbook is <a href=\"https://amzn.to/3Srz7qm\"><em>Linear Algebra and its Applications</em></a> (6th Edition) by David C. Lay, Steven R. Lay, and Judi J. McDonald. The authors have also published a <a href=\"https://amzn.to/428m5Bl\"><em>student study guide</em></a> for it, which is available for purchase on Amazon as well.</p>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><a href=\"https://amzn.to/3Srz7qm\"><img src=\"https://www.packetmania.net/en/2024/01/19/Purdue-MA265-2022-Fall-Midterm1/Linear-Algebra-and-Its-Applications-6e.jpg\" /></a></div><div class=\"group-picture-column\"><a href=\"https://amzn.to/428m5Bl\"><img src=\"https://www.packetmania.net/en/2024/01/19/Purdue-MA265-2022-Fall-Midterm1/Linear-Algebra-and-Its-Appl-6th-study-guide.jpg\" /></a></div></div></div>\n<p>MA 26500 midterm I covers the topics in Sections 1.1 – 3.3 of the textbook. It is usually scheduled at the beginning of the seventh week. The exam format is a combination of multiple-choice questions and short-answer questions. Students are given one hour to finish answering the exam questions.</p>\n<p>Here are a few extra reference links for Purdue MA 26500:</p>\n<ul>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/semester/semesters\">Purdue Department of Mathematics Course Achive</a></li>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/semester/202420/ma26500/index.html\">Purdue MA 26500 Spring 2024</a></li>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/oldexams.php?course=MA26500\">Purdue MA 26500 Exam Archive</a></li>\n</ul>\n<h2 id=\"fall-2023-midterm-i-solutions\">Fall 2023 Midterm I Solutions</h2>\n<h3 id=\"problem-1-10-points\">Problem 1 (10 points)</h3>\n<p><img src=\"MA265-Fall2023-Midterm1-P1.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 1 Solution</p>\n</summary>\n<p>Because <span class=\"math inline\">\\(C=B^{-1}A\\)</span>, we can left-multiply both sides by <span class=\"math inline\">\\(B\\)</span> and obtain <span class=\"math inline\">\\(BC=BB^{-1}A=A\\)</span>. So <span class=\"math display\">\\[\n\\begin{bmatrix}0 &amp; 1\\\\1 &amp; 5\\\\\\end{bmatrix}\n\\begin{bmatrix}a &amp; b\\\\c &amp; d\\\\\\end{bmatrix}=\n\\begin{bmatrix}1 &amp; 1\\\\3 &amp; 2\\\\\\end{bmatrix}\n\\]</span> Further, compute matrix multiplication at the left side <span class=\"math display\">\\[\n\\begin{bmatrix}c &amp;d\\\\a+5c &amp;b+5d\\\\\\end{bmatrix}=\n\\begin{bmatrix}1 &amp; 1\\\\3 &amp; 2\\\\\\end{bmatrix}\n\\]</span> From here we can directly get <span class=\"math inline\">\\(c=d=1\\)</span>, then <span class=\"math inline\">\\(a=-2\\)</span> and <span class=\"math inline\">\\(b=-3\\)</span>. This leads to <span class=\"math inline\">\\(a+b+c+d=-3\\)</span>.</p>\n<p>The answer is <mark><strong>A</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-2-10-points\">Problem 2 (10 points)</h3>\n<p><img src=\"MA265-Fall2023-Midterm1-P2.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 2 Solution</p>\n</summary>\n<p>The reduced row echelon form has the same number of pivots as the original matrix. And the rank of a matrix <span class=\"math inline\">\\(A\\)</span> is just the number of pivot columns in <span class=\"math inline\">\\(A\\)</span>. From these, we can deduce statement (iii) is true.</p>\n<p>Per the Rank Theorem (rank <span class=\"math inline\">\\(A\\)</span> + dim Nul <span class=\"math inline\">\\(A\\)</span> = <span class=\"math inline\">\\(n\\)</span>), since <span class=\"math inline\">\\(\\mathrm{Rank}(A)=\\mathrm{Rank}(R)\\)</span>, we obtain <span class=\"math inline\">\\(\\mathrm{Nul}(A)=\\mathrm{Nul}(R)\\)</span>. So statement (i) is true as well.</p>\n<p>For a square matrix <span class=\"math inline\">\\(A\\)</span>, suppose that transforming <span class=\"math inline\">\\(A\\)</span> to a matrix in reduced row-echelon form using elementary row operations <span class=\"math inline\">\\(E_kE_{k−1}⋯E_1A=R\\)</span>. Taking the determinants of both sides, we get <span class=\"math inline\">\\(\\det E_kE_{k−1}⋯E_1A=\\det R\\)</span>. Now, using the fact that the determinant of a product of matrices is the same as the product of the determinants of the matrices, we get that <span class=\"math display\">\\[\\det A=\\frac{\\det R}{\\det E_1⋯\\det E_k}\\]</span></p>\n<p>According to the description in the \"Proofs of Theorems 3 and 6\" part in Section 3.2 Properties of Determinants, it is proven that <span class=\"math inline\">\\(\\det E\\)</span> would be either 1, -1, or a scalar. Taking all these into consideration, if <span class=\"math inline\">\\(\\det R\\)</span> is zero, <span class=\"math inline\">\\(\\det A\\)</span> must be zero. Statement (v) is true.</p>\n<p><strong>📝Notes:</strong>The reduced row echelon form of a square matrix is either the identity matrix or contains a row of 0's. Hence, <span class=\"math inline\">\\(\\det R\\)</span> is either 1 or 0.</p>\n<p>Now look back at statement (ii), the column space of the matrix <span class=\"math inline\">\\(A\\)</span> is not necessarily equal to the column space of <span class=\"math inline\">\\(R\\)</span>, because the reduced row echelon form could contain a row of 0's. In such a case, the spans of these two column spaces are different.</p>\n<p>For the same reason, we can conclude that the statement (iv) is false. Referring to Theorem 4 in Section 1.4 The Matrix Operation <span class=\"math inline\">\\(A\\pmb x=\\pmb b\\)</span> (check the \"Common Errors and Warnings\" in the end), \"For each <span class=\"math inline\">\\(\\pmb b\\)</span> in <span class=\"math inline\">\\(\\pmb R^m\\)</span>, the equation <span class=\"math inline\">\\(A\\pmb x=\\pmb b\\)</span> has a solution\" is true if and only if <strong><span class=\"math inline\">\\(A\\)</span> has a pivot position in every row</strong> (not column).</p>\n<p>The answer is <mark><strong>A</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-3-10-points\">Problem 3 (10 points)</h3>\n<p><img src=\"MA265-Fall2023-Midterm1-P3.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 3 Solution</p>\n</summary>\n<p>First, we can do row reduction to obtain the row echelon form of the standard matrix <span class=\"math display\">\\[\\begin{align}\n&amp;\\begin{bmatrix}1 &amp;a &amp;a+1\\\\2 &amp;a+2 &amp;a-1\\\\2-a &amp;0 &amp;0\\\\\\end{bmatrix}\\sim\n \\begin{bmatrix}1 &amp;a &amp;a+1\\\\0 &amp;-a+2 &amp;-a-3\\\\2-a &amp;0 &amp;0\\\\\\end{bmatrix}\\sim\\\\\n\\sim&amp;\\begin{bmatrix}1 &amp;a &amp;a+1\\\\0 &amp;-a+2 &amp;-a-3\\\\0 &amp;a(a-2) &amp;(a+1)(a-2)\\\\\\end{bmatrix}\\sim\n \\begin{bmatrix}1 &amp;a &amp;a+1\\\\0 &amp;-a+2 &amp;-a-3\\\\0 &amp;0 &amp;-4a-2\\\\\\end{bmatrix}\n\\end{align}\\]</span></p>\n<p>If <span class=\"math inline\">\\(a=2\\)</span>, the 2nd column is a multiple of the 1st column, so the columns of <span class=\"math inline\">\\(A\\)</span> are not linearly independent, then the transformation would not be one-to-one (Check Theorem 12 of Section 1.9 The Matrix of a Linear Transformation).</p>\n<p>Moreover, if <span class=\"math inline\">\\(a=-\\frac{1}{2}\\)</span>, the entries of the last row are all 0s. In such case, matrix <span class=\"math inline\">\\(A\\)</span> has only two pivots and <span class=\"math inline\">\\(A\\pmb x=\\pmb 0\\)</span> has non-trivial solutions, <span class=\"math inline\">\\(L\\)</span> is not one-to-one (See Theorem 11 of Section 1.9 The Matrix of a Linear Transformation).</p>\n<p>So the answer is <mark><strong>C</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-4-10-points\">Problem 4 (10 points)</h3>\n<p><img src=\"MA265-Fall2023-Midterm1-P4.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 4 Solution</p>\n</summary>\n<p>Statement A is wrong as none of these 3 vectors is a linear combination of the other two. They form a linearly independent set.</p>\n<p>Statement B is wrong as we need 4 linearly independent vectors to span <span class=\"math inline\">\\(\\mathbb R^4\\)</span>.</p>\n<p>Statements C and D are also wrong because B is wrong. Not all vectors in <span class=\"math inline\">\\(\\mathbb R^4\\)</span> can be generated with a linear combination of these 3 vectors, and <span class=\"math inline\">\\(A\\pmb x=\\pmb b\\)</span> might have no solution.</p>\n<p>Statements E is correct. It has a unique but trivial solution. Quoted from the textbook Section 1.7 Linear Independence:</p>\n<blockquote>\n<p>The columns of a matrix <span class=\"math inline\">\\(A\\)</span> are linearly independent if and only if the equation <span class=\"math inline\">\\(A\\pmb x=\\pmb 0\\)</span> has only the trivial solution.</p>\n</blockquote>\n<p>So the answer is <mark><strong>E</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-5-10-points\">Problem 5 (10 points)</h3>\n<p><img src=\"MA265-Fall2023-Midterm1-P5.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 5 Solution</p>\n</summary>\n<p>From the given condition, we know that <span class=\"math inline\">\\(A\\)</span> is a <span class=\"math inline\">\\(m\\times n\\)</span> matrix. So statement A is wrong.</p>\n<p>Statement B is not necessarily true since <span class=\"math inline\">\\(\\pmb b\\)</span> could be outside of the range but still in the <span class=\"math inline\">\\(\\mathbb R^m\\)</span> as the codomain of <span class=\"math inline\">\\(T\\)</span>. Statement E is also not true for the same reason.</p>\n<p>Statement D is wrong. Since <span class=\"math inline\">\\(m\\)</span> is the row number of the matrix <span class=\"math inline\">\\(A\\)</span>, rank <span class=\"math inline\">\\(A=m\\)</span> just means the number of pivots is equal to the row number. To have the column linearly independent, we need the pivot number to be the same as the column number.</p>\n<p>Now we have only statement C left. If <span class=\"math inline\">\\(m&lt;n\\)</span>, the column vector set is linearly dependent. But <span class=\"math inline\">\\(T\\)</span> is one-to-one if and only if the columns of <span class=\"math inline\">\\(A\\)</span> are linearly independent. So <span class=\"math inline\">\\(m&lt;n\\)</span> cannot be true.</p>\n<p>The answer is <mark><strong>C</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-6-10-points\">Problem 6 (10 points)</h3>\n<p><img src=\"MA265-Fall2023-Midterm1-P6.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 6 Solution</p>\n</summary>\n<p>This is to solve the following equation system: <span class=\"math display\">\\[\n\\begin{bmatrix}2 &amp;3\\\\1 &amp;-1\\\\5 &amp;4\\\\\\end{bmatrix}\n\\begin{bmatrix}x_1\\\\x_2\\\\\\end{bmatrix}=\n\\begin{bmatrix}1\\\\3\\\\6\\\\\\end{bmatrix}\n\\]</span> Let's do the row reduction with the augmented matrix <span class=\"math display\">\\[\n\\begin{bmatrix}2 &amp;3 &amp;1\\\\1 &amp;-1 &amp;3\\\\5 &amp;4 &amp;6\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;-1 &amp;3\\\\2 &amp;3 &amp;1\\\\5 &amp;4 &amp;6\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;-1 &amp;3\\\\0 &amp;5 &amp;-5\\\\0 &amp;9 &amp;-9\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;-1 &amp;3\\\\0 &amp;1 &amp;-1\\\\0 &amp;0 &amp;0\\\\\\end{bmatrix}\n\\]</span></p>\n<p>This yields the unique solution <span class=\"math inline\">\\(x_1=2\\)</span> and <span class=\"math inline\">\\(x_2=-1\\)</span>. So the answer is <mark><strong>B</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-7-10-points\">Problem 7 (10 points)</h3>\n<p><img src=\"MA265-Fall2023-Midterm1-P7.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 7 Solution</p>\n</summary>\n<p>First, we can exclude E as it has a zero vector, and a vector set including a zero vector is always linearly dependent.</p>\n<p>C has its column 2 equal to 2 times column 1. It is not linearly independent.</p>\n<p>A is also wrong. It is easy to see that column 3 is equal to 2 times column 1 minus column 2.</p>\n<p>B has zeros in row 3 of all four vectors. So all the vectors have only 3 valid entries. But we have 4 vectors. Referring to Theorem 8 of Section 1.7 Linear Independence, this is equivalent to the case that 4 vectors are all in 3D space. So there must be one vector that is a linear combination of the other 3. B is not the right answer.</p>\n<p>D can be converted to the vector set <span class=\"math display\">\\[\\begin{Bmatrix}\n\\begin{bmatrix}1\\\\1\\\\0\\end{bmatrix},\n\\begin{bmatrix}0\\\\1\\\\1\\end{bmatrix},\n\\begin{bmatrix}1\\\\0\\\\0\\end{bmatrix}\n\\end{Bmatrix}\\]</span> This is a linear independent vector set since we cannot get any column by linearly combining the other two.</p>\n<p>So the answer is <mark><strong>D</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-8-10-points\">Problem 8 (10 points)</h3>\n<p><img src=\"MA265-Fall2023-Midterm1-P8-1.png\" style=\"width:90.0%;height:90.0%\" /> <img src=\"MA265-Fall2023-Midterm1-P8-234.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 8 Solution</p>\n</summary>\n<ol type=\"1\">\n<li><p>Start with the augmented matrix and do row reduction <span class=\"math display\">\\[\n\\begin{bmatrix}1 &amp;1 &amp;a &amp;1\\\\0 &amp;1 &amp;a^2-2 &amp;a\\\\3 &amp;2 &amp;2 &amp;3\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;1 &amp;a &amp;1\\\\0 &amp;1 &amp;a^2-2 &amp;a\\\\0 &amp;-1 &amp;2-3a &amp;0\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;1 &amp;a &amp;1\\\\0 &amp;1 &amp;a^2-2 &amp;a\\\\0 &amp;0 &amp;a(a-3) &amp;a\\\\\\end{bmatrix}\n\\]</span></p></li>\n<li><p>Apparently if <span class=\"math inline\">\\(a=0\\)</span>, the last row has all zero entries, the system has one free variable and there are an infinite number of solutions.</p></li>\n<li><p>If <span class=\"math inline\">\\(a=3\\)</span>, the last row indicates <span class=\"math inline\">\\(0=3\\)</span>, the system is inconsistent and has no solution.</p></li>\n<li><p>If <span class=\"math inline\">\\(a\\)</span> is neither 3 nor 0, the row echelon form shows three pivots, thus the system has a unique solution.</p></li>\n</ol>\n\n</details>\n<h3 id=\"problem-9-10-points\">Problem 9 (10 points)</h3>\n<p><img src=\"MA265-Fall2023-Midterm1-P9-1.png\" style=\"width:90.0%;height:90.0%\" /> <img src=\"MA265-Fall2023-Midterm1-P9-2.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 9 Solution</p>\n</summary>\n<ol type=\"1\">\n<li><p>The sequence of row reduction to get the <strong>reduced row echelon form</strong> is shown below <span class=\"math display\">\\[\\begin{align}\n&amp;\\begin{bmatrix}1 &amp;0 &amp;-1 &amp;-2 &amp;3\\\\2 &amp;0 &amp;-3 &amp;-4 &amp;5\\\\5 &amp;0 &amp;-6 &amp;-1 &amp;14\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;-1 &amp;-2 &amp;3\\\\0 &amp;0 &amp;-1 &amp;0 &amp;-1\\\\0 &amp;0 &amp;-1 &amp;0 &amp;-1\\\\\\end{bmatrix}\\\\\n\\sim&amp;\\begin{bmatrix}1 &amp;0 &amp;-1 &amp;-2 &amp;3\\\\0 &amp;0 &amp;-1 &amp;0 &amp;-1\\\\0 &amp;0 &amp;0 &amp;0 &amp;0\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;-1 &amp;-2 &amp;3\\\\0 &amp;0 &amp;1 &amp;0 &amp;1\\\\0 &amp;0 &amp;0 &amp;0 &amp;0\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;0 &amp;-2 &amp;4\\\\0 &amp;0 &amp;1 &amp;0 &amp;1\\\\0 &amp;0 &amp;0 &amp;0 &amp;0\\\\\\end{bmatrix}\n\\end{align}\\]</span></p></li>\n<li><p>From the reduced row echelon form, we can see that there are two pivots and three free variables <span class=\"math inline\">\\(x_2\\)</span>, <span class=\"math inline\">\\(x_4\\)</span>, and <span class=\"math inline\">\\(x_5\\)</span>. So the system <span class=\"math inline\">\\(A\\pmb x=\\pmb 0\\)</span> becomes <span class=\"math display\">\\[\\begin{align}\nx_1-2x_4+4x_5&amp;=0\\\\\nx_3+x_5&amp;=0\n\\end{align}\\]</span></p></li>\n</ol>\n<p>Now write the solution in parametric vector form. The general solution is <span class=\"math inline\">\\(x_1=2x_4-4x_5\\)</span>, <span class=\"math inline\">\\(x_3=-x_5\\)</span>. This can be written as <span class=\"math display\">\\[\n    \\begin{bmatrix}x_1\\\\x_2\\\\x_3\\\\x_4\\\\x_5\\end{bmatrix}=\n    \\begin{bmatrix}2x_4-4x_5\\\\x_2\\\\-x_5\\\\x_4\\\\x_5\\end{bmatrix}=\n    x_2\\begin{bmatrix}0\\\\1\\\\0\\\\0\\\\0\\end{bmatrix}+\n    x_4\\begin{bmatrix}2\\\\0\\\\0\\\\1\\\\0\\end{bmatrix}+\n    x_5\\begin{bmatrix}-4\\\\0\\\\-1\\\\0\\\\1\\end{bmatrix}\n    \\]</span> So the basis for Nul <span class=\"math inline\">\\(A\\)</span> is <span class=\"math display\">\\[\\begin{Bmatrix}\n    \\begin{bmatrix}0\\\\1\\\\0\\\\0\\\\0\\end{bmatrix},\n    \\begin{bmatrix}2\\\\0\\\\0\\\\1\\\\0\\end{bmatrix},\n    \\begin{bmatrix}-4\\\\0\\\\-1\\\\0\\\\1\\end{bmatrix}\n    \\end{Bmatrix}\\]</span></p>\n\n</details>\n<h3 id=\"problem-10-10-points\">Problem 10 (10 points)</h3>\n<p><img src=\"MA265-Fall2023-Midterm1-P10-1.png\" style=\"width:90.0%;height:90.0%\" /> <img src=\"MA265-Fall2023-Midterm1-P10-2.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 10 Solution</p>\n</summary>\n<ol type=\"1\">\n<li><p>For computing the determinant of matrix <span class=\"math inline\">\\(A\\)</span> with the 1st column cofactor expansion, note that the only nonzero entry in column 1 is <span class=\"math inline\">\\(a_{1,4}=2\\)</span>, so we have <span class=\"math display\">\\[\\begin{align}\n\\det A&amp;=(-1)^{1+4}\\cdot 2\\cdot\\begin{vmatrix}1 &amp;2 &amp;3\\\\0 &amp;\\color{fuchsia}3 &amp;0\\\\1 &amp;1 &amp;1\\end{vmatrix}\\\\\n  &amp;=(-2)\\cdot 3\\begin{vmatrix}1 &amp;3\\\\1 &amp;1\\end{vmatrix}=(-6)\\cdot(-2)=12\n\\end{align}\\]</span></p></li>\n<li><p>From the adjugate of <span class=\"math inline\">\\(A\\)</span>, we deduce the formula</p></li>\n</ol>\n<p><span class=\"math display\">\\[\\begin{align}\nb_{3,2}&amp;=\\frac{C_{2,3}}{\\det A}=\\frac{1}{12}\\cdot(-1)^{2+3}\\begin{vmatrix}0 &amp;1 &amp;3\\\\0 &amp;1 &amp;1\\\\\\color{fuchsia}2 &amp;0 &amp;1\\end{vmatrix}\\\\\n&amp;=\\frac{-1}{12}\\cdot(-1)^{3+1}\\cdot 2\\begin{vmatrix}1 &amp;3\\\\1 &amp;1\\end{vmatrix}=\\frac{1}{3}\n\\end{align}\\]</span></p>\n\n</details>\n<h2 id=\"exam-summary\">Exam Summary</h2>\n<p>Here is the table listing the key knowledge points for each problem in this exam:</p>\n<table>\n<colgroup>\n<col style=\"width: 32%\" />\n<col style=\"width: 68%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Problem #</th>\n<th style=\"text-align: center;\">Points of Knowledge</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Matrix Multiplications, Inverse Matrix</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">Column Space, Rank, Nul Space, Determinant, Pivot, Linear System Consistency</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">3</td>\n<td style=\"text-align: center;\">Linear Transformation, One-to-One Mapping</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">4</td>\n<td style=\"text-align: center;\">Linear Dependency, Vector Set Span <span class=\"math inline\">\\(\\mathbb R^n\\)</span>, Unique Solution</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">5</td>\n<td style=\"text-align: center;\">Linear Transformation, One-to-One Mapping, Rank, Column Linear Independency, Vector Set Span <span class=\"math inline\">\\(\\mathbb R^n\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">6</td>\n<td style=\"text-align: center;\">Basis of Span <span class=\"math inline\">\\({v_1, v_2}\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">7</td>\n<td style=\"text-align: center;\">Linear Independency Vector Set</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">8</td>\n<td style=\"text-align: center;\">Row Echelon Form, Augmented Matrix, Linear System Solution Set and Consistency</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">9</td>\n<td style=\"text-align: center;\">Reduced Row Echelon Form, Basis for the Null Space</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">10</td>\n<td style=\"text-align: center;\">Determinant, Cofactor Expansion, Inverse Matrix, The Adjugate of Matrix</td>\n</tr>\n</tbody>\n</table>\n<p>As can be seen, it has a good coverage of the topics of the specified sections from the textbook. Students should carefully review those to prepare for this and similar exams.</p>\n<h2 id=\"common-errors-and-warnings\">Common Errors and Warnings</h2>\n<p>Here are a few <em>warnings</em> collected from the textbook. It is highly recommended that students preparing for the MA 265 Midterm I exam review these carefully to identify common errors and know how to prevent them in the test.</p>\n<h3 id=\"the-matrix-equation\">The Matrix Equation</h3>\n<p><img src=\"LAnIA-6th-Chap1_4-Theorem4.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<p><img src=\"LAnIA-6th-Chap1_4-Theorem4-Warning.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<h3 id=\"solution-sets-of-linear-system\">Solution Sets of Linear System</h3>\n<p><img src=\"LAnIA-6th-Chap1_5-Theorem6.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<p><img src=\"LAnIA-6th-Chap1_5-Theorem6-Warning.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<h3 id=\"linear-independence\">Linear Independence</h3>\n<p><img src=\"LAnIA-6th-Chap1_7-Theorem7-Warning.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<p><img src=\"LAnIA-6th-Chap1_7-Theorem8-Warning.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<h3 id=\"matrix-operations\">Matrix Operations</h3>\n<p><img src=\"LAnIA-6th-Chap2_1-Warnings.png\" style=\"width:70.0%;height:70.0%\" /></p>\n<h3 id=\"subspace-of-mathbb-rn\">Subspace of <span class=\"math inline\">\\(\\mathbb R^N\\)</span></h3>\n<p><img src=\"LAnIA-6th-Chap2_8-Theorem13-Warning.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<h3 id=\"properties-of-determinants\">Properties of Determinants</h3>\n<p><img src=\"LAnIA-6th-Chap3_2-Theorem6.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<p><img src=\"LAnIA-6th-Chap3_2-Theorem6-Warning.png\" style=\"width:90.0%;height:90.0%\" /></p>\n","categories":["Study Notes"],"tags":["Linear Algebra","Machine Learning"]},{"title":"Purdue MA 26500 Spring 2023 Midterm I Solutions","url":"/en/2024/01/23/Purdue-MA265-2023-Spring-Midterm1/","content":"<p>This is the 2nd study notes post for the college linear algebra course. Here is the review of Purdue MA 26500 Spring 2023 midterm I. I provide solutions to all exam questions as well as concise explanations. <span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>Matrices act. They don't just sit there.</strong><br> <strong>— <em>Gilbert Strang</em> (American mathematician known for his contributions to finite element theory, the calculus of variations, wavelet analysis and linear algebra.)</strong></p>\n</div>\n<h2 id=\"introduction\">Introduction</h2>\n<p>Purdue University Department of Mathematics provides an introductory-level linear algebra course MA 26500 every semester. Undergraduate students of science and engineering majors taking this course would gain a good mathematical foundation for their advanced studies in machine learning, computer graphics, control theory, etc.</p>\n<blockquote>\n<p><strong><em>Disclosure</em></strong>: <em>This blog site is reader-supported. When you buy through the affiliate links below, as an Amazon Associate, I earn a tiny commission from qualifying purchases. Thank you.</em></p>\n</blockquote>\n<p>MA 26500 textbook is <a href=\"https://amzn.to/3Srz7qm\"><em>Linear Algebra and its Applications</em></a> (6th Edition) by David C. Lay, Steven R. Lay, and Judi J. McDonald. The authors have also published a <a href=\"https://amzn.to/428m5Bl\"><em>student study guide</em></a> for it, which is available for purchase on Amazon as well.</p>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><a href=\"https://amzn.to/3Srz7qm\"><img src=\"https://www.packetmania.net/en/2024/01/19/Purdue-MA265-2022-Fall-Midterm1/Linear-Algebra-and-Its-Applications-6e.jpg\" /></a></div><div class=\"group-picture-column\"><a href=\"https://amzn.to/428m5Bl\"><img src=\"https://www.packetmania.net/en/2024/01/19/Purdue-MA265-2022-Fall-Midterm1/Linear-Algebra-and-Its-Appl-6th-study-guide.jpg\" /></a></div></div></div>\n<p>MA 26500 midterm I covers the topics of Sections 1.1 – 3.3 in the textbook. It is usually scheduled at the beginning of the seventh week. The exam format is a combination of multiple-choice questions and short-answer questions. Students are given one hour to finish answering the exam questions.</p>\n<p>Here are a few extra reference links for Purdue MA 26500:</p>\n<ul>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/semester/semesters\">Purdue Department of Mathematics Course Achive</a></li>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/semester/202420/ma26500/index.html\">Purdue MA 26500 Spring 2024</a></li>\n<li><a href=\"https://www.math.purdue.edu/academic/courses/oldexams.php?course=MA26500\">Purdue MA 26500 Exam Archive</a></li>\n</ul>\n<h2 id=\"spring-2023-midterm-i-solutions\">Spring 2023 Midterm I Solutions</h2>\n<h3 id=\"problem-1-10-points\">Problem 1 (10 points)</h3>\n<p><img src=\"MA265-Spring2023-Midterm1-P1.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 1 Solution</p>\n</summary>\n<p>Referring to Section 3.2 Property of Determinants, we can do row and column operations to efficiently find the determinant of the given matrix.</p>\n<p><span class=\"math display\">\\[\\begin{align}\n\\begin{vmatrix}a &amp;b &amp;3c\\\\g &amp;h &amp;3i\\\\d+2a &amp;e+2b &amp;3f+6c\\\\\\end{vmatrix}&amp;=(-1)\\cdot\\begin{vmatrix}a &amp;b &amp;3c\\\\d+2a &amp;e+2b &amp;3f+6c\\\\g &amp;h &amp;3i\\\\\\end{vmatrix}\\\\\n&amp;=(-1)\\cdot\\begin{vmatrix}a &amp;b &amp;3c\\\\d &amp;e &amp;3f\\\\g &amp;h &amp;3i\\\\\\end{vmatrix}=\n(-1)\\cdot3\\begin{vmatrix}a &amp;b &amp;c\\\\d &amp;e &amp;f\\\\g &amp;h &amp;i\\\\\\end{vmatrix}\\\\\n&amp;=-3\\cdot 2=-6\n\\end{align}\\]</span></p>\n<p>The exact sequence of the operations are</p>\n<ol type=\"1\">\n<li>An interchange of rows 2 and 3 reverses the sign of the determinant.</li>\n<li>Adding -2 times row 1 to row 2 does not change the determinant.</li>\n<li>Factoring out a common multiple of column 3.</li>\n<li>Applying the known result of det <span class=\"math inline\">\\(A\\)</span>.</li>\n</ol>\n<p>So the answer is <mark><strong>B</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-2-10-points\">Problem 2 (10 points)</h3>\n<p><img src=\"MA265-Spring2023-Midterm1-P2.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 2 Solution</p>\n</summary>\n<p>This problem tests the students' knowledge of rank and dimension. Referring to Section 2.9 Dimension and Rank, we know the following important points:</p>\n<blockquote>\n<ol type=\"1\">\n<li>Since the pivot columns of <span class=\"math inline\">\\(A\\)</span> form a basis for Col <span class=\"math inline\">\\(A\\)</span>, the rank of <span class=\"math inline\">\\(A\\)</span> is just the number of pivot columns in <span class=\"math inline\">\\(A\\)</span>.</li>\n<li>If a matrix <span class=\"math inline\">\\(A\\)</span> has <span class=\"math inline\">\\(n\\)</span> columns, then rank <span class=\"math inline\">\\(A\\)</span> + dim Nul <span class=\"math inline\">\\(A\\)</span> = <span class=\"math inline\">\\(n\\)</span>.</li>\n</ol>\n</blockquote>\n<p>To find out the number of pivot columns in <span class=\"math inline\">\\(A\\)</span>, we can do elementary row operations to obtain the <strong>Row Echelon Form</strong> of matrix <span class=\"math inline\">\\(A\\)</span>.</p>\n<p><span class=\"math display\">\\[\\begin{align}\n&amp;\\begin{bmatrix}1 &amp;2 &amp;2 &amp;5 &amp;0\\\\-2 &amp;0 &amp;-2 &amp;2 &amp;-4\\\\3 &amp;4 &amp;-1 &amp;9 &amp;2\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;2 &amp;2 &amp;5 &amp;0\\\\0 &amp;4 &amp;-4 &amp;12 &amp;-4\\\\0 &amp;-2 &amp;2 &amp;-6 &amp;2\\\\\\end{bmatrix}\\\\\n\\sim&amp;\\begin{bmatrix}1 &amp;2 &amp;2 &amp;5 &amp;0\\\\0 &amp;1 &amp;-1 &amp;3 &amp;-1\\\\0 &amp;1 &amp;-1 &amp;3 &amp;-1\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}\\color{fuchsia}{1} &amp;2 &amp;2 &amp;5 &amp;0\\\\0 &amp;\\color{fuchsia}{1} &amp;-1 &amp;3 &amp;-1\\\\0 &amp;0 &amp;0 &amp;0 &amp;0\\\\\\end{bmatrix}\n\\end{align}\\]</span></p>\n<p>Now it is clear that this matrix has two pivot columns, thus rank <span class=\"math inline\">\\(A\\)</span> is 2, and dim Nul <span class=\"math inline\">\\(A\\)</span> is <span class=\"math inline\">\\(5-2=3\\)</span>.</p>\n<p>Since <span class=\"math inline\">\\(5a-3b=5\\times 2-3\\times 3=1\\)</span>, the answer is <mark><strong>A</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-3-10-points\">Problem 3 (10 points)</h3>\n<p><img src=\"MA265-Spring2023-Midterm1-P3.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 3 Solution</p>\n</summary>\n<p>For such linear transformation <span class=\"math inline\">\\(T:\\mathbb R^3\\to\\mathbb R^3\\)</span>, onto means for each <span class=\"math inline\">\\(\\pmb b\\)</span> in the codomain <span class=\"math inline\">\\(\\mathbb R^{3}\\)</span>, there exists at least one solution of <span class=\"math inline\">\\(T(\\pmb x)=\\pmb b\\)</span>.</p>\n<p>Let's do row reduction first to see</p>\n<p><span class=\"math display\">\\[\\begin{align}\n&amp;\\begin{bmatrix}1 &amp;t &amp;2\\\\3 &amp;3 &amp;t-5\\\\2 &amp;0 &amp;0\\\\\\end{bmatrix}\\sim\n \\begin{bmatrix}1 &amp;0 &amp;0\\\\3 &amp;3 &amp;t-5\\\\1 &amp;t &amp;2\\\\\\end{bmatrix}\\sim\n \\begin{bmatrix}1 &amp;0 &amp;0\\\\1 &amp;1 &amp;\\frac{t-5}{3}\\\\0 &amp;t &amp;2\\\\\\end{bmatrix}\\\\\n\\sim&amp;\\begin{bmatrix}1 &amp;0 &amp;0\\\\0 &amp;1 &amp;\\frac{t-5}{3}\\\\0 &amp;t &amp;2\\\\\\end{bmatrix}\\sim\n     \\begin{bmatrix}1 &amp;0 &amp;0\\\\0 &amp;1 &amp;\\frac{t-5}{3}\\\\0 &amp;0 &amp;2-\\frac{(t-5)t}{3}\\\\\\end{bmatrix}\n\\end{align}\\]</span></p>\n<p>Now inspect the entry of row 3 and column 3, it can be factorized as <span class=\"math inline\">\\(\\frac{(6-t)(1+t)}{3}\\)</span>. If <span class=\"math inline\">\\(t\\)</span> is 6 or -1, this entry becomes 0. In such cases, for a nonzero <span class=\"math inline\">\\(b_{3}\\)</span> of <span class=\"math inline\">\\(\\pmb b\\)</span> in <span class=\"math inline\">\\(\\mathbb R^{3}\\)</span>, there would be no solution at all.</p>\n<p>So to make this linear transformation onto <span class=\"math inline\">\\(\\mathbb R^{3}\\)</span>, <span class=\"math inline\">\\(t\\)</span> cannot be 6 or -1. The answer is <mark><strong>E</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-4-10-points\">Problem 4 (10 points)</h3>\n<p><img src=\"MA265-Spring2023-Midterm1-P4.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 4 Solution</p>\n</summary>\n<p>Let's inspect the statements one by one.</p>\n<p>For (i), from Section 1.7 Linear Independence, because <span class=\"math inline\">\\(A\\pmb x=\\pmb 0\\)</span> has only a trivial solution, the columns of the matrix <span class=\"math inline\">\\(A\\)</span> are linearly independent. So there should be at most one solution for these column vectors to combine and obtain, this statement is true.</p>\n<p>Statement (ii) is also true. If <span class=\"math inline\">\\(m&lt;n\\)</span>, according to Theorem 8 of Section 1.7, the set of column vectors is linearly dependent, etc a <span class=\"math inline\">\\(2\\times 3\\)</span> matrix (see Example 5 of Section 1.7). Then <span class=\"math inline\">\\(A\\pmb x=\\pmb 0\\)</span> has a nontrivial solution. Now referring to Theorem 11 of Section 1.9, this linear transformation of matrix <span class=\"math inline\">\\(A\\)</span> is NOT one-to-one.</p>\n<p>Thinking of the case <span class=\"math inline\">\\(3\\times 2\\)</span> for the linear transformation <span class=\"math inline\">\\(T: \\mathbb R^2\\to\\mathbb R^3\\)</span>, we can get one-to-one mapping. But for <span class=\"math inline\">\\(T: \\mathbb R^3\\to\\mathbb R^2\\)</span>, there could be more than 1 point in 3D space mapping to a 2D point. It is not one-to-one.</p>\n<p>For (iii), certainly this is not true. A simple example can be a <span class=\"math inline\">\\(3\\times 2\\)</span> matrix like below <span class=\"math display\">\\[\\begin{bmatrix}1 &amp;0\\\\1 &amp;1\\\\0 &amp;1\\\\\\end{bmatrix}\\]</span> The two columns above are NOT linearly dependent.</p>\n<p>Statement (iv) is true as this is the exact case described by Theorem 4 (c) and (d) in Section 1.4.</p>\n<p>The answer is <mark><strong>D</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-5-10-points\">Problem 5 (10 points)</h3>\n<p><img src=\"MA265-Spring2023-Midterm1-P5.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 5 Solution</p>\n</summary>\n<p>From the given conditions, we know that the columns of <span class=\"math inline\">\\(A\\)</span> form a linearly dependent set. Equivalently this means <span class=\"math inline\">\\(A\\)</span> is not invertible and <span class=\"math inline\">\\(A\\pmb x=\\pmb 0\\)</span> has two nontrivial solutions <span class=\"math display\">\\[\\begin{align}\nA\\pmb x&amp;=[\\pmb a_{1}\\,\\pmb a_{2}\\,\\pmb a_{3}\\,\\pmb a_{4}\\,\\pmb a_{5}]\\begin{bmatrix}5\\\\1\\\\-6\\\\-2\\\\0\\end{bmatrix}=\\pmb 0\\\\\nA\\pmb x&amp;=[\\pmb a_{1}\\,\\pmb a_{2}\\,\\pmb a_{3}\\,\\pmb a_{4}\\,\\pmb a_{5}]\\begin{bmatrix}0\\\\2\\\\-7\\\\1\\\\3\\end{bmatrix}=\\pmb 0\\\\\n\\end{align}\\]</span> So Statement E is false. Moveover, a noninvertible <span class=\"math inline\">\\(A\\)</span> has <span class=\"math inline\">\\(\\det A = 0\\)</span>. The statement A is false too.</p>\n<p>The two nontrivial solutions for <span class=\"math inline\">\\(A\\pmb x=\\pmb 0\\)</span> are <span class=\"math inline\">\\([5\\,\\,1\\,\\,-6\\,\\,-2\\,\\,0]^T\\)</span> and <span class=\"math inline\">\\([0\\,\\,2\\,\\,-7\\,\\,1\\,\\,-3]^T\\)</span>. As they are also linear independent as one is not a multiple of the other, they should be in the basis for Nul <span class=\"math inline\">\\(A\\)</span>. But we are not sure if there are also other vectors in the basis. We can only deduce that dim Nul <span class=\"math inline\">\\(A\\)</span> is at least 2. From this, we decide that statement B is false.</p>\n<p>Again because rank <span class=\"math inline\">\\(A\\)</span> + dim Nul <span class=\"math inline\">\\(A\\)</span> = <span class=\"math inline\">\\(5\\)</span>, and dim Nul <span class=\"math inline\">\\(A\\)</span> is greater than or equal to 2, rank <span class=\"math inline\">\\(A\\)</span> must be less than or equal to 3. Statement C is true.</p>\n<p>Statement D is not true either, since <span class=\"math inline\">\\([1\\,\\,2\\,\\,-7\\,\\,1\\,\\,-3]^T\\)</span> is not a linear combination of <span class=\"math inline\">\\([5\\,\\,1\\,\\,-6\\,\\,-2\\,\\,0]^T\\)</span> and <span class=\"math inline\">\\([0\\,\\,2\\,\\,-7\\,\\,1\\,\\,-3]^T\\)</span>.</p>\n<p>So the answer is <mark><strong>C</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-6-10-points\">Problem 6 (10 points)</h3>\n<p><img src=\"MA265-Spring2023-Midterm1-P6.png\" style=\"width:65.0%;height:65.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 6 Solution</p>\n</summary>\n<p>Denote the adjugate of <span class=\"math inline\">\\(A\\)</span> as <span class=\"math inline\">\\(B=\\{b_{ij}\\}\\)</span>, then <span class=\"math inline\">\\(b_{ij}=C_{ji}\\)</span>, where <span class=\"math inline\">\\(C_{ji}\\)</span> is the cofactor of <span class=\"math inline\">\\(A\\)</span>. Compute two non-corner entries of <span class=\"math inline\">\\(B\\)</span> below <span class=\"math display\">\\[\\begin{align}\nb_{12}&amp;=C_{21}=(-1)^{2+1}\\begin{vmatrix}0 &amp;-1\\\\1 &amp;-1\\end{vmatrix}=-1\\\\\nb_{21}&amp;=C_{12}=(-1)^{1+2}\\begin{vmatrix}-5 &amp;-1\\\\3 &amp;-1\\end{vmatrix}=-8\n\\end{align}\\]</span></p>\n<p>So the answer is <mark><strong>C</strong></mark>.</p>\n\n</details>\n<h3 id=\"problem-7-10-points\">Problem 7 (10 points)</h3>\n<p><img src=\"MA265-Spring2023-Midterm1-P7.png\" style=\"width:70.0%;height:70.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 7 Solution</p>\n</summary>\n<p>We need a set of 4 linearly independent vectors to span <span class=\"math inline\">\\(\\mathbb R^4\\)</span>.</p>\n<p>Answer A contains the zero vector, thus the set is not linearly independent.</p>\n<p>Answer E contains only 3 vectors, not enough as the basis of <span class=\"math inline\">\\(\\mathbb R^4\\)</span>.</p>\n<p>Answer D column 3 is 2 times column 2, and column 5 is equal to column 2 and column 4. So it has only 3 linearly independent vectors. Still not enough</p>\n<p>Answer C is also not correct. If we scale 1/3 to column 1, and then add it with columns 2 and 3 altogether, it results in column 4. So only 3 linearly independent vectors.</p>\n<p>So the answer is <mark><strong>B</strong></mark>. Indeed B has 4 linearly independent vectors.</p>\n\n</details>\n<h3 id=\"problem-8-10-points\">Problem 8 (10 points)</h3>\n<p><img src=\"MA265-Spring2023-Midterm1-P8-1.png\" style=\"width:80.0%;height:80.0%\" /> <img src=\"MA265-Spring2023-Midterm1-P8-2.png\" style=\"width:80.0%;height:80.0%\" /> <img src=\"MA265-Spring2023-Midterm1-P8-3.png\" style=\"width:80.0%;height:80.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 8 Solution</p>\n</summary>\n<p>This problem is very similar to Problem 8 of Fall 2022 Midterm I. The solution follows the same steps.</p>\n<ol type=\"1\">\n<li><p>Referring to Theorem 10 of Section 1.9 The Matrix of a Linear Transformation, remember the property <span class=\"math display\">\\[T(c\\pmb u+d\\pmb v)=cT(\\pmb u)+dT(\\pmb v)\\]</span> We can use this property to find <span class=\"math inline\">\\(A\\)</span>.</p>\n<p>First, denote <span class=\"math inline\">\\(\\pmb u=\\begin{bmatrix}1\\\\1\\end{bmatrix}\\)</span> and <span class=\"math inline\">\\(\\pmb v=\\begin{bmatrix}-1\\\\1\\end{bmatrix}\\)</span>. It is trivial to see that <span class=\"math display\">\\[\\begin{align}\n \\pmb{u}&amp;=1\\cdot\\begin{bmatrix}1\\\\0\\end{bmatrix}+1\\cdot\\begin{bmatrix}0\\\\1\\end{bmatrix}=\\pmb{e}_1+\\pmb{e}_2\\\\\n \\pmb{v}&amp;=-1\\cdot\\begin{bmatrix}1\\\\0\\end{bmatrix}+1\\cdot\\begin{bmatrix}0\\\\1\\end{bmatrix}=-\\pmb{e}_1+\\pmb{e}_2\\\\\n \\end{align}\\]</span> This leads to <span class=\"math display\">\\[\\begin{align}\n \\pmb{e}_1&amp;=\\begin{bmatrix}1\\\\0\\end{bmatrix}\n         =\\frac{1}{2}\\pmb{u}-\\frac{1}{2}\\pmb{v}\\\\\n \\pmb{e}_2&amp;=\\begin{bmatrix}0\\\\1\\end{bmatrix}\n          =\\frac{1}{2}\\pmb{u}+\\frac{1}{2}\\pmb{v}\n \\end{align}\\]</span> Then apply the property and compute <span class=\"math display\">\\[\\begin{align}\n T(\\pmb{e}_1)&amp;=\\frac{1}{2}T(\\pmb{u})-\\frac{1}{2}T(\\pmb{v})\n              =\\frac{1}{2}T\\left(\\begin{bmatrix}1\\\\1\\end{bmatrix}\\right)-\\frac{1}{2}T\\left(\\begin{bmatrix}-1\\\\1\\end{bmatrix}\\right)=\\begin{bmatrix}2\\\\3\\\\\\end{bmatrix}\\\\\n T(\\pmb{e}_2)&amp;=\\frac{1}{2}T(\\pmb{u})+\\frac{1}{2}T(\\pmb{v})\n              =\\frac{1}{2}T\\left(\\begin{bmatrix}1\\\\1\\end{bmatrix}\\right)+\\frac{1}{2}T\\left(\\begin{bmatrix}-1\\\\1\\end{bmatrix}\\right)=\\begin{bmatrix}1\\\\1\\end{bmatrix}\n \\end{align}\\]</span></p></li>\n<li><p>We know that the standard matrix is <span class=\"math display\">\\[A=[T(\\pmb{e}_1)\\quad\\dots\\quad T(\\pmb{e}_n)]\\]</span> as we have <span class=\"math inline\">\\(T(\\pmb{e}_1)\\)</span> and <span class=\"math inline\">\\(T(\\pmb{e}_2)\\)</span> now, the standard matrix <span class=\"math inline\">\\(A\\)</span> is <span class=\"math inline\">\\(\\begin{bmatrix}2 &amp;1\\\\3 &amp;1\\end{bmatrix}\\)</span>. It is a <span class=\"math inline\">\\(2\\times 2\\)</span> matrix. The inverse formula is (see Theorem 4 in Section 2.2 The Inverse of A Matrix) <span class=\"math display\">\\[\\begin{align}\n A&amp;=\\begin{bmatrix}a &amp;b\\\\c &amp;d\\end{bmatrix}\\\\\n A^{-1}&amp;=\\frac{1}{ad-bc}\\begin{bmatrix}d &amp;-b\\\\-c &amp;a\\end{bmatrix}\\\\\n \\end{align}\\]</span> This yields <span class=\"math inline\">\\(A^{-1}=\\begin{bmatrix}-1 &amp;1\\\\3 &amp;-2\\end{bmatrix}\\)</span>.</p></li>\n<li><p>This is the case of <span class=\"math inline\">\\(A\\pmb x=\\pmb b\\)</span> and we need to solve it. The augmented matrix here is <span class=\"math inline\">\\(\\begin{bmatrix}2 &amp;1 &amp;7\\\\3 &amp;1 &amp;9\\end{bmatrix}\\)</span>. After row reduction, it becomes <span class=\"math inline\">\\(\\begin{bmatrix}0 &amp;1 &amp;3\\\\1 &amp;0 &amp;2\\end{bmatrix}\\)</span>. This has unique solution <span class=\"math inline\">\\(\\pmb x=\\begin{bmatrix}2\\\\3\\\\\\end{bmatrix}\\)</span>.</p></li>\n</ol>\n<p><strong>📝Notes:</strong>The students should remeber the inverse formula of <span class=\"math inline\">\\(2\\times 2\\)</span> matrix!</p>\n\n</details>\n<h3 id=\"problem-9-10-points\">Problem 9 (10 points)</h3>\n<p><img src=\"MA265-Spring2023-Midterm1-P9-1.png\" style=\"width:90.0%;height:90.0%\" /> <img src=\"MA265-Spring2023-Midterm1-P9-2.png\" style=\"width:90.0%;height:90.0%\" /> <img src=\"MA265-Spring2023-Midterm1-P9-3.png\" style=\"width:90.0%;height:90.0%\" /> <img src=\"MA265-Spring2023-Midterm1-P9-4.png\" style=\"width:90.0%;height:90.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 9 Solution</p>\n</summary>\n<p>This problem is also very similar to Problem 9 of Fall 2022 Midterm I. The solution follows the same steps.</p>\n<ol type=\"1\">\n<li><p>The augmented matrix and the row reduction results can be seen below <span class=\"math display\">\\[\n\\begin{bmatrix}1 &amp;0 &amp;-1 &amp;1\\\\1 &amp;1 &amp;h-1 &amp;3\\\\0 &amp;2 &amp;h^2-3 &amp;h+1\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;-1 &amp;1\\\\0 &amp;1 &amp;h &amp;2\\\\0 &amp;2 &amp;h^2-3 &amp;h+1\\\\\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;-1 &amp;1\\\\0 &amp;1 &amp;h &amp;2\\\\0 &amp;0 &amp;a^2-2h-3 &amp;h-3\\\\\\end{bmatrix}\n\\]</span> The pivots are <span class=\"math inline\">\\(1\\)</span>, <span class=\"math inline\">\\(1\\)</span>, and <span class=\"math inline\">\\(a^2-2h-3\\)</span>.</p></li>\n<li><p>When <span class=\"math inline\">\\(h=3\\)</span>, the last row entries become all zeros. This system has an infinite number of solutions.</p></li>\n<li><p>If <span class=\"math inline\">\\(h=-1\\)</span>, last row becomes <span class=\"math inline\">\\([0\\,0\\,0\\,-4]\\)</span>. Now the system is inconsistent and has no solution.</p></li>\n<li><p>If <span class=\"math inline\">\\(h\\)</span> is not 3 or -1, last row becomes <span class=\"math inline\">\\([0\\,0\\,h+1\\,1]\\)</span>. We get <span class=\"math inline\">\\(z=\\frac{1}{h+1}\\)</span>. The system has a unique solution.</p></li>\n</ol>\n\n</details>\n<h3 id=\"problem-10-10-points\">Problem 10 (10 points)</h3>\n<p><img src=\"MA265-Spring2023-Midterm1-P10-1.png\" style=\"width:80.0%;height:80.0%\" /> <img src=\"MA265-Spring2023-Midterm1-P10-2.png\" style=\"width:80.0%;height:80.0%\" /> <img src=\"MA265-Spring2023-Midterm1-P10-3.png\" style=\"width:80.0%;height:80.0%\" /></p>\n<details class=\"note success\"><summary><p>Problem 10 Solution</p>\n</summary>\n<p>This problem is also very similar to Problem 10 of Fall 2022 Midterm I. The solution follows the same steps.</p>\n<ol type=\"1\">\n<li>The row reduction is completed next. The symbol ~ before a matrix indicates that the matrix is row equivalent to the preceding matrix.</li>\n</ol>\n<p><span class=\"math display\">\\[\n\\begin{bmatrix}1 &amp;0 &amp;2 &amp;4 &amp;11\\\\1 &amp;0 &amp;5 &amp;13 &amp;20\\\\2 &amp;0 &amp;4 &amp;12 &amp;22\\\\3 &amp;0 &amp;2 &amp;0 &amp;21\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;2 &amp;4 &amp;11\\\\0 &amp;0 &amp;3 &amp;9 &amp;9\\\\1 &amp;0 &amp;2 &amp;6 &amp;11\\\\0 &amp;0 &amp;-4 &amp;-12 &amp;-12\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;2 &amp;4 &amp;11\\\\0 &amp;0 &amp;1 &amp;3 &amp;3\\\\0 &amp;0 &amp;0 &amp;2 &amp;0\\\\0 &amp;0 &amp;1 &amp;3 &amp;3\\end{bmatrix}\n\\]</span> <span class=\"math display\">\\[\n\\sim\\begin{bmatrix}1 &amp;0 &amp;2 &amp;4 &amp;11\\\\0 &amp;0 &amp;1 &amp;3 &amp;3\\\\0 &amp;0 &amp;0 &amp;1 &amp;0\\\\0 &amp;0 &amp;0 &amp;0 &amp;0\\end{bmatrix}\\sim\n\\begin{bmatrix}1 &amp;0 &amp;2 &amp;4 &amp;11\\\\0 &amp;0 &amp;1 &amp;0 &amp;3\\\\0 &amp;0 &amp;0 &amp;1 &amp;0\\\\0 &amp;0 &amp;0 &amp;0 &amp;0\\end{bmatrix}\\sim\n\\begin{bmatrix}\\color{fuchsia}{1} &amp;0 &amp;0 &amp;0 &amp;5\\\\0 &amp;0 &amp;\\color{fuchsia}{1} &amp;0 &amp;3\\\\0 &amp;0 &amp;0 &amp;\\color{fuchsia}{1} &amp;0\\\\0 &amp;0 &amp;0 &amp;0 &amp;0\\end{bmatrix}\n\\]</span></p>\n<ol start=\"2\" type=\"1\">\n<li><p>Referring to Theorem 12 Section 2.8 Matrix Algebra and the Warning message below that (quoted below)</p>\n<blockquote>\n<p><em><strong>Warning:</strong></em> Be careful to use <em>pivot columns of <span class=\"math inline\">\\(A\\)</span> itself</em> for the basis of Col <span class=\"math inline\">\\(A\\)</span>. Thecolumns of an echelon form <span class=\"math inline\">\\(B\\)</span> are often not in the column space of <span class=\"math inline\">\\(A\\)</span>.</p>\n</blockquote>\n<p>So the pivot columns of the original matrix <span class=\"math inline\">\\(A\\)</span> form a basis for the column space of <span class=\"math inline\">\\(A\\)</span>. The basis is the set of columns 1, 3, and 4. <span class=\"math display\">\\[\n \\begin{Bmatrix}\\begin{bmatrix}1\\\\1\\\\2\\\\3\\end{bmatrix},\n \\begin{bmatrix}2\\\\5\\\\4\\\\2\\end{bmatrix},\n \\begin{bmatrix}4\\\\13\\\\12\\\\0\\end{bmatrix}\\end{Bmatrix}\n \\]</span></p></li>\n<li><p>Referring to Section 2.8 Subspaces of <span class=\"math inline\">\\(\\mathbb R^n\\)</span>, by definition the null space of a matrix <span class=\"math inline\">\\(A\\)</span> is the set Nul <span class=\"math inline\">\\(A\\)</span> of all solutions of the homogeneous equation <span class=\"math inline\">\\(A\\pmb{x}=\\pmb{0}\\)</span>. Also \"A basis for a subspace <span class=\"math inline\">\\(H\\)</span> of <span class=\"math inline\">\\(\\mathbb R^n\\)</span> is a linearly independent set in <span class=\"math inline\">\\(H\\)</span> that spans <span class=\"math inline\">\\(H\\)</span>\".</p>\n<p>Now write the solution of <span class=\"math inline\">\\(A\\mathrm x=\\pmb 0\\)</span> in parametric vector form <span class=\"math display\">\\[[A\\;\\pmb 0]\\sim\\begin{bmatrix}\\color{fuchsia}{1} &amp;0 &amp;0 &amp;0 &amp;5 &amp;0\\\\0 &amp;0 &amp;\\color{fuchsia}{1} &amp;0 &amp;3 &amp;0\\\\0 &amp;0 &amp;0 &amp;\\color{fuchsia}{1} &amp;0 &amp;0\\\\0 &amp;0 &amp;0 &amp;0 &amp;0 &amp;0\\end{bmatrix}\\]</span></p>\n<p>The general solution is <span class=\"math inline\">\\(x_1=-5x_5\\)</span>, <span class=\"math inline\">\\(x_3=-3x_5\\)</span>, <span class=\"math inline\">\\(x_4=0\\)</span>, with <span class=\"math inline\">\\(x_2\\)</span> and <span class=\"math inline\">\\(x_5\\)</span> free. This can be written as <span class=\"math display\">\\[\n \\begin{bmatrix}x_1\\\\x_2\\\\x_3\\\\x_4\\\\x_5\\end{bmatrix}=\n \\begin{bmatrix}-5x_5\\\\x_2\\\\-3x_5\\\\0\\\\x_5\\end{bmatrix}=\n x_4\\begin{bmatrix}0\\\\1\\\\0\\\\0\\\\0\\end{bmatrix}+\n x_5\\begin{bmatrix}-5\\\\0\\\\-3\\\\0\\\\1\\end{bmatrix}\n \\]</span> So the basis for Nul <span class=\"math inline\">\\(A\\)</span> is <span class=\"math display\">\\[\n \\begin{Bmatrix}\\begin{bmatrix}0\\\\1\\\\0\\\\0\\\\0\\end{bmatrix},\n \\begin{bmatrix}-5\\\\0\\\\-3\\\\0\\\\1\\end{bmatrix}\\end{Bmatrix}\n \\]</span></p></li>\n</ol>\n\n</details>\n<h2 id=\"summary\">Summary</h2>\n<p>Here is the table listing the key knowledge points for each problem in this exam:</p>\n<table>\n<colgroup>\n<col style=\"width: 32%\" />\n<col style=\"width: 68%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Problem #</th>\n<th style=\"text-align: center;\">Points of Knowledge</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Determinant and its Properties</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">2</td>\n<td style=\"text-align: center;\">Rank and Dimension of the Null Space of a Matrix, Pivot Columns, Row Reduction Operation</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">3</td>\n<td style=\"text-align: center;\">Linear Transformation, Onto <span class=\"math inline\">\\(\\mathbb R^m\\)</span>, Linear System Consistency</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">4</td>\n<td style=\"text-align: center;\">Homogeneous Linear Systems, One-to-One Mapping Linear Transformation, the Column Space of the Matrix</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">5</td>\n<td style=\"text-align: center;\">Linear Dependency, Invertible Matrix, Determinant, Rank and Dimension of the Null Space of Matrix</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">6</td>\n<td style=\"text-align: center;\">The Adjugate of Matrix, The (<span class=\"math inline\">\\(i,j\\)</span>)-cofactor of Matrix</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">7</td>\n<td style=\"text-align: center;\">Linear Independency, Vector Set Spanning Space <span class=\"math inline\">\\(\\mathbb R^n\\)</span></td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">8</td>\n<td style=\"text-align: center;\">Linear Transformation Properties, Standard Matrix for a Linear Transformation</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">9</td>\n<td style=\"text-align: center;\">Row Echelon Form, Linear System Solution Set and Consistency</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">10</td>\n<td style=\"text-align: center;\">Reduced Row Echelon Form, Basis for the Column Vector Space and the Null Space</td>\n</tr>\n</tbody>\n</table>\n<p>As can be seen, it has a good coverage of the topics of the specified sections from the textbook. Students should carefully review those to prepare for this and similar exams.</p>\n","categories":["Study Notes"],"tags":["Linear Algebra","Machine Learning"]},{"title":"Implement Textbook RSA in Python","url":"/en/2022/01/22/Python-Textbook-RSA/","content":"<p>RSA encryption algorithm is one of the core technologies of modern public-key cryptography and is widely used on the Internet. As a classical algorithm of public-key cryptography, the programming implementation of textbook RSA can help us quickly grasp its mathematical mechanism and design ideas, and accumulate important experience in the software implementation of cryptography. Here is a detailed example of textbook RSA implementation in Python 3.8 programming environment.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>Random numbers should not be generated with a method chosen at random.</strong><br> <strong>— <em>Donald Knuth</em>（American computer scientist, mathematician, and professor emeritus at Stanford University, the 1974 recipient of the ACM Turing Award, often called the \"father of the analysis of algorithms\"）</strong></p>\n</div>\n<h3 id=\"generating-large-primes\">Generating Large Primes</h3>\n<p>The security of the RSA encryption algorithm is built on the mathematical challenge of factoring the product of two large prime numbers. The first step in constructing the RSA encryption system is to generate two large prime numbers <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span>, and calculate the modulus <span class=\"math inline\">\\(N=pq\\)</span>. <span class=\"math inline\">\\(N\\)</span> is the length of the RSA key, the larger the more secure. Nowadays, practical systems require the key length to be no less than 2048 bits, with corresponding <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> about 1024 bits each.</p>\n<p>A general effectiveness method for generating such large random prime numbers is a probability-based randomization algorithm, which proceeds as follows:</p>\n<ol type=\"1\">\n<li>Pre-select random numbers of given bit length</li>\n<li>Do a primality test with small prime numbers (<a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Eratosthenes</a>)\n<ul>\n<li>If it passes, continue to the third step</li>\n<li>If it fails, return to the first step</li>\n</ul></li>\n<li>Perform advanced prime test (<a href=\"https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test\">Miller-Rabin algorithm</a>)\n<ul>\n<li>If it passes, output the presumed prime numbers</li>\n<li>If it fails, return to the first step</li>\n</ul></li>\n</ol>\n<p>In this software implementation, the first step can generate odd numbers directly. Also for demonstration purposes, the second step uses the first 50 prime numbers greater than 2 for the basic primality test. The whole process is shown in the following flowchart.</p>\n<p><img src=\"finding-prime-en.jpg\" style=\"width:40.0%;height:40.0%\" /></p>\n<p>For the first step, Python function programming requires importing the library function <code>randrange()</code> from the <code>random</code> library. The function uses the input number of bits n in the exponents of 2, which specify the start and end values of <code>randrange()</code>. It also sets the step size to 2 to ensure that only n-bit random odd values are returned.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_n_bit_odd</span>(<span class=\"params\">n: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;Generate a random odd number in the range [2**(n-1)+1, 2**n-1]&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> n &gt; <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> randrange(<span class=\"number\">2</span> ** (n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>, <span class=\"number\">2</span> ** n, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>The code for the second step is simple. It defines an array with elements of 50 prime numbers after 2, then uses a double loop in the function to implement the basic primality test. The inner <code>for</code> loop runs the test with the elements of the prime array one by one. It aborts back to the outer loop immediately upon failure, from there it calls the function in the first step to generate the next candidate odd number and test again.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_lowlevel_prime</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Generate a prime candidate not divisible by first primes&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Obtain a random odd number</span></span><br><span class=\"line\">        c = generate_n_bit_odd(n)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Test divisibility by pre-generated primes</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> divisor <span class=\"keyword\">in</span> first_50_primes:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> c % divisor == <span class=\"number\">0</span> <span class=\"keyword\">and</span> divisor ** <span class=\"number\">2</span> &lt;= c:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># The for loop did not encounter a break statement,</span></span><br><span class=\"line\">            <span class=\"comment\"># so it passes the low-level primality test.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> c</span><br></pre></td></tr></table></figure>\n<p>The Miller-Rabin primality test<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a> in the third step is a widely used method for testing prime numbers. It uses a probabilistic algorithm to determine whether a given number is a composite or possibly a prime number. Although also based on <a href=\"https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\">Fermat's little theorem</a>, the Miller-Rabin primality test is much more efficient than the Fermat primality test. Before showing the Python implementation of the Miller-Rabin prime test, a brief description of how it works is given here.</p>\n<p>By Fermat's little theorem, for a prime <span class=\"math inline\">\\(n\\)</span>, if the integer <span class=\"math inline\">\\(a\\)</span> is not a multiple of <span class=\"math inline\">\\(n\\)</span>, then we have <span class=\"math inline\">\\(a^{n-1}\\equiv 1\\pmod n\\)</span>. Therefore if <span class=\"math inline\">\\(n&gt;2\\)</span>, <span class=\"math inline\">\\(n-1\\)</span> is an even number and must be expressed in the form <span class=\"math inline\">\\(2^{s}*d\\)</span>, where both <span class=\"math inline\">\\(s\\)</span> and <span class=\"math inline\">\\(d\\)</span> are positive integers and <span class=\"math inline\">\\(d\\)</span> is odd. This yields <span class=\"math display\">\\[a^{2^{s}*d}\\equiv 1\\pmod n\\]</span> If we keep taking the square root of the left side of the above equation and then modulo it, we will always get <span class=\"math inline\">\\(1\\)</span> or <span class=\"math inline\">\\(-1\\)</span><a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a>. If we get <span class=\"math inline\">\\(1\\)</span>, it means that the following equation ② holds; if we never get <span class=\"math inline\">\\(1\\)</span>, then equation ① holds: <span class=\"math display\">\\[a^{d}\\equiv 1{\\pmod {n}}{\\text{ ①}}\\]</span> <span class=\"math display\">\\[a^{2^{r}d}\\equiv -1{\\pmod {n}}{\\text{ ②}}\\]</span> where <span class=\"math inline\">\\(r\\)</span> is some integer that lies in the interval <span class=\"math inline\">\\([0, s-1]\\)</span>. So, if <span class=\"math inline\">\\(n\\)</span> is a prime number greater than <span class=\"math inline\">\\(2\\)</span>, there must be either ① or ② that holds. The <u>conditional statement</u> of this law is also true, i.e.** if we can find a <span class=\"math inline\">\\(\\pmb{a}\\)</span> such that for any <span class=\"math inline\">\\(\\pmb{0\\leq r\\leq s-1}\\)</span> the following two equations are satisfied: <span class=\"math display\">\\[\\pmb{a^{d}\\not \\equiv 1\\pmod n}\\]</span> <span class=\"math display\">\\[\\pmb{a^{2^{r}d}\\not \\equiv -1\\pmod n}\\]</span> Then <span class=\"math inline\">\\(\\pmb{n}\\)</span> must not be a prime number**. This is the mathematical concept of the Miller-Rabin primality test. For the number <span class=\"math inline\">\\(n\\)</span> to be tested, after calculating the values of <span class=\"math inline\">\\(s\\)</span> and <span class=\"math inline\">\\(d\\)</span>, the base <span class=\"math inline\">\\(a\\)</span> is chosen randomly and the above two equations are tested iteratively. If neither holds, <span class=\"math inline\">\\(n\\)</span> is a composite number, otherwise, <span class=\"math inline\">\\(n\\)</span> may be a prime number. Repeating this process, the probability of <span class=\"math inline\">\\(n\\)</span> being a true prime gets larger and larger. Calculations show that after <span class=\"math inline\">\\(k\\)</span> rounds of testing, the maximum error rate of the Miller-Rabin primality test does not exceed <span class=\"math inline\">\\(4^{-k}\\)</span>.</p>\n<p>The Miller-Rabin primality test function implemented in Python is as follows, with the variables <code>n,s,d,k</code> in the code corresponding to the above description.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">miller_rabin_primality_check</span>(<span class=\"params\">n, k=<span class=\"number\">20</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;Miller-Rabin Primality Test with a specified round of test </span></span><br><span class=\"line\"><span class=\"string\">    Input:</span></span><br><span class=\"line\"><span class=\"string\">        n - n &gt; 3, an odd integer to be tested for primality</span></span><br><span class=\"line\"><span class=\"string\">        k - the number of rounds of testing to perform</span></span><br><span class=\"line\"><span class=\"string\">    Output:</span></span><br><span class=\"line\"><span class=\"string\">        True  - passed (n is a strong probable prime)</span></span><br><span class=\"line\"><span class=\"string\">        False - failed (n is a composite)&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># For a given odd integer n &gt; 3, write n as (2^s)*d+1,</span></span><br><span class=\"line\">    <span class=\"comment\"># where s and d are positive integers and d is odd.</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> n &gt; <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    s, d = <span class=\"number\">0</span>, n - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> d % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        d &gt;&gt;= <span class=\"number\">1</span></span><br><span class=\"line\">        s += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k):</span><br><span class=\"line\">        a = randrange(<span class=\"number\">2</span>, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">        x = <span class=\"built_in\">pow</span>(a, d, n)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> x == <span class=\"number\">1</span> <span class=\"keyword\">or</span> x == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(s):</span><br><span class=\"line\">            x = <span class=\"built_in\">pow</span>(x, <span class=\"number\">2</span>, n)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># The for loop did not encounter a break statement,</span></span><br><span class=\"line\">            <span class=\"comment\"># so it fails the test, it must be a composite</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Passed the test, it is a strong probable prime</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<p>Putting all of the above together, the whole process can be wrapped into the following function, where the input of the function is the number of bits and the output is a presumed random large prime number.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_random_prime</span>(<span class=\"params\">num_bits</span>):</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        pp = get_lowlevel_prime(num_bits)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> miller_rabin_primality_check(pp):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pp</span><br></pre></td></tr></table></figure>\n<h3 id=\"utility-functions\">Utility Functions</h3>\n<ol type=\"1\">\n<li><p><strong>Greatest Common Divisor (GCD) <code>gcd(a,b)</code> and Least Common Multiple <code>lcm(a,b)</code>:</strong><br />\nThe RSA encryption algorithm needs to calculate the Carmichael function <span class=\"math inline\">\\(\\lambda(N)\\)</span> of modulus <span class=\"math inline\">\\(N\\)</span>, with the formula <span class=\"math inline\">\\(\\lambda(pq)= \\operatorname{lcm}(p - 1, q - 1)\\)</span>, where the least common multiple function is used. The relationship between the least common multiple and the greatest common divisor is: <span class=\"math display\">\\[\\operatorname{lcm}(a,b)={\\frac{(a\\cdot b)}{\\gcd(a,b)}}\\]</span> There is an efficient Euclidean algorithm for finding the greatest common divisor, which is based on the principle that the greatest common divisor of two integers is equal to the greatest common divisor of the smaller number and the remainder of the division of the two numbers. The specific implementation of Euclid's algorithm can be done iteratively or recursively. The iterative implementation of the maximum convention function is applied here, and the Python code for the two functions is as follows:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">gcd</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;Computes the Great Common Divisor using the Euclid&#x27;s algorithm&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> b:</span><br><span class=\"line\">        a, b = b, a % b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lcm</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Computes the Lowest Common Multiple using the GCD method.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a // gcd(a, b) * b</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>Extended Euclidean Algorithm <code>exgcd(a,b)</code> and Modular Multiplicative Inverse <code>invmod(e,m)</code>:</strong><br />\nThe RSA key pair satisfies the equation <span class=\"math inline\">\\((d⋅e)\\bmod \\lambda(N)=1\\)</span>, i.e., the two are mutually modular multiplicative inverses with respect to the modulus <span class=\"math inline\">\\(\\lambda(N)\\)</span>. The extended Euclidean algorithm can be applied to solve the modular multiplicative inverse <span class=\"math inline\">\\(d\\)</span> of the public key exponent <span class=\"math inline\">\\(e\\)</span> quickly. The principle of the algorithm is that given integers <span class=\"math inline\">\\(a,b\\)</span>, it is possible to find integers <span class=\"math inline\">\\(x,y\\)</span> (one of which is likely to be negative) while finding the greatest common divisor of <span class=\"math inline\">\\(a,b\\)</span> such that they satisfy Bézout's identity: <span class=\"math display\">\\[a⋅x+b⋅y=\\gcd(a, b)\\]</span> substituted into the parameters <span class=\"math inline\">\\(a=e\\)</span> and <span class=\"math inline\">\\(b=m=\\lambda(N)\\)</span> of the RSA encryption algorithm, and since <span class=\"math inline\">\\(e\\)</span> and <span class=\"math inline\">\\(\\lambda(N)\\)</span> are coprime, we can get: <span class=\"math display\">\\[e⋅x+m⋅y=1\\]</span> the solved <span class=\"math inline\">\\(x\\)</span> is the modulo multiplicative inverse <span class=\"math inline\">\\(d\\)</span> of <span class=\"math inline\">\\(e\\)</span>. The Python implementations of these two functions are given below:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exgcd</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Extended Euclidean Algorithm that can give back all gcd, s, t </span></span><br><span class=\"line\"><span class=\"string\">    such that they can make Bézout&#x27;s identity: gcd(a,b) = a*s + b*t</span></span><br><span class=\"line\"><span class=\"string\">    Return: (gcd, s, t) as tuple&quot;&quot;&quot;</span></span><br><span class=\"line\">    old_s, s = <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    old_t, t = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> b:</span><br><span class=\"line\">        q = a // b</span><br><span class=\"line\">        s, old_s = old_s - q * s, s</span><br><span class=\"line\">        t, old_t = old_t - q * t, t</span><br><span class=\"line\">        a, b = b, a % b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a, old_s, old_t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">invmod</span>(<span class=\"params\">e, m</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Find out the modular multiplicative inverse x of the input integer</span></span><br><span class=\"line\"><span class=\"string\">    e with respect to the modulus m. Return the minimum positive x&quot;&quot;&quot;</span></span><br><span class=\"line\">    g, x, y = exgcd(e, m)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> g == <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Now we have e*x + m*y = g = 1, so e*x ≡ 1 (mod m).</span></span><br><span class=\"line\">    <span class=\"comment\"># The modular multiplicative inverse of e is x.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        x += m</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></figure> Similarly, an iterative approach is applied here to implement the extended Euclidean algorithm, with the modular inverse multiplicative function calling the former.</p></li>\n</ol>\n<h3 id=\"implementing-rsa-class\">Implementing RSA Class</h3>\n<div class=\"note danger\"><p><strong>Note:</strong> Textbook RSA has inherent security vulnerabilities. The reference implementation in the Python language given here is for learning and demonstration purposes only, by no means to be used in actual applications. Otherwise, it may cause serious information security incidents. Keep this in mind!</p>\n</div>\n<p>Based on the object-oriented programming idea, it can be designed to encapsulate the RSA keys and all corresponding operations into a Python class. The decryption and signature generation of the RSA class are each implemented in two ways, regular and fast. The fast method is based on the <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\">Chinese Remainder Theorem</a> and Fermat's Little Theorem. The following describes the implementation details of the RSA class.</p>\n<ol type=\"1\">\n<li><p><strong>Object Initialization Method</strong><br />\nInitialization method <code>__init__()</code> has the user-defined paramaters with default values shown as below：</p>\n<ul>\n<li>Key bit-length (<span class=\"math inline\">\\(N\\)</span>)：2048</li>\n<li>Public exponent (<span class=\"math inline\">\\(e\\)</span>)：65537</li>\n<li>Fast decryption or signature generation：False</li>\n</ul>\n<p>This method internally calls the <code>get_random_prime()</code> function to generate two large random prime numbers <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> that are about half the bit-length of the key. It then calculates their Carmichael function and verifies that the result and <span class=\"math inline\">\\(e\\)</span> are coprime. If not, it repeats the process till found. Thereafter it computes the modulus <span class=\"math inline\">\\(N\\)</span> and uses the modular multiplicative inverse function <code>invmod()</code> to determine the private exponent <span class=\"math inline\">\\(d\\)</span>. If a fast decryption or signature generation function is required, three additional values are computed as follows: <span class=\"math display\">\\[\\begin{align}\nd_P&amp;=d\\bmod (p-1)\\\\\nd_Q&amp;=d\\bmod (q-1)\\\\\nq_{\\text{inv}}&amp;=q^{-1}\\pmod {p}\n\\end{align}\\]</span></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">RSA_DEFAULT_EXPONENT = <span class=\"number\">65537</span></span><br><span class=\"line\">RSA_DEFAULT_MODULUS_LEN = <span class=\"number\">2048</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RSA</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Implements the RSA public key encryption/decryption with default</span></span><br><span class=\"line\"><span class=\"string\">    exponent 65537 and default key size 2048&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, key_length=RSA_DEFAULT_MODULUS_LEN,</span></span><br><span class=\"line\"><span class=\"params\">                 exponent=RSA_DEFAULT_EXPONENT, fast_decrypt=<span class=\"literal\">False</span></span>):</span><br><span class=\"line\">        self.e = exponent</span><br><span class=\"line\">        self.fast = fast_decrypt</span><br><span class=\"line\">        t = <span class=\"number\">0</span></span><br><span class=\"line\">        p = q = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> gcd(self.e, t) != <span class=\"number\">1</span>:</span><br><span class=\"line\">            p = get_random_prime(key_length // <span class=\"number\">2</span>)</span><br><span class=\"line\">            q = get_random_prime(key_length // <span class=\"number\">2</span>)</span><br><span class=\"line\">            t = lcm(p - <span class=\"number\">1</span>, q - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.n = p * q</span><br><span class=\"line\">        self.d = invmod(self.e, t)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fast_decrypt):</span><br><span class=\"line\">            self.p, self.q = p, q</span><br><span class=\"line\">            self.d_P = self.d % (p - <span class=\"number\">1</span>)</span><br><span class=\"line\">            self.d_Q = self.d % (q - <span class=\"number\">1</span>)</span><br><span class=\"line\">            self.q_Inv = invmod(q, p)</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>Encryption and Decryption Methods</strong><br />\nRSA encryption and regular decryption formulas are <span class=\"math display\">\\[\\begin{align}\nc\\equiv m^e\\pmod N\\\\\nm\\equiv c^d\\pmod N\n\\end{align}\\]</span> Python built-in <code>pow()</code> function supports modular exponentiation. The above two can be achieved by simply doing the corresponding integer to byte sequence conversions and then calling pow() with the public or private key exponent:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">self, binary_data: <span class=\"built_in\">bytes</span></span>):</span><br><span class=\"line\">    int_data = uint_from_bytes(binary_data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(int_data, self.e, self.n)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">self, encrypted_int_data: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    int_data = <span class=\"built_in\">pow</span>(encrypted_int_data, self.d, self.n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uint_to_bytes(int_data)</span><br></pre></td></tr></table></figure> For fast descryption, a few extra steps are needed: <span class=\"math display\">\\[\\begin{align}\nm_1&amp;=c^{d_P}\\pmod {p}\\tag{1}\\label{eq1}\\\\\nm_2&amp;=c^{d_Q}\\pmod {q}\\tag{2}\\label{eq2}\\\\\nh&amp;=q_{\\text{inv}}(m_1-m_2)\\pmod {p}\\tag{3}\\label{eq3}\\\\\nm&amp;=m_{2}+hq\\pmod {pq}\\tag{4}\\label{eq4}\n\\end{align}\\]</span> In practice, if <span class=\"math inline\">\\(m_1-m_2&lt;0\\)</span> in the step <span class=\"math inline\">\\((3)\\)</span>, <span class=\"math inline\">\\(p\\)</span> needs to be added to adjust to a positive number. It can also be seen that the acceleration ratio would theoretically be close to <span class=\"math inline\">\\(4\\)</span> because the fast decryption method decreases the modulus and exponent by roughly half the order. Considering the additional computational steps, the actual speedup ratio estimate is subtracted by a correction <span class=\"math inline\">\\(\\varepsilon\\)</span>, noted as <span class=\"math inline\">\\(4-\\varepsilon\\)</span>. The code of the fast decryption function is as follows:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt_fast</span>(<span class=\"params\">self, encrypted_int_data: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"comment\"># Use Chinese Remaider Theorem + Fermat&#x27;s Little Theorem to</span></span><br><span class=\"line\">    <span class=\"comment\"># do fast RSA description</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> self.fast == <span class=\"literal\">True</span></span><br><span class=\"line\">    m1 = <span class=\"built_in\">pow</span>(encrypted_int_data, self.d_P, self.p)</span><br><span class=\"line\">    m2 = <span class=\"built_in\">pow</span>(encrypted_int_data, self.d_Q, self.q)</span><br><span class=\"line\">    t = m1 - m2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> t &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        t += self.p</span><br><span class=\"line\">    h = (self.q_Inv * t) % self.p</span><br><span class=\"line\">    m = (m2 + h * self.q) % self.n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uint_to_bytes(m)</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>Signature Generation and Verification Methods</strong><br />\nThe RSA digital signature generation and verification methods are very similar to encryption and regular decryption functions, except that the public and private exponents are used in reverse. The signature generation uses the private exponent, while the verification method uses the public key exponent. The implementation of fast signature generation is the same as the fast decryption steps, but the input and output data are converted and adjusted accordingly. The specific implementations are presented below：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_signature</span>(<span class=\"params\">self, encoded_msg_digest: <span class=\"built_in\">bytes</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Use RSA private key to generate Digital Signature for given</span></span><br><span class=\"line\"><span class=\"string\">    encoded message digest&quot;&quot;&quot;</span></span><br><span class=\"line\">    int_data = uint_from_bytes(encoded_msg_digest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(int_data, self.d, self.n)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_signature_fast</span>(<span class=\"params\">self, encoded_msg_digest: <span class=\"built_in\">bytes</span></span>):</span><br><span class=\"line\">    <span class=\"comment\"># Use Chinese Remaider Theorem + Fermat&#x27;s Little Theorem to</span></span><br><span class=\"line\">    <span class=\"comment\"># do fast RSA signature generation</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> self.fast == <span class=\"literal\">True</span></span><br><span class=\"line\">    int_data = uint_from_bytes(encoded_msg_digest)</span><br><span class=\"line\">    s1 = <span class=\"built_in\">pow</span>(int_data, self.d_P, self.p)</span><br><span class=\"line\">    s2 = <span class=\"built_in\">pow</span>(int_data, self.d_Q, self.q)</span><br><span class=\"line\">    t = s1 - s2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> t &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        t += self.p</span><br><span class=\"line\">    h = (self.q_Inv * t) % self.p</span><br><span class=\"line\">    s = (s2 + h * self.q) % self.n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">verify_signature</span>(<span class=\"params\">self, digital_signature: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Use RSA public key to decrypt given Digital Signature&quot;&quot;&quot;</span></span><br><span class=\"line\">    int_data = <span class=\"built_in\">pow</span>(digital_signature, self.e, self.n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uint_to_bytes(int_data)</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<h3 id=\"functional-tests\">Functional Tests</h3>\n<p>Once the RSA class is completed, it is ready for testing. To test the basic encryption and decryption functions, first initialize an RSA object with the following parameters</p>\n<ul>\n<li>Key length (modulo <span class=\"math inline\">\\(N\\)</span>): 512 bits</li>\n<li>Public exponent (<span class=\"math inline\">\\(e\\)</span>): 3</li>\n<li>Fast decryption or signature generation: True</li>\n</ul>\n<p>Next, we can call the encryption method <code>encrypt()</code> of the RSA object instance to encrypt the input message, and then feed the ciphertext to the decryption method <code>decrypt()</code> and the fast decryption method <code>decrypt_fast()</code> respectively. We use the <code>assert</code> statement to compare the result with the original message. The code snippet is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---- Test RSA class ----</span></span><br><span class=\"line\">alice = RSA(<span class=\"number\">512</span>, <span class=\"number\">3</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\">msg = <span class=\"string\">b&#x27;Textbook RSA in Python&#x27;</span></span><br><span class=\"line\">ctxt = alice.encrypt(msg)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> alice.decrypt(ctxt) == msg</span><br><span class=\"line\"><span class=\"keyword\">assert</span> alice.decrypt_fast(ctxt) == msg</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;RSA message encryption/decryption test passes!&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Likewise, we can also test the signature methods. In this case, we need to add the following <code>import</code> statement to the beginning of the file</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> sha1</span><br></pre></td></tr></table></figure>\n<p>This allows us to generate the message digest with the library function <code>sha1()</code> and then call the <code>generate_signature()</code> and <code>generate_signature_fast()</code> methods of the RSA object instance to generate the signature, respectively. Both signatures are fed to the verify_signature()` function and the result should be consistent with the original message digest. This test code is shown below.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">mdg = sha1(msg).digest()</span><br><span class=\"line\">sign1 = alice.generate_signature(mdg)</span><br><span class=\"line\">sign2 = alice.generate_signature_fast(mdg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> alice.verify_signature(sign1) == mdg</span><br><span class=\"line\"><span class=\"keyword\">assert</span> alice.verify_signature(sign2) == mdg</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;RSA signature generation/verification test passes!&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>If no <code>AssertionError</code> is seen, we would get the following output, indicating that both the encryption and signature tests passed.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">RSA message encryption/decryption <span class=\"built_in\">test</span> passes!</span><br><span class=\"line\">RSA signature generation/verification <span class=\"built_in\">test</span> passes!</span><br></pre></td></tr></table></figure>\n<h3 id=\"performance-tests\">Performance Tests</h3>\n<p>Once the functional tests are passed, it is time to see how the performance of fast decryption is. We are interested in what speedup ratio we can achieve, which requires timing the execution of the code. For time measurements in Python programming, we have to import the functions <code>urandom()</code> and <code>timeit()</code> from the Python built-in libraries <code>os</code> and <code>timeit</code>, respectively:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> urandom</span><br><span class=\"line\"><span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> timeit</span><br></pre></td></tr></table></figure>\n<p><code>urandom()</code> is for generaring random bype sequence, while <code>timeit()</code> can time the execution of a given code segment. For the sake of convenience, the RSA decryption methods to be timed are first packed into two functions:</p>\n<ul>\n<li><code>decrypt_norm()</code> - Regular decryption method</li>\n<li><code>decrypt_fast()</code> - Fast descryption method</li>\n</ul>\n<p>Both use the <code>assert</code> statement to check the result, as shown in the code below:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt_norm</span>(<span class=\"params\">tester, ctxt: <span class=\"built_in\">bytes</span>, msg: <span class=\"built_in\">bytes</span></span>):</span><br><span class=\"line\">    ptxt = tester.decrypt(ctxt)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> ptxt == msg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt_fast</span>(<span class=\"params\">tester, ctxt: <span class=\"built_in\">bytes</span>, msg: <span class=\"built_in\">bytes</span></span>):</span><br><span class=\"line\">    ptxt = tester.decrypt_fast(ctxt)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> ptxt == msg</span><br></pre></td></tr></table></figure>\n<p>The time code sets up two nested <code>for</code> loops:</p>\n<ul>\n<li><p>The outer loop iterates over different key lengths <code>klen</code>, from 512 bits to 4096 bits in 5 levels, and the corresponding RSA object <code>obj</code> is initialized with:</p>\n<ul>\n<li>Key length (modular <span class=\"math inline\">\\(N\\)</span>): <code>klen</code></li>\n<li>Public exponent (<span class=\"math inline\">\\(e\\)</span>): 65537</li>\n<li>Fast decryption or signature generation: True</li>\n</ul>\n<p>The variable <code>rpt</code> is also set in the outer loop to be the square root of the key length, and the timing variables <code>t_n</code> and <code>t_f</code> are cleared to zeros.</p></li>\n<li><p>The inner layer also loops 5 times, each time executing the following operations:</p>\n<ul>\n<li>Call <code>urandom()</code> to generate a random sequence of bytes <code>mg</code> with bits half the length of the key</li>\n<li>Call <code>obj.encrypt()</code> to generate the ciphertext <code>ct</code></li>\n<li>call <code>timeit()</code> and enter the packing functions <code>decrypt_norm()</code> and <code>decrypt_fast()</code> with the decryption-related parameters <code>obj</code>, <code>ct</code> and <code>mg</code>, respectively, and set the number of executions to <code>rpt</code></li>\n<li>The return values of the <code>timeit()</code> function are stored cumulatively in <code>t_n</code> and <code>t_f</code></li>\n</ul></li>\n</ul>\n<p>At the end of each inner loop, the current key length, the mean value of the timing statistics, and the calculated speedup ratio <code>t_n/t_f</code> are printed. The actual program segment is printed below:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Start RSA fast decryption profiling...&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> klen <span class=\"keyword\">in</span> [<span class=\"number\">512</span>, <span class=\"number\">1024</span>, <span class=\"number\">2048</span>, <span class=\"number\">3072</span>, <span class=\"number\">4096</span>]:</span><br><span class=\"line\">    rpt = <span class=\"built_in\">int</span>(klen ** <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    obj = RSA(klen, <span class=\"number\">65537</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\">    t_n = t_f = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        mg = urandom(<span class=\"built_in\">int</span>(klen/<span class=\"number\">16</span>))</span><br><span class=\"line\">        ct = obj.encrypt(mg)</span><br><span class=\"line\">        t_n += timeit(<span class=\"keyword\">lambda</span>: decrypt_norm(obj, ct, mg), number=rpt)</span><br><span class=\"line\">        t_f += timeit(<span class=\"keyword\">lambda</span>: decrypt_fast(obj, ct, mg), number=rpt)      </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Key size %4d =&gt; norm %.4fs, fast %.4fs\\tSpeedup: %.2f&quot;</span></span><br><span class=\"line\">          % (klen, t_n/<span class=\"number\">5</span>/rpt, t_f/<span class=\"number\">5</span>/rpt, t_n/t_f))</span><br></pre></td></tr></table></figure>\n<p>Here are the results on a Macbook Pro laptop:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Start RSA fast decryption profiling...</span><br><span class=\"line\">Key size  512 =&gt; norm 0.0008s, fast 0.0003s  Speedup: 2.43</span><br><span class=\"line\">Key size 1024 =&gt; norm 0.0043s, fast 0.0015s  Speedup: 2.88</span><br><span class=\"line\">Key size 2048 =&gt; norm 0.0273s, fast 0.0085s  Speedup: 3.19</span><br><span class=\"line\">Key size 3072 =&gt; norm 0.0835s, fast 0.0240s  Speedup: 3.48</span><br><span class=\"line\">Key size 4096 =&gt; norm 0.1919s, fast 0.0543s  Speedup: 3.53</span><br></pre></td></tr></table></figure>\n<p>The test results confirm the effectiveness of the fast decryption method. As the key length increases, the computational intensity gradually increases and the running timeshare of the core decryption operation becomes more prominent, so the speedup ratio grows correspondingly. However, the final speedup ratio tends to a stable value of about 3.5, which is consistent with the upper bound of the theoretical estimate (<span class=\"math inline\">\\(4-\\varepsilon\\)</span>).</p>\n<p>The Python code implementation of the textbook RSA helps reinforce the basic number theory knowledge we have learned and also benefits us with an in-depth understanding of the RSA encryption algorithm. On this basis, we can also extend to experiment some RSA elementary attack and defense techniques to further master this key technology of public-key cryptography. For the complete program click here to download: <a href=\"textbook-rsa.py.gz\">textbook-rsa.py.gz</a></p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>Gary Lee Miller, a professor of computer science at Carnegie Mellon University, first proposed a deterministic algorithm based on the unproven generalized Riemann hypothesis. Later Professor Michael O. Rabin of the Hebrew University of Jerusalem, Israel, modified it to obtain an unconditional probabilistic algorithm.<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p>This is because it follows from <span class=\"math inline\">\\(x^2\\equiv 1\\pmod n\\)</span> that <span class=\"math inline\">\\((x-1)(x+1)=x^{2}-1\\equiv 0\\pmod n\\)</span>. Since <span class=\"math inline\">\\(n\\)</span> is a prime number, by <a href=\"https://en.wikipedia.org/wiki/Euclid%27s_lemma\">Euclid's Lemma</a>, it must divide either <span class=\"math inline\">\\(x- 1\\)</span> or <span class=\"math inline\">\\(x+1\\)</span>, so <span class=\"math inline\">\\(x\\bmod n\\)</span> must be <span class=\"math inline\">\\(1\\)</span> or <span class=\"math inline\">\\(-1\\)</span>.<a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Technical Know-how"],"tags":["Cryptography","Python Programming"]},{"title":"Build an Awesome Raspberry Pi NAS for Home Media Streaming","url":"/en/2021/12/29/RPi-NAS-Plex/","content":"<p>Network Attached Storage (NAS) provides data access to a heterogeneous group of clients over computer networks. As hard drive prices continue to drop, NAS devices have made their way into the homes of the masses. Leading brands in the SMB and home NAS market, such as Synology, have their products range in price from as low as ﹩300 to ﹩700 for the high models. But if you are a Raspberry Pi player, you can build a very nice home NAS and streaming service for only about half the cost of the lowest price.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>Knowledge obtained on the papers always feels shallow, must know this thing to practice.</strong><br> <strong>— <em>LU You</em> (Chinese historian and poet of the Southern Song Dynasty)</strong></p>\n</div>\n<p>This blog records the whole process of building a Raspberry Pi NAS and home media server, including project planning, system implementation, and performance review. It also covers some important experiences and lessons that could hopefully benefit anyone interested in this DIY project.</p>\n<h2 id=\"project-planning\">Project Planning</h2>\n<p><strong><a href=\"https://www.raspberrypi.com/products/raspberry-pi-4-model-b/\">Raspberry Pi 4B</a></strong> features an upgraded 1.8GHz Broadcom BCM2711（quad-core Cortex-A72）processor and onboard RAM up to 8GB. It includes two new USB 3.0 ports and a full-speed Gigabit Ethernet interface. The power supply is also updated to a USB-C connector. All these greatly improve system throughput and overall comprehensive performance, and we can use them to create a full-featured home NAS. <img src=\"RPi-4B.png\" style=\"width:65.0%;height:65.0%\" /></p>\n<p>For NAS system software, <strong><a href=\"https://www.openmediavault.org\">OpenMediaVault</a></strong> (OMV) is a complete NAS solution based on Debian Linux. It is a Linux rewrite of the well-known free and open-source NAS server system FreeNAS (based on FreeBSD). The salient features of OMV are</p>\n<ul>\n<li>Simple and easy-to-use out-of-the-box solution, no need for expert-level knowledge of computer networking and storage systems</li>\n<li>Available for x86-64 and ARM platforms with a full Web Administration interface</li>\n<li>Supports a variety of different protocols (SFTP、SMB/CIFS, NFS, etc.) for file storage access</li>\n<li>Can be controlled via SSH (if enabled), and provides Access Right Management for users and groups</li>\n</ul>\n<p>While primarily designed for home environments or small home offices, OMV's use is not limited to those scenarios. The system is built on a modular design. It can be easily extended with available plugins right after the installation of the base system. OMV is the NAS server system software we are looking for.</p>\n<p>The NAS system with media playback services provides an excellent audio/video-on-demand experience in a home network environment. <strong><a href=\"https://support.plex.tv/articles/categories/plex-media-server/\">Plex Media Server</a></strong> software integrates Internet media services (YouTube, Vimeo, TED, etc.) and local multimedia libraries to provide streaming media playback on users' various devices. The features of Plex for managing local libraries are</p>\n<ul>\n<li>Centralized management and easy sharing of a single library</li>\n<li>Web interface with media resource navigation, streaming playback</li>\n<li>Real-time saving and resuming of playback progress</li>\n<li>Multi-user support and hierarchical playback rights settings</li>\n</ul>\n<p>The Plex Media Server software itself is free and supports a wide range of operating systems, making it ideal for integration with home NAS.</p>\n<p>These cover all the software needed for our NAS project, but they are not enough for a complete NAS system. We also need a preferred case, otherwise, the Raspberry Pi NAS will only run bare metal. Although there are many cases available in the market for Raspberry Pi 4B, as a NAS system we need a case kit that can accommodate at least 1-2 internal SSD/HDD and must also have a good heat dissipation design.</p>\n<p>After some review and comparison, we chose Geekworm's <a href=\"https://wiki.geekworm.com/NASPi\"><strong>NASPi Raspberry Pi 4B NAS storage kit</strong></a>. NASPi is a NUC (Next Unit of Computing) style NAS storage kit designed for the latest Raspberry Pi 4B. It consists of three components:</p>\n<ol type=\"1\">\n<li>X823 shield board, which provides storage function for 2.5-inch SDD/HDD</li>\n<li>X-C1 adapter board, which adjusts all Raspberry Pi 4B interfaces to the back of the case and provides power management and safe shutdown function</li>\n<li>Temperature-controlled PWM (Pulse-Width Modulation) fan as the cooling system</li>\n</ol>\n<p>All these components are packed into a case made of aluminum alloy with an anodized surface.</p>\n<p>Thereon our NAS project can be planned with the following subsystems:</p>\n<ul>\n<li>Hardware System:\n<ul>\n<li>Raspberry Pi 4B 8GB RAM</li>\n<li>32GB microSD for OS storage</li>\n<li>NASPi NAS storage kit</li>\n<li>15-20W USB-C power adaptor</li>\n<li>500GB internal SSD（USB 3.0）</li>\n<li>2TB external HDD（USB 3.0）</li>\n</ul></li>\n<li>Software System:\n<ul>\n<li>Raspberry Pi OS Lite（with no desktop environment）</li>\n<li>OMV for NAS file server</li>\n<li>Plex media server providing streaming service</li>\n</ul></li>\n</ul>\n<p>It is important to note that NAS servers are generally headless systems without a keyboard, mouse, or monitor. This poses some challenges for the installation, configuration, and tuning of hardware and software systems. In practice, as described in the next section, we run an SSH terminal connection to complete the basic project implementation process.</p>\n<h2 id=\"system-implementation\">System Implementation</h2>\n<p>The execution of this project was divided into four stages, which are described in detail as follows.</p>\n<h3 id=\"prepare-raspberry-pi-4b\">Prepare Raspberry Pi 4B</h3>\n<p>In the first stage, we need to prepare the Raspberry Pi OS and do some basic unit tests. This is important, if we delay the OS test until the entire NSAPi kit is assembled, it will be troublesome to find problems with the Raspberry Pi then.</p>\n<h4 id=\"bake-raspberry-pi-os\">Bake Raspberry Pi OS</h4>\n<p>First, insert the microSD card into the USB adapter and connect it to the macOS computer, then go to the Raspberry Pi website and download the <a href=\"https://www.raspberrypi.org/software/\">Raspberry Pi Imager</a> software to run. From the application screen, click <strong>CHOOSE OS &gt; Raspberry Pi OS (other) &gt; Raspberry Pi OS Lite (32-bit)</strong> step by step. This selects the lightweight Raspberry Pi OS that does not require a desktop environment, and then click <strong>CHOOSE STORAGE</strong> to pick the microSD card.</p>\n<p>Next is a trick - hit the <code>ctrl-shift-x</code> key combination and the following advanced options dialog box will pop up <img src=\"RPi-Imager-advopt.png\" style=\"width:70.0%;height:70.0%\" /> Here is exactly the option we need to enable SSH on boot up - <strong>Enable SSH</strong>. It also allows the user to pre-set a password for the default username <code>pi</code> (default is raspberry). Once set up, click <strong>SAVE</strong> to return to the main page and then click <strong>WRITE</strong> to start formatting the microSD card and writing OS to it. When finished, remove the microSD card and insert it into the Raspberry Pi, connect the Ethernet cable then power it up.</p>\n<h4 id=\"probe-ip-address\">Probe IP Address</h4>\n<p>At this point we encountered a problem: since the installed system does not have a desktop environment, it cannot connect to the keyboard, mouse, and monitor, so how do we find its IP address? There are two ways:</p>\n<ol type=\"1\">\n<li>connect to the home router's management WebUI and find the address for the hostname 'raspberry'.</li>\n<li>run the Nmap tool to scan the target subnet and check the changes before and after the Raspberry Pi boots up</li>\n</ol>\n<p>The log of the Nmap tool run can be seen below. Notice that a new IP address 192.168.2.4 is showing up in the scan report. Rerunning Nmap against this address alone, we saw that TCP port 22 was open. We could roughly determine that this might be our newly online Raspberry Pi:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ nmap -sn 192.168.2.0/24</span><br><span class=\"line\">Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-28 21:07 PST</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> router.sx.com (192.168.2.1)</span><br><span class=\"line\">Host is up (0.0050s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 192.168.2.3</span><br><span class=\"line\">Host is up (0.0048s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 192.168.2.4 <span class=\"comment\">## New IP after Raspberry Pi boots up</span></span><br><span class=\"line\">Host is up (0.0057s latency).</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (3 hosts up) scanned <span class=\"keyword\">in</span> 15.31 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">❯ nmap 192.168.2.4</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 192.168.2.4</span><br><span class=\"line\">Host is up (0.0066s latency).</span><br><span class=\"line\">Not shown: 999 closed tcp ports (conn-refused)</span><br><span class=\"line\">PORT   STATE SERVICE</span><br><span class=\"line\">22/tcp open  ssh</span><br></pre></td></tr></table></figure>\n<h4 id=\"system-update-and-upgrade\">System Update and Upgrade</h4>\n<p>Next, try SSH connection</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ ssh pi@192.168.2.4</span><br><span class=\"line\">pi@192.168.2.4<span class=\"string\">&#x27;s password:</span></span><br><span class=\"line\"><span class=\"string\">Linux raspberrypi 5.10.63-v7l+ #1488 SMP Thu Nov 18 16:15:28 GMT 2021 armv7l</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The programs included with the Debian GNU/Linux system are free software;</span></span><br><span class=\"line\"><span class=\"string\">the exact distribution terms for each program are described in the</span></span><br><span class=\"line\"><span class=\"string\">individual files in /usr/share/doc/*/copyright.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span></span><br><span class=\"line\"><span class=\"string\">permitted by applicable law.</span></span><br><span class=\"line\"><span class=\"string\">Last login: Fri Dec 24 19:46:15 2021 from 192.168.2.3</span></span><br><span class=\"line\"><span class=\"string\">pi@raspberrypi:~ $</span></span><br></pre></td></tr></table></figure>\n<p>Once confirmed, we executed the following commands in the Raspberry Pi to update and upgrade the system:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure>\n<h4 id=\"network-connectivity-test\">Network Connectivity Test</h4>\n<p>This stage concluded with the stability test of the Raspberry Pi 4B system Ethernet connection. The test was executed on a macOS computer using the simple ping command, setting the <code>-i 0.05</code> option to specify 20 packets per second and the <code>-t 3600</code> option for one hour run</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ sudo ping -i 0.05 192.168.2.4 -t 3600</span><br></pre></td></tr></table></figure>\n<p>There should be no more than 1% packet loss or timeout on a subnet with no wireless connectivity, otherwise, it should be checked for troubleshooting. As a matter of fact, in our test, it was happening that nearly 10% of ping packets got lost and the SSH connection dropped intermittently. Searching the Internet, we found that there have been quite a few reports of similar issues with the Raspberry Pi 4B Ethernet connection. The analysis and suggestions given by people on the relevant forums focus on the following</p>\n<ol type=\"1\">\n<li>Unstable power supply accounts for packet loss, and needs to be replaced with a reliable USB-C power adapter of 15W or more.</li>\n<li>Energy-efficient Ethernet (Energy-Efficient Ethernet) malfunction, can be fixed by disabling it.</li>\n<li>The full-speed Gigabit Ethernet connection function is faulty and has to be downgraded to 100Mbit/s for stable use.</li>\n</ol>\n<p>Practically, we tried all of the above with little success. Later, we found that the home router connected to the Raspberry Pi 4B was a Belkin N750 DB made in 2011. Although it provides Wi-Fi dual-band 802.11n and 4 Gigabit Ethernet ports, the manufacturing date is too long ago, which makes people doubt its interoperability. Also points 2 and 3 of the above report are essentially interoperability issues. Thinking of these, we immediately ordered the TP-Link TL-SG105 5-port Gigabit Ethernet switch. After receiving it, we extended the Gigabit Ethernet port of N750 with TL-SG105, connected Raspberry Pi 4B to TL-SG105, and retested it. Sure enough, this time the ping packet loss rate was less than 0.1% and the SSH connection became solid.</p>\n<p>The conclusion is that the Raspberry Pi 4B Gigabit Ethernet interface may have compatibility issues with some older devices, which can be solved by inserting a desktop switch with good interoperability between the two.</p>\n<h3 id=\"nsapi-kit-assembly\">NSAPi Kit Assembly</h3>\n<p>In the second stage, we assembled the NSAPi storage kit, intending to finish all hardware installation and complete the standalone NAS body.</p>\n<h4 id=\"prepare-internal-ssd\">Prepare Internal SSD</h4>\n<p>The NSAPi supports either an internal SSD or HDD. The project picked a Samsung 870 EVO 500GB internal SSD, here we ought to first make sure the SSD works properly on its own, otherwise, we would have to disassemble the NASPi to replace it. The SSD can be hooked up to Windows for file systems and basic read/write operation checks. In the case of a newly purchased SSD, the following steps can be done on Windows to quickly format it:</p>\n<ol type=\"1\">\n<li>Click on <strong>Start</strong> or the Windows button, select <strong>Control Panel &gt; System and Security</strong></li>\n<li>Select <strong>Administrative Tools &gt; Computer Management &gt; Disk management</strong></li>\n<li>Choose the disk to be formatted, right-click then select <strong>Format</strong></li>\n<li>Check the following in the Dialog box pop-up\n<ul>\n<li><strong>File System → NTFS</strong></li>\n<li><strong>Allocation Unit Size → Default</strong></li>\n<li><strong>Volume Label → (enter volume name)</strong></li>\n<li><strong>Perform a quick format</strong></li>\n</ul></li>\n<li>Click the OK button to start a fast format for the SSD</li>\n</ol>\n<p>⚠️Note: Here the chosen file system is NTFS. OMV supports NTFS mounting and reads/writes.</p>\n<h4 id=\"pwm-fan-control\">PWM Fan Control</h4>\n<p>Before the actual hardware assembly, a special software provided by Geekworm - PWM fan control script - must be installed. PWM fan speed adjustment to temperature change is a major feature that lets NASPi stand out from other hardware solutions. So this step is critical.</p>\n<p>Referring to Geekworm's <a href=\"https://wiki.geekworm.com/X-C1_Software\">X-C1 software wiki page</a>, the installation command sequence on the SSH session connected to the Raspberry Pi 4B system is as follows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y git pigpio </span><br><span class=\"line\">sudo apt-get install -y python3-pigpio</span><br><span class=\"line\">sudo apt-get install -y python3-smbus</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/geekworm-com/x-c1.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> x-c1</span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> +x *.sh</span><br><span class=\"line\">sudo bash install.sh</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;alias xoff=&#x27;sudo /usr/local/bin/x-c1-softsd.sh&#x27;&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>If you can't do <code>git clone</code> directly on Raspberry Pi 4B, you can first download the X-C1 software on the SSH client, then transfer it to Raspberry Pi 4B using scp. After that, continue to execute the subsequent commands</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ scp -r x-c1 pi@192.168.2.4:/home/pi/</span><br></pre></td></tr></table></figure>\n<details class=\"note primary\"><summary><p><strong>How does X-C1 software control PWM fan?</strong></p>\n</summary>\n<p>The core of X-C1 software is a Python script named fan.py, which is presented below</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pigpio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">servo = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">pwm = pigpio.pi()</span><br><span class=\"line\">pwm.set_mode(servo, pigpio.OUTPUT)</span><br><span class=\"line\">pwm.set_PWM_frequency( servo, <span class=\"number\">25000</span> )</span><br><span class=\"line\">pwm.set_PWM_range(servo, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">     <span class=\"comment\">#get CPU temp</span></span><br><span class=\"line\">     file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/sys/class/thermal/thermal_zone0/temp&quot;</span>)</span><br><span class=\"line\">     temp = <span class=\"built_in\">float</span>(file.read()) / <span class=\"number\">1000.00</span></span><br><span class=\"line\">     temp = <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;%.2f&#x27;</span> % temp)</span><br><span class=\"line\">     file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">30</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">50</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">60</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">70</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">70</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">80</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">75</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &lt; <span class=\"number\">30</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">0</span>)</span><br><span class=\"line\">     time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>Its logic is quite simple. With the pigpio module imported, it first initializes a PWM control object and then starts a while loop with a 1-second sleep cycle inside. The CPU temperature is read at each cycle, and the duty cycle of PWM is set according to the temperature level to control the fan speed. The duty cycle is 0 when it is lower than 30℃, and the fan stops; when it is higher than 75℃, the duty cycle is 100, and the fan spins at full speed. Users can modify the temperature threshold and duty cycle parameters in the program to customize the PWM fan control.</p>\n\n</details>\n<p>In addition, the following pi-temp.sh script, which reads out the GPU and CPU temperatures, is also useful</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ <span class=\"built_in\">cat</span> ./pi-temp.sh</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Script: pi-temp.sh</span></span><br><span class=\"line\"><span class=\"comment\"># Purpose: Display the ARM CPU and GPU  temperature of Raspberry Pi</span></span><br><span class=\"line\"><span class=\"comment\"># -------------------------------------------------------</span></span><br><span class=\"line\">cpu=$(&lt;/sys/class/thermal/thermal_zone0/temp)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(date)</span> @ <span class=\"subst\">$(hostname)</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;-------------------------------------------&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;GPU =&gt; <span class=\"subst\">$(vcgencmd measure_temp)</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;CPU =&gt; temp=<span class=\"subst\">$((cpu/1000)</span>)’C&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pi@raspberrypi:~ $ ./pi-temp.sh</span><br><span class=\"line\">Mon 29 Nov 06:59:17 GMT 2021 @ raspberrypi</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">GPU =&gt; temp=33.1<span class=\"string\">&#x27;C</span></span><br><span class=\"line\"><span class=\"string\">CPU =&gt; temp=32’C</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"hardware-assembly-process\">Hardware Assembly Process</h4>\n<p>Below is a snapshot of the Geekworm NASPi parts out of the box (except for the Raspberry Pi 4B on the far right of the second row and the screwdriver in the lower right corner)</p>\n<p><img src=\"NASPi-unbox.jpg\" style=\"width:80.0%;height:80.0%\" /> The three key components in the second row, from left to right, are</p>\n<ul>\n<li>X-C1 V1.3 adapter board provides power management, interface adaptation, and security shutdown functions</li>\n<li>X823 V1.5 shield board provides a 2.5-inch SSD/HDD storage function (UASP supported)</li>\n<li>4010 PWM fan and metal fan bracket</li>\n</ul>\n<p>The assembly process was done step-by-step mainly by referring to <a href=\"https://youtu.be/ithz2Mg5Vrc\">NASPi installation video</a> on Youtube, and the steps are generalized as follows.</p>\n<ol type=\"1\">\n<li>Insert the SSD into the SATA III connector of X823, flip it to the other side, and fix it with screws.</li>\n<li>Install the Raspberry Pi 4B after fixing the spacers on this side, and place the 7-pin cable between the two</li>\n<li>Install the PWM fan on top of the Raspberry Pi 4B with the additional spacers</li>\n<li>Connect X-C1 and Raspberry Pi 4B, insert a 7-pin connector right to the X-C1 GPIO port and a 3-pin connector to the X-C1 FAN port</li>\n<li>Align and insert the 2x7-pin daughterboard to the GPIO port of the Raspberry Pi 4B and fix it with screws</li>\n<li>Plug in the USB 3.0 connector to connect the X823 USB 3.0 port to the corresponding Raspberry Pi 4B USB 3.0</li>\n</ol>\n<p>Now the installation of the internal accessories has been completed, we have a view of this</p>\n<p><img src=\"NASPi-internal.jpg\" style=\"width:60.0%;height:60.0%\" /></p>\n<p>At this point, we added the USB-C power and pressed the front button to start the system, we could see the PWM fan started to spin. It was also observed that the fan spin rate was not constant, which demonstrated that the temperature controller PWM fan was working properly.</p>\n<p>The front button switch with embedded blue LED decides the whole system's on/off state and can be tested below</p>\n<ul>\n<li>Press the switch after power-on, and the system starts</li>\n<li>Press and hold the switch for 1-2 seconds while running, then the system restarts</li>\n<li>Press and hold the switch for 3 seconds during operation to shut down the system safely.</li>\n<li>Press and hold the switch for 7-8 seconds during operation to force shutdown</li>\n</ul>\n<p>Running the <code>off</code> command on the SSH connection can also trigger a safe shutdown. Be cautious that we should not use the Linux <code>shutdown</code> command, as that would not power down the X-C1 board.</p>\n<p>After the button switch test, we now unplugged the USB 3.0 connector and inserted the entire module into the case. Next was to add the back panel and tighten the screws, then re-insert the USB 3.0 connector. This completed the whole NASPi storage kit assembly process. Below are the front and rear views of the final system provided by Geekworm (all interfaces and vents are marked).</p>\n<p><img src=\"NASPi-outside.jpg\" style=\"width:60.0%;height:60.0%\" /></p>\n<h3 id=\"omv-installation-and-configuration\">OMV Installation and Configuration</h3>\n<p>The third stage is for installing and configuring the key software package of the NAS system - PMV. The goal is to bring up the basic network file access service. Before restarting the NAS, we plugged a Seagate 2TB external HDD into the remaining USB 3.0 port. After booting, connected SSH to NASPi from macOS and performed the following process.</p>\n<h4 id=\"install-omv-package\">Install OMV Package</h4>\n<p>Installing OMV is as simple as running the following command line directly from a terminal with an SSH connection.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O - https://raw.githubusercontent.com/OpenMediaVault-Plugin-Developers/installScript/master/install | sudo bash</span><br></pre></td></tr></table></figure>\n<p>Due to the large size of the entire OMV package, this installation process can take a long time. After the installation, the IP address of the system may change and you will need to reconnect to SSH at this time.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(Reading database ... 51781 files and directories currently installed.)</span><br><span class=\"line\">Purging configuration files <span class=\"keyword\">for</span> dhcpcd5 (1:8.1.2-1+rpt3) ...</span><br><span class=\"line\">Purging configuration files <span class=\"keyword\">for</span> raspberrypi-net-mods (1.3.2) ...</span><br><span class=\"line\">Enable and start systemd-resolved ...</span><br><span class=\"line\">Unblocking wifi with rfkill ...</span><br><span class=\"line\">Adding eth0 to openmedivault database ...</span><br><span class=\"line\">IP address may change and you could lose connection <span class=\"keyword\">if</span> running this script via ssh.</span><br><span class=\"line\">client_loop: send disconnect: Broken pipe\t</span><br></pre></td></tr></table></figure>\n<p>After reconnecting, you can use <code>dpkg</code> to view the OMV packages. As you can see, the latest version of OMV installed here is 6.0.5.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ dpkg -l | grep openme</span><br><span class=\"line\">ii  openmediavault                       6.0.5-1                          all          openmediavault - The open network attached storage solution</span><br><span class=\"line\">ii  openmediavault-flashmemory           6.0.2                            all          folder2ram plugin <span class=\"keyword\">for</span> openmediavault</span><br><span class=\"line\">ii  openmediavault-keyring               1.0                              all          GnuPG archive keys of the OpenMediaVault archive</span><br><span class=\"line\">ii  openmediavault-omvextrasorg          6.0.4                            all          OMV-Extras.org Package Repositories <span class=\"keyword\">for</span> OpenMediaVault</span><br></pre></td></tr></table></figure>\n<h4 id=\"omv-management-ui\">OMV Management UI</h4>\n<p>At this point OMV's workbench is live. Launching a browser on a macOS computer and typing in the IP address will open the beautiful login screen (click on the 🌍 icon in the upper right corner to select the user interface language): <img src=\"OMV-login-default.png\" style=\"width:70.0%;height:70.0%\" /> After logging in with the default username and password shown above, you will see the Workbench screen. The first thing you should do at this point is to click the ⚙️ icon in the top right corner to bring up the settings menu and click \"Change Password\". You can also change the language here <img src=\"OMV-start-en.png\" style=\"width:80.0%;height:80.0%\" /> Clicking on \"Dashboard\" in the settings menu allows you to select the relevant components to be enabled. The menu on the left side provides task navigation for administrators and can be hidden when not needed. The complete OMV administration manual can be found in the <a href=\"https://openmediavault.readthedocs.io/en/latest/index.html\">online documentation</a></p>\n<h4 id=\"configure-file-services\">Configure File Services</h4>\n<p>Next is the key process for configuring the NAS, which consists of the following 5 steps.</p>\n<ol type=\"1\">\n<li><p><strong>Scan for mounted disk drives</strong></p>\n<p>Click <strong>Storage &gt; Disks</strong> from the sidebar menu to enter the hard drive management page. If there is an external USB storage device just plugged in, you can click 🔍 here to scan it out. The scan results for this system are as follows. The internal Samsung 500GB SSD and external Seagate 2TB HDD are detected, and the 32GB microSD that contains the entire software system is listed at the top: <img src=\"OMV-Storage-Disks-en.png\" style=\"width:80.0%;height:80.0%\" /></p>\n<p>On the SSH terminal, we could see the information for the same set of mounted drivers</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ <span class=\"built_in\">df</span> -h | grep disk</span><br><span class=\"line\">/dev/sdb2       466G   13G  454G   3% /srv/dev-disk-by-uuid-D0604B68604B547E</span><br><span class=\"line\">/dev/sda1       1.9T  131G  1.7T   7% /srv/dev-disk-by-uuid-DEB2474FB2472B7B</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>Mount disk drive file systems</strong></p>\n<p>Click <strong>Storage &gt; File Systems</strong> from the sidebar menu to enter the file system management page. If the storage device does not have a file system yet, click ⨁ to Create or Mount the file system. OMV can create/mount ext4, ext3, JFS, and xfs file systems, but only mounts are supported for the NTFS file system. The following figure shows that OMV correctly mounts NTFS file systems for SSDs and HDDs: <img src=\"OMV-Storage-FS-en.png\" style=\"width:80.0%;height:80.0%\" /></p></li>\n<li><p><strong>Set Shared Folders</strong></p>\n<p>From the sidebar menu, click <strong>Storage &gt; File Systems</strong> to access the shared folder management page. Here, click ⨁ to create a shared folder. When creating it, specify the name, corresponding file system, and relative path, and you can also add comments. Select the created folder and click the pencil icon again to edit the related information. This system sets the relative paths of shared folders Zixi-Primary and Zixi-Secondary for SSD and HDD respectively <img src=\"OMV-Storage-SharedFolders-en.png\" style=\"width:80.0%;height:80.0%\" /> Notice the orange alert at the top of the figure above, which alerts the administrator that the configurations have changed and must click on the ✔️ icon to take effect.</p></li>\n<li><p><strong>Add shared folder access users</strong></p>\n<p>Click <strong>User Management &gt; Users</strong> from the sidebar menu to enter the user management page. The system's default user pi has root privileges and cannot be used for file-sharing access due to security concerns. So you need to add a new user separately. On this page, click ⨁ to Create or Import user, only user name and password are required when creating a new user, others are optional. Once created, select this user and click the third folder+key icon (prompting \"Shared folder privileges\") to enter the following privileges settings page <img src=\"OMV-User-authorize-en.png\" style=\"width:80.0%;height:80.0%\" /> As shown in the figure, for this new user zixi, the administrator can set the read and write access permissions for each shared folder.</p></li>\n<li><p><strong>Start file share services</strong></p>\n<p>If you expand the \"Services\" item in the navigation menu, you can see that OMV manages five services: FTP, NFS, Rsync, SMB/CIFS, and SSH. SSH is enabled at the beginning of the system OS image preparation. NFS and SMB/CIFS are the most common network file-sharing protocols, and both are supported by macOS. Take SMB/CIFS as an example here. Click <strong>Services &gt; SMB/CIFS</strong> from the sidebar menu to enter the management page. The page contains two buttons: Settings and Shares. Click \"Settings\" first to activate the SMB/CIFS service and configure the workgroup name on the new page, other options can be left as default. After saving, it returns to the SMB/CIFS administration page. Then enter \"Shares\", click ⨁ to Create shared folders Zixi-Primary and Zixi-Secondary on the new page then save. After that, click the ✔️ icon in the orange warning bar to make all configuration updates take effect, and you will end up with the following result <img src=\"OMV-SMB-Shares-en.png\" style=\"width:80.0%;height:80.0%\" /></p></li>\n</ol>\n<p>Now our Raspberry Pi NAS system is ready for file sharing and the SMB/CIFS service is started. After checking the relevant components to turn on, our dashboard live monitoring looks like this <img src=\"OMV-Dashboard-en.png\" style=\"width:85.0%;height:85.0%\" /></p>\n<h4 id=\"set-up-client-device\">Set Up Client Device</h4>\n<p>Once the server side is ready, we need to add the network share folder on the client side as follows.</p>\n<ul>\n<li>Windows PC client\n<ul>\n<li>Open File Explore, click “This PC”</li>\n<li>Right-click on the blank area at the right pane, select \"Add a network location” on the popup menu</li>\n<li>Enter “\\\\&lt;IP-address&gt;\\<shared-folder>” in the “Internet or network address\" input box</li>\n<li>Enter username and password when prompted</li>\n</ul></li>\n<li>MacBook client (screenshot below)\n<ul>\n<li>Open Finder, click the menu item Go</li>\n<li>Click “Connect to Server...”</li>\n<li>Enter URL “smb://&lt;IP-address&gt;/<shared-folder>”, then click Connect</li>\n<li>Enter username and password when prompted<br />\n<img src=\"macOS-SMB.png\" style=\"width:80.0%;height:80.0%\" /></li>\n</ul></li>\n</ul>\n<p>Once the client side is set up, users can perform various operations on the network share folder as if it were a local directory, such as previewing, creating new, opening or copying files, creating new subdirectories, or deleting existing subdirectories.</p>\n<h3 id=\"plex-installation-and-configuration\">Plex Installation and Configuration</h3>\n<p>The last stage is to install and configure the Plex Media Server, and then start a network streaming service.</p>\n<h4 id=\"install-media-server\">Install Media Server</h4>\n<p>The process of installing Plex Media Server requires HTTPS transport support, so we must first install the https-transport package. SSH to our Raspberry Pi NAS and execute the install command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install apt-transport-https</span><br></pre></td></tr></table></figure>\n<p>Next add the Plex repository to the system, which requires downloading the Plex sign key first. Here are the related commands and run logs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class=\"line\">  Warning: apt-key is deprecated. Manage keyring files <span class=\"keyword\">in</span> trusted.gpg.d instead (see apt-key(8)).</span><br><span class=\"line\">100  3072  100  3072    0     0  10039      0 --:--:-- --:--:-- --:--:-- 10039</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>Use the same <code>apt-key</code> command to check the newly added Plex sign key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ apt-key list</span><br><span class=\"line\">Warning: apt-key is deprecated. Manage keyring files <span class=\"keyword\">in</span> trusted.gpg.d instead (see apt-key(8)).</span><br><span class=\"line\">/etc/apt/trusted.gpg</span><br><span class=\"line\">...</span><br><span class=\"line\">pub   rsa4096 2015-03-22 [SC]</span><br><span class=\"line\">      CD66 5CBA 0E2F 88B7 373F  7CB9 9720 3C7B 3ADC A79D</span><br><span class=\"line\">uid           [ unknown] Plex Inc.</span><br><span class=\"line\">sub   rsa4096 2015-03-22 [E]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>You can see that Plex uses 4096-bit RSA keys. For the warning message \"apt-key is deprecated...\" in the above log, you can ignore it for now. Go to read <a href=\"https://askubuntu.com/questions/1286545/what-commands-exactly-should-replace-the-deprecated-apt-key?newreg=20085e604ada43c2a3466bb51eb4349a\">some discussion on the askubuntu forum</a> if you are interested.</p>\n<p>The next step is to add the Plex repository to the system repository list, and then update the packages <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure> Now we can start the actual Plex Media Server installation with the following installation commands</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ sudo apt install plexmediaserver</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree... Done</span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">The following NEW packages will be installed:</span><br><span class=\"line\">  plexmediaserver</span><br><span class=\"line\">0 upgraded, 1 newly installed, 0 to remove and 20 not upgraded.</span><br><span class=\"line\">Need to get 66.1 MB of archives.</span><br><span class=\"line\">After this operation, 146 MB of additional disk space will be used.</span><br><span class=\"line\">Get:1 https://downloads.plex.tv/repo/deb public/main armhf plexmediaserver armhf 1.25.0.5282-2edd3c44d [66.1 MB]</span><br><span class=\"line\">Fetched 66.1 MB <span class=\"keyword\">in</span> 28s (2392 kB/s)</span><br><span class=\"line\">Selecting previously unselected package plexmediaserver.</span><br><span class=\"line\">(Reading database ... 51783 files and directories currently installed.)</span><br><span class=\"line\">Preparing to unpack .../plexmediaserver_1.25.0.5282-2edd3c44d_armhf.deb ...</span><br><span class=\"line\">PlexMediaServer install: Pre-installation Validation.</span><br><span class=\"line\">PlexMediaServer install: Pre-installation Validation complete.</span><br><span class=\"line\">Unpacking plexmediaserver (1.25.0.5282-2edd3c44d) ...</span><br><span class=\"line\">Setting up plexmediaserver (1.25.0.5282-2edd3c44d) ...</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration file <span class=\"string\">&#x27;/etc/apt/sources.list.d/plexmediaserver.list&#x27;</span></span><br><span class=\"line\"> ==&gt; File on system created by you or by a script.</span><br><span class=\"line\"> ==&gt; File also <span class=\"keyword\">in</span> package provided by package maintainer.</span><br><span class=\"line\">   What would you like to <span class=\"keyword\">do</span> about it ?  Your options are:</span><br><span class=\"line\">    Y or I  : install the package maintainer<span class=\"string\">&#x27;s version</span></span><br><span class=\"line\"><span class=\"string\">    N or O  : keep your currently-installed version</span></span><br><span class=\"line\"><span class=\"string\">      D     : show the differences between the versions</span></span><br><span class=\"line\"><span class=\"string\">      Z     : start a shell to examine the situation</span></span><br><span class=\"line\"><span class=\"string\"> The default action is to keep your current version.</span></span><br><span class=\"line\"><span class=\"string\">*** plexmediaserver.list (Y/I/N/O/D/Z) [default=N] ?</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: PlexMediaServer-1.25.0.5282-2edd3c44d - Installation starting.</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: Now installing based on:</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Installation Type:   New</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Process Control:     systemd</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Plex User:           plex</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Plex Group:          plex</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Video Group:         video</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Metadata Dir:        /var/lib/plexmediaserver/Library/Application Support</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Temp Directory:      /tmp</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Lang Encoding:       en_US.UTF-8</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Nvidia GPU card:     Not Found</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: Completing final configuration.</span></span><br><span class=\"line\"><span class=\"string\">Created symlink /etc/systemd/system/multi-user.target.wants/plexmediaserver.service → /lib/systemd/system/plexmediaserver.service.</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: PlexMediaServer-1.25.0.5282-2edd3c44d - Installation successful.  Errors: 0, Warnings: 0</span></span><br></pre></td></tr></table></figure>\n<p>The log shows a question is asked about the Plex media server list (plexmediaserver.list), just choose the default N. When we see \"Installation successful\", we know that the installation was successful. At this point, the Plex streaming service is up and running. Invoking the Nmap scan again from the macOS side, we find that TCP port 32400 for Plex service is open.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ nmap -p1-65535 192.168.2.4 | grep open</span><br><span class=\"line\">22/tcp    open     ssh</span><br><span class=\"line\">80/tcp    open     http</span><br><span class=\"line\">111/tcp   open     rpcbind</span><br><span class=\"line\">139/tcp   open     netbios-ssn</span><br><span class=\"line\">445/tcp   open     microsoft-ds</span><br><span class=\"line\">2049/tcp  open     nfs</span><br><span class=\"line\">5357/tcp  open     wsdapi</span><br><span class=\"line\">32400/tcp open     plex</span><br></pre></td></tr></table></figure>\n<h4 id=\"configure-media-server\">Configure Media Server</h4>\n<p>The configuration of the Plex Media Server has been done on the web GUI. Launch a browser on the macOS computer and type in the URL <strong>http://&lt;IP-address&gt;:32400/web</strong>, now we can see the following page if no surprise <img src=\"Plex-notice.png\" style=\"width:80.0%;height:80.0%\" /> We can sign in with a Google, Facebook, or Apple account, or we can enter an email to create a new account. Follow the instructions on the page step by step, no need for any payment, soon we reach the <strong>Server Setup</strong> page. Here we can configure the server name and add libraries. Normally we don't need to access our home media server from outside, so remember to uncheck the \"Allow me to access my media outside my home\" box in this step. To add a library, first select the type of library (movies, TV episodes, music, photos, etc.), then click the \"BROWSE FOR MEDIA FOLDER\" button to browse and select the corresponding folder. Once the library is added, the included media files will immediately appear in the local service directory, as shown in the screenshot below <img src=\"Plex-movie-en.png\" style=\"width:90.0%;height:90.0%\" /> Here we have a local server named ZIXI-RPI-NAS for our Raspberry Pi NAS, the movie directory in the library shows The Matrix trilogy and is playing the first one <em>The Matrix</em>. Move your mouse over the server name and ➕ icon will appear to the right, click on it to continue adding new media libraries.</p>\n<p>Once the Plex Media Server is configured, we can open a browser from any device on our home network to do streaming on-demand, without the need to download additional applications. The whole experience is just like our own proprietary home Netflix service. This is awesome!</p>\n<h2 id=\"performance-review\">Performance Review</h2>\n<p>By connecting a macOS laptop to one of the remaining ports of the TL-SG105, we could perform some simple same-subnet tests to evaluate the performance of this NAS system fully.</p>\n<h3 id=\"system-stress-test\">System Stress Test</h3>\n<p>Referring to Geekworm <a href=\"https://wiki.geekworm.com/Naspi_stress_test\">NASPi Stress Test Wiki page</a>, we executed the following command over SSH connection, which cloned the test script from GitHub and ran the stress test:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/geekworm-com/rpi-cpu-stress</span><br><span class=\"line\"><span class=\"built_in\">cd</span> rpi-cpu-stress</span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x stress.sh</span><br><span class=\"line\">sudo ./stress.sh</span><br></pre></td></tr></table></figure>\n<p>Simultaneously we established a second SSH session and ran <code>htop</code> to monitor system status. The screenshot below was taken while close to the 5-minute mark (left is the htop real-time display, and right is the stress test output)<img src=\"RPi-stress-test.png\" style=\"width:80.0%;height:80.0%\" /> Dividing the <code>temp</code> value on the right side by 1000 gave the CPU temperature. All 4 CPU cores reached 100% full load during the test, while the maximum temperature did not exceed 70°C. At this moment, there was no obvious heat sensation when touching the case. Typing <code>ctrl-c</code> to stop the stress test, and then executing the temperature measurement script again</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ ./pi-temp.sh</span><br><span class=\"line\">Fri Dec 24 15:59:21 PST 2021 @ raspberrypi</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">GPU =&gt; temp=39.9<span class=\"string\">&#x27;C</span></span><br><span class=\"line\"><span class=\"string\">CPU =&gt; temp=40&#x27;</span>C</span><br></pre></td></tr></table></figure>\n<p>The system temperature returned to a low range value. This test result assures the system meets the design goal.</p>\n<h3 id=\"file-transfer-speed-test\">File Transfer Speed Test</h3>\n<p>The file transfer speed can be roughly measured with the secure remote copy tool SCP. First, create a 1GB size file by running the <code>mkfile</code> command on the macOS client, then copy it to the user directory of the remote NAS system with the <code>scp</code> command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ mkfile 1G test-nas.dmg</span><br><span class=\"line\">❯ <span class=\"built_in\">ls</span> -al test-nas.dmg</span><br><span class=\"line\">rw-------    1 sxiao  staff  1073741824 Dec 19 20:53 test-nas.dmg</span><br><span class=\"line\">❯ scp test-nas.dmg pi@192.168.2.4:/home/pi/</span><br><span class=\"line\">pi@192.168.2.4<span class=\"string\">&#x27;s password:</span></span><br><span class=\"line\"><span class=\"string\">test-nas.dmg                        100% 1024MB  19.2MB/s   00:53</span></span><br></pre></td></tr></table></figure>\n<p>After the copy was done, it would print the time spent and the deduced speed. Running the command with the source and the destination reversed would give us the speed of receiving a file from the NAS system.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ scp pi@192.168.2.4:/home/pi/test-nas.dmg test-nas-rx.dmg</span><br><span class=\"line\">pi@192.168.2.4<span class=\"string\">&#x27;s password:</span></span><br><span class=\"line\"><span class=\"string\">test-nas.dmg                        100% 1024MB  65.7MB/s   00:15</span></span><br></pre></td></tr></table></figure>\n<p>Repeated 3 times and got the results listed below</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Transfor Type</th>\n<th style=\"text-align: center;\">Server Operation</th>\n<th style=\"text-align: center;\">Time (s)</th>\n<th style=\"text-align: center;\">Speed (MB/s)</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Send</td>\n<td style=\"text-align: center;\">Write</td>\n<td style=\"text-align: center;\">53</td>\n<td style=\"text-align: center;\">19.2</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Send</td>\n<td style=\"text-align: center;\">Write</td>\n<td style=\"text-align: center;\">45</td>\n<td style=\"text-align: center;\">22.5</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Send</td>\n<td style=\"text-align: center;\">Write</td>\n<td style=\"text-align: center;\">50</td>\n<td style=\"text-align: center;\">20.4</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Receive</td>\n<td style=\"text-align: center;\">Read</td>\n<td style=\"text-align: center;\">15</td>\n<td style=\"text-align: center;\">65.7</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Receive</td>\n<td style=\"text-align: center;\">Read</td>\n<td style=\"text-align: center;\">16</td>\n<td style=\"text-align: center;\">60.3</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Receive</td>\n<td style=\"text-align: center;\">Read</td>\n<td style=\"text-align: center;\">15</td>\n<td style=\"text-align: center;\">66.3</td>\n</tr>\n</tbody>\n</table>\n<p>As can be seen, the speed of remote write is around 20MB/s, while the speed of remote file read can reach over 60MB/s. Considering that scp-related encryption and decryption are implemented in software on general-purpose Raspberry Pi systems, this result should be considered passable.</p>\n<h3 id=\"disk-access-speed-test\">Disk Access Speed Test</h3>\n<p>The real test of the NAS's performance is the network drive read/write speed test. For this, we downloaded the AmorphousDiskMark app from Apple's App Store. This is an easy and efficient drive speed test that measures the read/write performance of a storage device in terms of MB/s and IOPS (input/output operations per second). It has four types of tests:</p>\n<ol type=\"1\">\n<li>sequential read/write, 1MB block, queue depth 8</li>\n<li>sequential read/write, 1MB block, queue depth 1</li>\n<li>random read/write, 4KB block, queue depth 64</li>\n<li>random read/write, 4KB block, queue depth 1</li>\n</ol>\n<p>The above queue depths are the default values, but other values are also available. In addition, users can also modify the test file size and duration.</p>\n<p>Run the application on the macOS client and select the remote SMB folders Zixi-Primary (Samsung SSD) and Zixi-Secondary (Seagate HDD) respectively at the top, then click the <code>All</code> button in the upper left corner to start the NAS drive speed test process. A side-by-side comparison of the two test results is shown below</p>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"ADM-SSD.png\" /></div><div class=\"group-picture-column\"><img src=\"ADM-HDD.png\" /></div></div></div>\n<p>This gives a few observations:</p>\n<ul>\n<li>Reads are faster than writes for NAS drives, and the difference under random access is huge.</li>\n<li>SSD outperforms HDD for both sequential and random accesses.</li>\n<li>Large queue depth speeds up reads, especially for random accesses, but there is little impact on writes.</li>\n<li>For both SSDs and HDDs, sequential reads/writes are significantly more efficient than random reads/writes.</li>\n<li>For both SSDs and HDDs, sequential reads/writes reach their highest speeds at large queue depths.</li>\n</ul>\n<p>These are not surprising and are consistent with the test results on macOS laptops with direct external SSDs and HDDs, only with the lower numbers. With this NAS system, both the SSD and HDD are connected via the USB 3.0 interface. USB 3.0 supports transfer speeds of up to 5Gbit/s, so the performance bottleneck of the system is the network interface bandwidth and processor power.</p>\n<p>That being said, for both SSDs and HDDs, the transfer speeds have been more than 900Mbit/s at 1MB sequential read and queue depth 8, close to the upper bandwidth limit of the Gigabit Ethernet interface. This read speed can support a single 1080p60 video stream at a frame rate of 60fps or 2 parallel 1080i50 video streams at a frame rate of 25fps, which is sufficient for home streaming services. In another media service test, the NAS system performs satisfactorily with three computers playing HD video on demand and one phone playing MP3 music without any lag.</p>\n<h2 id=\"project-summary\">Project Summary</h2>\n<p>This completes our Raspberry Pi home NAS project. Now we can move our NAS to a more permanent location to provide network file and streaming services for the whole family.</p>\n<p><img src=\"NASPi-final.jpg\" style=\"width:80.0%;height:80.0%\" /></p>\n<p>Economically, our home NAS has the cost summarized in the table below (excluding SSD/HDD)</p>\n<table>\n<colgroup>\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Devices</th>\n<th style=\"text-align: center;\">Functions</th>\n<th style=\"text-align: center;\">Cost（$）</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Raspberry Pi 4B 2/4/8GB RAM</td>\n<td style=\"text-align: center;\">Primary hardware system</td>\n<td style=\"text-align: center;\">45/55/75</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Samsung 32GB EVO+ Class-10 Micro SDHC</td>\n<td style=\"text-align: center;\">OS storage</td>\n<td style=\"text-align: center;\">10</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Geekworm NASPi Raspberry Pi 4B NAS Storage Kit</td>\n<td style=\"text-align: center;\">Case, extending board and PWM fan</td>\n<td style=\"text-align: center;\">60</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Geekworm 20W 5V 4A USB-C Power Adaptor</td>\n<td style=\"text-align: center;\">Power supply</td>\n<td style=\"text-align: center;\">15</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">TP-Link TL-SG105 5-Port Gigabit Ethernet Switch</td>\n<td style=\"text-align: center;\">Desktop switch</td>\n<td style=\"text-align: center;\">15</td>\n</tr>\n</tbody>\n</table>\n<p>Even with the choice of 8GB RAM Raspberry Pi 4B, the whole cost is only $175, a little more than half of the price of the low-end brand NAS sold in the market. Unless there are a lot of client devices that need streaming services, the memory consumption is usually under 2GB, so the 2GB Raspberry Pi 4B should be able to work in most home scenarios. That cuts the cost down to $145, less than half the MSRP.</p>\n<p>On the other hand, this DIY project was a very good exercise of hands-on practice, helping us gain valuable intuitive experience in building network connections, configuring system hardware and software, and tuning and testing application layer services. To sum up, the home NAS system built with Raspberry Pi 4B and OMV, combined with a Plex media server, provides a cost-effective solution for file backup and streaming media services in the home network.</p>\n<p>Appendix: List of related devices and Amazon links</p>\n<blockquote>\n<p><strong><em>Disclosure</em></strong>: <em>This blog site is reader-supported. When you buy through the affiliate links below, as an Amazon Associate, I earn a tiny commission from qualifying purchases. Thank you.</em></p>\n<p><strong>CanaKit Raspberry Pi 4B 8GB RAM + 128GB MicroSD Extrem Kit</strong> <a href=\"https://amzn.to/3DUeDfm\">https://amzn.to/3DUeDfm</a><br />\n<strong>Samsung 32GB EVO+ Class 10 Micro SDHC with Adapter</strong> <a href=\"https://amzn.to/3FLkTb7\">https://amzn.to/3FLkTb7</a><br />\n<strong>Geekworm NASPi 2.5\" SATA HDD/SSD Raspberry Pi 4B NAS Storage Kit</strong> <a href=\"https://amzn.to/3m5djAi\">https://amzn.to/3m5djAi</a><br />\n<strong>Geekworm Raspberry Pi 4 20W 5V 4A USB-C Power Adaptor</strong> <a href=\"https://amzn.to/3m1EXOf\">https://amzn.to/3m1EXOf</a><br />\n<strong>TP-Link TL-SG105 5-Port Gigabit Ethernet Switch</strong> <a href=\"https://amzn.to/3pRkBsi\">https://amzn.to/3pRkBsi</a><br />\n<strong>Samsung 870 EVO 500GB 2.5\" SATA III Internal SSD</strong> <a href=\"https://amzn.to/3DPKnCl\">https://amzn.to/3DPKnCl</a><br />\n<strong>Seagate Portable 2TB USB 3.0 External HDD</strong> <a href=\"https://amzn.to/3EYegl4\">https://amzn.to/3EYegl4</a><br />\n<strong>Synology 2-Bay 2GB NAS DiskStation DS220+</strong> <a href=\"https://amzn.to/3Jp5qjd\">https://amzn.to/3Jp5qjd</a><br />\n<strong>Synology 5-Bay 8GB NAS DiskStation DS1520+</strong> <a href=\"https://amzn.to/3qniQDm\">https://amzn.to/3qniQDm</a></p>\n</blockquote>\n","categories":["DIY Projects"],"tags":["Raspberry Pi","NAS"]},{"title":"RSA: Attack and Defense (II)","url":"/en/2023/11/17/RSA-attack-defense-2/","content":"<p>This article first supplements two specific integer factorization methods - Fermat's factorization method and Pollard's rho algorithm, explaining the essence of their algorithms and applicable scenarios, and provides a Python reference implementation. Next, it analyzes in detail a classic low private exponent attack - Wiener's attack, elaborating on the mathematical basis, the attack principle, and the attack procedure, with a complete Python program. The article also cites the latest research paper proposing a new upper bound for the private exponent when Wiener's attack is successful and verifies the correctness of this limit with a test case.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>The enemy knows the system being used.</strong><br> <strong>— <em>Claude Shannon</em> (American mathematician, electrical engineer, computer scientist, and cryptographer known as the \"father of information theory\".)</strong></p>\n</div>\n<p>Previous article: <a href=\"https://www.packetmania.net/en/2023/03/16/RSA-attack-defense/\">RSA: Attack and Defense (I)</a></p>\n<h2 id=\"integer-factorization-supplementary\">Integer Factorization (Supplementary)</h2>\n<p>Even if the RSA modulus <span class=\"math inline\">\\(N\\)</span> is a very big number (with sufficient bits), problems can still arise if the gap between the prime factors <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> is too small or too large. In such cases, there are specific factorization algorithms that can effectively retrieve p and q from the public modulus N.</p>\n<h3 id=\"fermats-factorization-method\">Fermat's Factorization Method</h3>\n<p>When the prime factors <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> are very close, Fermat's factorization method can factorize the modulus N in a very short time. Fermat's factorization method is named after the French mathematician <a href=\"https://www.packetmania.net/en/2023/11/14/Fermats-Little-Theorem//\">Pierre de Fermat</a>. Its base point is that every odd integer can be represented as the difference between two squares, i.e. <span class=\"math display\">\\[N=a^2-b^2\\]</span> Applying algebraic factorization on the right side yields <span class=\"math inline\">\\((a+b)(a-b)\\)</span>. If neither factor is one, it is a nontrivial factor of <span class=\"math inline\">\\(N\\)</span>. For the RSA modulus <span class=\"math inline\">\\(N\\)</span>, assuming <span class=\"math inline\">\\(p&gt;q\\)</span>, correspondingly <span class=\"math inline\">\\(p=a+b\\)</span> and <span class=\"math inline\">\\(q=a-b\\)</span>. In turn, it can be deduced that <span class=\"math display\">\\[N=\\left({\\frac {p+q}{2}}\\right)^{2}-\\left({\\frac {p-q}{2}}\\right)^{2}\\]</span> The idea of Fermat's factorization method is to <strong>start from <span class=\"math inline\">\\(\\lceil{\\sqrt N}\\rceil\\)</span> and try successive values of a, then verify if <span class=\"math inline\">\\(a^{2}-N=b^{2}\\)</span></strong>. If it is true, the two nontrivial factors <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> are found. The number of steps required by this method is approximately <span class=\"math display\">\\[{\\frac{p+q}{2}}-{\\sqrt N}=\\frac{({\\sqrt p}-{\\sqrt q})^{2}}{2}=\\frac{({\\sqrt N}-q)^{2}}{2q}\\]</span> In general, Fermat's factorization method is not much better than trial division. In the worst case, it may be slower. However, <strong>when the difference between <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> is not large, and <span class=\"math inline\">\\(q\\)</span> is very close to <span class=\"math inline\">\\(\\sqrt N\\)</span>, the number of steps becomes very small</strong>. In the extreme case, if the difference between <span class=\"math inline\">\\(q\\)</span> and <span class=\"math inline\">\\(\\sqrt N\\)</span> is less than <span class=\"math inline\">\\({\\left(4N\\right)}^{\\frac 1 4}\\)</span>, this method only takes one step to finish.</p>\n<p>Below is a Python implementation of Fermat's factorization method, and an example of applying it to factorize the RSA modulus N:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">FermatFactor</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> n % <span class=\"number\">2</span> != <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = gmpy2.isqrt(n) + <span class=\"number\">1</span></span><br><span class=\"line\">    b2 = gmpy2.square(a) - n</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">not</span> gmpy2.is_square(b2):</span><br><span class=\"line\">        a += <span class=\"number\">1</span></span><br><span class=\"line\">        b2 = gmpy2.square(a) - n</span><br><span class=\"line\"></span><br><span class=\"line\">    b = gmpy2.isqrt(b2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b, a - b</span><br><span class=\"line\"></span><br><span class=\"line\">p = <span class=\"number\">7422236843002619998657542152935407597465626963556444983366482781089760760914403641211700959458736191688739694068306773186013683526913015038631710959988771</span></span><br><span class=\"line\">q = <span class=\"number\">7422236843002619998657542152935407597465626963556444983366482781089760759017266051147512413638949173306397011800331344424158682304439958652982994939276427</span></span><br><span class=\"line\">N = p * q</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;N =&quot;</span>, N)</span><br><span class=\"line\"></span><br><span class=\"line\">start = time.process_time()</span><br><span class=\"line\">(p1, q1) = FermatFactor(N)</span><br><span class=\"line\">end = time.process_time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;Elapsed time <span class=\"subst\">&#123;end - start:<span class=\"number\">.3</span>f&#125;</span>s.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span>(p == p1)</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(q == q1)</span><br></pre></td></tr></table></figure>\n<p>The <code>FermatFactor()</code> function defined at the beginning of the program implements the Fermat factorization method. It calls three library functions of gmpy2: <code>isqrt()</code> to find the square root of an integer, <code>square()</code> to execute the squaring operation, and <code>is_square()</code> to verify if the input is a square number. Two large prime numbers <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> of 154 decimal digits each are defined later, and multiplying them gives <span class=\"math inline\">\\(N\\)</span>. Then <span class=\"math inline\">\\(N\\)</span> is fed into the <code>FermatFactor()</code> function and the program starts timing. When the function returns, it prints the elapsed time and confirms the factorization.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">N = 55089599753625499150129246679078411260946554356961748980861372828434789664694269460953507615455541204658984798121874916511031276020889949113155608279765385693784204971246654484161179832345357692487854383961212865469152326807704510472371156179457167612793412416133943976901478047318514990960333355366785001217</span><br><span class=\"line\">Elapsed time 27.830s.</span><br></pre></td></tr></table></figure>\n<p>As can be seen, in less than half a minute, this large number of 308 decimal digits (about 1024 bits) was successfully factorized! Going back and examining <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span>, one can see that the first 71 digits of these two large prime numbers of 154 decimal digits are exactly the same. This is exactly the scenario in which the Fermat factorization method exerts its power. If you simply modify the <code>FermatFactor()</code> function to save the starting <span class=\"math inline\">\\(a\\)</span> value and compare it to the value at the end of the loop, you get a loop count of 60613989. With such a small number value, it's no wonder that the factorization is done so quickly.</p>\n<p>Therefore, the choice of the large prime numbers <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> must not only be random but also be far enough apart. After obtaining two large prime numbers, the difference between them shall be checked. If it is too small, regeneration is required to prevent attackers from using Fermat's factorization method to crack it.</p>\n<h3 id=\"pollards-rho-algorithm\">Pollard's Rho Algorithm</h3>\n<p>On the opposite end, if the gap between the large prime factors <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> is too large, they may be cracked by Pollard's rho algorithm. This algorithm was invented by British mathematician John Pollard<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a> in 1975. It requires only a small amount of storage space, and its expected running time is proportional to the square root of the smallest prime factor of the composite number being factorized.</p>\n<p>The core idea of Pollard's rho algorithm is to use the collision pattern of traversal sequences to search for factors, and its stochastic and recursive nature allows it to factorize integers efficiently in relatively low complexity. First, for <span class=\"math inline\">\\(N=pq\\)</span>, assume that <span class=\"math inline\">\\(p\\)</span> is the smaller nontrivial factor. The algorithm defines a polynomial modulo <span class=\"math inline\">\\(N\\)</span> <span class=\"math display\">\\[f(x)=(x^{2}+c){\\pmod N}\\]</span> A pseudorandom sequence can be generated by making recursive calls with this polynomial, and the sequence generation formula is <span class=\"math inline\">\\(x_{n+1}=f(x_n)\\)</span>. For example, given an initial value of <span class=\"math inline\">\\(x_0=2\\)</span> and a constant <span class=\"math inline\">\\(c=1\\)</span>, it follows that <span class=\"math display\">\\[\\begin{align}\nx_1&amp;=f(2)=5\\\\\nx_2&amp;=f(x_1)=f(f(2))=26\\\\\nx_3&amp;=f(x_2)=f(f(f(2)))=677\\\\\n\\end{align}\\]</span> For two numbers <span class=\"math inline\">\\(x_i\\)</span> and <span class=\"math inline\">\\(x_j\\)</span> in the generated sequence, <span class=\"math inline\">\\(|x_i-x_j|\\)</span> must be a multiple of <span class=\"math inline\">\\(p\\)</span> if <span class=\"math inline\">\\(x_i\\neq x_j\\)</span> and <span class=\"math inline\">\\(x_i\\equiv x_j{\\pmod p}\\)</span>. In this case, calculating <span class=\"math inline\">\\(\\gcd(|x_i-x_j|,N)\\)</span> results in <span class=\"math inline\">\\(p\\)</span>. Based on the <a href=\"https://en.wikipedia.org/wiki/Birthday_problem\">Birthday Paradox</a>, in the worst case, it is expected that after generating about <span class=\"math inline\">\\(\\sqrt p\\)</span> numbers, there will be two numbers that are the same under the modulus <span class=\"math inline\">\\(p\\)</span>, thus successfully factorizing <span class=\"math inline\">\\(N\\)</span>. However, the time complexity of performing pairwise comparisons is still unsatisfactory. In addition, storing so many numbers is also troublesome when N is large.</p>\n<p>How to solve these problems? This is where the ingenuity of Pollard's rho algorithm lies. Pollard found that the sequence generated by this pseudorandom number generator has two properties:</p>\n<ol type=\"1\">\n<li>Since each number depends only on the value that precedes it, and the numbers generated under the modular operation are finite, sooner or later it will enter a cycle. As shown below, the resulting sequence will eventually form a directed graph similar in shape to the Greek letter <span class=\"math inline\">\\(\\rho\\)</span>, from which the algorithm takes its name. <img src=\"Pollard_rho_cycle.png\" style=\"width:50.0%;height:50.0%\" alt=\"Cycle diagram resembling the Greek letter ρ\" /></li>\n<li>When <span class=\"math inline\">\\(|x_i-x_j| \\equiv 0 \\pmod p\\)</span>, there must be <span class=\"math display\">\\[|f(x_i)-f(x_j)|=|{x_i}^2-{x_j}^2|=|x_i+x_j|\\cdot|x_i-x_j|\\equiv 0 \\pmod p\\]</span> This shows that if two numbers in the sequence satisfy a certain condition under modulus operation, all equally spaced pairs of numbers satisfy the same condition.</li>\n</ol>\n<p>Insightful of these two properties, Pollard utilizes <a href=\"https://en.wikipedia.org/wiki/Cycle_detection#Floyd&#39;s_tortoise_and_hare\">Floyd's cycle-finding algorithm</a> (also known as the tortoise and hare algorithm) to set up the fast and slow nodes <span class=\"math inline\">\\(x_h\\)</span> and <span class=\"math inline\">\\(x_t\\)</span>. Starting from the same initial value <span class=\"math inline\">\\(x_0\\)</span>, the slow node <span class=\"math inline\">\\(x_t\\)</span> moves to the next node in the sequence every step, while the fast node <span class=\"math inline\">\\(x_h\\)</span> moves forward by two nodes at a time, i.e. <span class=\"math display\">\\[\\begin{align}\nx_t&amp;=f(x_t)\\\\\nx_h&amp;=f(f(x_h))\\\\\n\\end{align}\\]</span> After that, calculate <span class=\"math inline\">\\(\\gcd(|x_h-x_t|,N)\\)</span>, and the result that is greater than 1 and less than <span class=\"math inline\">\\(N\\)</span> is <span class=\"math inline\">\\(p\\)</span>, otherwise continue with the same steps. With this design, since each move is equivalent to checking a new node spacing, pairwise comparisons are unnecessary. If not found, eventually the fast and slow nodes will meet on the cycle, at which time the result of finding the greatest common divisor is <span class=\"math inline\">\\(N\\)</span>. The algorithm's recommendation at this point is to exit and regenerate the pseudorandom number sequence with a different initial value or constant <span class=\"math inline\">\\(c\\)</span> and try again.</p>\n<p>This is the classic Pollard's rho algorithm. Its time complexity is <span class=\"math inline\">\\(𝑂(\\sqrt p\\log N)\\)</span> (<span class=\"math inline\">\\(\\log\\)</span> comes from the required <span class=\"math inline\">\\(\\gcd\\)</span> operations). For RSA modulus <span class=\"math inline\">\\(N\\)</span>, obviously <span class=\"math inline\">\\(p\\leq \\sqrt N\\)</span>, so the upper bound on the time complexity can be written as <span class=\"math inline\">\\(𝑂(N^{\\frac 1 4}\\log N)\\)</span>. The time complexity expression for Pollard's rho algorithm indicates that the smaller the minimum prime factor of the composite number being factorized, the faster the factorization is expected to be. An excessively small <span class=\"math inline\">\\(p\\)</span> is extremely unsafe.</p>\n<p>Programming Pollard's rho algorithm is not difficult. The following Python code shows a function implementation of the algorithm, <code>PollardRhoFactor()</code>, and some test cases</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">PollardRhoFactor</span>(<span class=\"params\">n, seed, c</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> gmpy2.is_prime(n): <span class=\"keyword\">return</span> n</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        f = <span class=\"keyword\">lambda</span> x: (x**<span class=\"number\">2</span> + c) % n</span><br><span class=\"line\">        t = h = seed</span><br><span class=\"line\">        d = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> d == <span class=\"number\">1</span>:</span><br><span class=\"line\">            t = f(t)    <span class=\"comment\"># Tortoise</span></span><br><span class=\"line\">            h = f(f(h)) <span class=\"comment\"># Hare</span></span><br><span class=\"line\">            d = gmpy2.gcd(h - t, n)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> d != n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d <span class=\"comment\"># find a non-trivial factor</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># start a new round with updated seed and c</span></span><br><span class=\"line\">        seed = h</span><br><span class=\"line\">        c += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">N = [<span class=\"number\">10967535067</span>, <span class=\"number\">18446744073709551617</span>, <span class=\"number\">97546105601219326301</span>,</span><br><span class=\"line\">     <span class=\"number\">780002082420246798979794021150335143</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"string\">&#x27;N&#x27;</span>:&lt;<span class=\"number\">37</span>&#125;</span><span class=\"subst\">&#123;<span class=\"string\">&#x27;P&#x27;</span>:&lt;<span class=\"number\">16</span>&#125;</span><span class=\"subst\">&#123;<span class=\"string\">&#x27;Elapsed Time (s)&#x27;</span>:&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(N)):</span><br><span class=\"line\">    start = time.process_time()</span><br><span class=\"line\">    p = PollardRhoFactor(N[i], <span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    end = time.process_time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;N[i]:&lt;<span class=\"number\">37</span>&#125;</span><span class=\"subst\">&#123;p:&lt;<span class=\"number\">16</span>&#125;</span><span class=\"subst\">&#123;end - start:<span class=\"number\">16.3</span>f&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">F8 = <span class=\"number\">2</span>**(<span class=\"number\">2</span>**<span class=\"number\">8</span>) + <span class=\"number\">1</span> <span class=\"comment\"># A 78-digit Fermat number</span></span><br><span class=\"line\">start = time.process_time()</span><br><span class=\"line\">p = PollardRhoFactor(F8, <span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">end = time.process_time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\nF8 = <span class=\"subst\">&#123;F8&#125;</span>\\np = <span class=\"subst\">&#123;p&#125;</span>\\nElapsed time <span class=\"subst\">&#123;end - start:<span class=\"number\">.3</span>f&#125;</span>s&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>The function <code>PollardRhoFactor()</code> accepts three arguments: <code>n</code> is the composite number to be factorized, <code>seed</code> is the initial value of the pseudorandom sequence, and <code>c</code> is the constant value in the generating polynomial. The function internally uses two <code>while</code> to form a double loop: inside the outer loop defines the generating polynomial <code>f</code> and the fast and slow nodes <code>h</code> and <code>t</code>, while the node moving steps and the greatest common divisor operation are implemented in the inner loop. The inner loop ends only if the greatest common divisor <code>d</code> is not 1. At this point, if <code>d</code> is not equal to <code>n</code>, the function returns the non-trivial factor <code>d</code>. Otherwise, <code>d</code> equals <code>n</code>, meaning the fast and slow nodes have met on the cycle. In this situation, the code in the outer loop resets <code>seed</code> to the value of the fast node and increments <code>c</code>, thus restarting a new round of search.</p>\n<p>Running the above code on a MacBook Pro (2019), the output is as follows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">N                                    P               Elapsed Time (s)</span><br><span class=\"line\">10967535067                          104729                     0.001</span><br><span class=\"line\">18446744073709551617                 274177                     0.002</span><br><span class=\"line\">97546105601219326301                 9876543191                 0.132</span><br><span class=\"line\">780002082420246798979794021150335143 244300526707007            6.124</span><br><span class=\"line\"></span><br><span class=\"line\">F8 = 115792089237316195423570985008687907853269984665640564039457584007913129639937</span><br><span class=\"line\">p = 1238926361552897</span><br><span class=\"line\">Elapsed time 64.411s</span><br></pre></td></tr></table></figure>\n<p>This result proves the effectiveness of Pollard's rho algorithm. In particular, for the last test, the input to the function was the Fermat number <span class=\"math inline\">\\(F_8\\)</span> (defined as <span class=\"math inline\">\\(F_{n}=2^{2^{n}}+1\\)</span>, where <span class=\"math inline\">\\(n\\)</span> is a non-negative integer). In 1980, Pollard and Australian mathematician Richard Brent <a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a> working together applied this algorithm to factorize <span class=\"math inline\">\\(F_8\\)</span> for the first time. The factorization took 2 hours on a UNIVAC 1100/42 computer. And now, on a commercial off-the-shelf laptop computer, Pollard's rho algorithm revealed the smaller prime factor 1238926361552897 of <span class=\"math inline\">\\(F_8\\)</span> in 64.4 seconds.</p>\n<p>Subsequently, Pollard and Brent made further improvements to the algorithm. They observed that if <span class=\"math inline\">\\(\\gcd(d, N)&gt;1\\)</span>, for any positive integer <span class=\"math inline\">\\(k\\)</span>, there is also <span class=\"math inline\">\\(\\gcd(kd, N)&gt;1\\)</span>. So multiplying <span class=\"math inline\">\\(k\\)</span> consecutive <span class=\"math inline\">\\((|x_h-x_t| \\pmod N)\\)</span> and taking the modulo <span class=\"math inline\">\\(N\\)</span> with the product, and then solving for the greatest common divisor with <span class=\"math inline\">\\(N\\)</span> should obtain the same result. This method replaces <span class=\"math inline\">\\(k\\)</span> times <span class=\"math inline\">\\(\\gcd\\)</span> with <span class=\"math inline\">\\((k-1)\\)</span> times multiplications modulo <span class=\"math inline\">\\(N\\)</span> and a single <span class=\"math inline\">\\(\\gcd\\)</span>, thus achieving acceleration. The downside is that occasionally it may cause the algorithm to fail by introducing a repeated factor. When this happens, it then suffices to reset <span class=\"math inline\">\\(k\\)</span> to 1 and fall back to the regular Pollard's rho algorithm.</p>\n<p>The following Python function implements the improved Pollard's rho algorithm. It adds an extra <code>for</code> loop to implement the multiplication of <span class=\"math inline\">\\(k\\)</span> consecutive differences modulo <span class=\"math inline\">\\(N\\)</span>, with the resulting product stored in the variable <code>mult</code>. <code>mult</code> is fed to the greatest common divisor function with <span class=\"math inline\">\\(N\\)</span>, and the result is assigned to <code>d</code> for further check. If this fails, <span class=\"math inline\">\\(k\\)</span> is set to 1 in the outer loop.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">PollardRhoFactor2</span>(<span class=\"params\">n, seed, c, k</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> gmpy2.is_prime(n): <span class=\"keyword\">return</span> n</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        f = <span class=\"keyword\">lambda</span> x: (x**<span class=\"number\">2</span> + c) % n</span><br><span class=\"line\">        t = h = seed</span><br><span class=\"line\">        d = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> d == <span class=\"number\">1</span>:</span><br><span class=\"line\">            mult = <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k):</span><br><span class=\"line\">                t = f(t)    <span class=\"comment\"># Tortoise</span></span><br><span class=\"line\">                h = f(f(h)) <span class=\"comment\"># Hare</span></span><br><span class=\"line\">                mult = (mult * <span class=\"built_in\">abs</span>(h - t)) % n</span><br><span class=\"line\">                </span><br><span class=\"line\">            d = gmpy2.gcd(mult, n)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> d != n:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d <span class=\"comment\"># find a non-trivial factor</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># start a new round with updated seed and c</span></span><br><span class=\"line\">        seed = h</span><br><span class=\"line\">        c += <span class=\"number\">1</span></span><br><span class=\"line\">        k = <span class=\"number\">1</span> <span class=\"comment\"># fall back to regular rho algorithm</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;<span class=\"string\">&#x27;N&#x27;</span>:&lt;<span class=\"number\">37</span>&#125;</span><span class=\"subst\">&#123;<span class=\"string\">&#x27;P&#x27;</span>:&lt;<span class=\"number\">16</span>&#125;</span><span class=\"subst\">&#123;<span class=\"string\">&#x27;Elapsed Time (s)&#x27;</span>:&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(N)):</span><br><span class=\"line\">    start = time.process_time()</span><br><span class=\"line\">    p = PollardRhoFactor2(N[i], <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">    end = time.process_time()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;N[i]:&lt;<span class=\"number\">37</span>&#125;</span><span class=\"subst\">&#123;p:&lt;<span class=\"number\">16</span>&#125;</span><span class=\"subst\">&#123;end - start:<span class=\"number\">16.3</span>f&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">F8 = <span class=\"number\">2</span>**(<span class=\"number\">2</span>**<span class=\"number\">8</span>) + <span class=\"number\">1</span> <span class=\"comment\"># A 78-digit Fermat number</span></span><br><span class=\"line\">start = time.process_time()</span><br><span class=\"line\">p = PollardRhoFactor2(F8, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">end = time.process_time()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;\\nF8 = <span class=\"subst\">&#123;F8&#125;</span>\\np = <span class=\"subst\">&#123;p&#125;</span>\\nElapsed time <span class=\"subst\">&#123;end - start:<span class=\"number\">.3</span>f&#125;</span>s&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>Using the same test case, called with <span class=\"math inline\">\\(k\\)</span> set to 100, the program runs as follows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">N                                    P               Elapsed Time (s)</span><br><span class=\"line\">10967535067                          104729                     0.001</span><br><span class=\"line\">18446744073709551617                 274177                     0.002</span><br><span class=\"line\">97546105601219326301                 9876543191                 0.128</span><br><span class=\"line\">780002082420246798979794021150335143 244300526707007            5.854</span><br><span class=\"line\"></span><br><span class=\"line\">F8 = 115792089237316195423570985008687907853269984665640564039457584007913129639937</span><br><span class=\"line\">p = 1238926361552897</span><br><span class=\"line\">Elapsed time 46.601s</span><br></pre></td></tr></table></figure>\n<p>It can be seen that for relatively small composite <span class=\"math inline\">\\(N\\)</span>, the improvement is not significant. As <span class=\"math inline\">\\(N\\)</span> becomes larger, the speedup is noticeable. For the 78-bit decimal Fermat number <span class=\"math inline\">\\(F_8\\)</span>, the improved Pollard's rho algorithm takes only 46.6 seconds, which is a speedup of more than 27% over the regular algorithm. The improved Pollard <span class=\"math inline\">\\(\\rho\\)</span> algorithm indeed brings significant speedup.</p>\n<p>To summarize the above analysis, implementation, and testing of Pollard's rho algorithm, it is necessary to set a numerical lower bound for the generated prime numbers <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> to be used by RSA. If either of them is too small, it must be regenerated or it may be cracked by an attacker applying Pollard's rho algorithm.</p>\n<h2 id=\"low-private-exponent-attack\">Low Private Exponent Attack</h2>\n<p>For some particular application scenarios (e.g., smart cards and IoT), limited by the computational capability and low-power requirements of the device, a smaller value of private exponent <span class=\"math inline\">\\(d\\)</span> is favored for fast decryption or digital signing. However, a very low private exponent is very dangerous, and there are some clever attacks that can totally breach such an RSA cryptosystem.</p>\n<h3 id=\"wieners-attack\">Wiener's Attack</h3>\n<p>In 1990, Canadian cryptographer Michael J. Wiener conceived an attack scheme<a href=\"#fn3\" class=\"footnote-ref\" id=\"fnref3\" role=\"doc-noteref\"><sup>3</sup></a> based on <strong>continued fraction approximation</strong> that can effectively recover the private exponent <span class=\"math inline\">\\(d\\)</span> from the RSA public key <span class=\"math inline\">\\((N, e)\\)</span> under certain conditions. Before explaining how this attack works, it is important to briefly introduce the concept and key properties of continued fraction.</p>\n<h4 id=\"continued-fraction\">Continued Fraction</h4>\n<p>The continuous fraction itself is just a mathematical expression, but it introduces a new perspective on the study of real numbers. The following is a typical continued fraction <span class=\"math display\">\\[x = a_0 + \\cfrac{1}{a_1 + \\cfrac{1}{a_2 + \\cfrac{1}{\\ddots\\,}}}\\]</span> where <span class=\"math inline\">\\(a_{0}\\)</span> is an integer and all other <span class=\"math inline\">\\(a_{i}(i=1,\\ldots ,n)\\)</span> are positive integers. One can abbreviate the continued fraction as <span class=\"math inline\">\\(x=[a_0;a_1,a_2,\\ldots,a_n]\\)</span>. Continued fractions have the following properties:</p>\n<ol type=\"1\">\n<li><p>Every rational number can be expressed as a finite continued fraction, i.e., a finite number of <span class=\"math inline\">\\(a_{i}\\)</span>. Every rational number has an essentially unique simple continued fraction representation with infinite terms. Here are two examples: <span class=\"math display\">\\[\\begin{align}\n\\frac {68} {75}​&amp;=0+\\cfrac {1} {1+\\cfrac {1} {\\small 9+\\cfrac {1} {\\scriptsize 1+\\cfrac {1} {2+\\cfrac {1} {2}}}}}=[0;1,9,1,2,2]\\\\\nπ&amp;=[3;7,15,1,292,1,1,1,2,…]\n\\end{align}\\]</span></p></li>\n<li><p>To calculate the continued fraction representation of a positive rational number <span class=\"math inline\">\\(f\\)</span>, first subtract the integer part of <span class=\"math inline\">\\(f\\)</span>, then find the reciprocal of the difference and repeat till the difference is zero. Let <span class=\"math inline\">\\(a_i\\)</span> be the integer quotient, <span class=\"math inline\">\\(r_i\\)</span> be the difference of the <span class=\"math inline\">\\(i\\)</span>th step, and <span class=\"math inline\">\\(n\\)</span> be the number of steps, then <span class=\"math display\">\\[\\begin{align}\na_0 &amp;= \\lfloor f \\rfloor,  &amp;r_0 &amp;= f - a_0\\\\\na_i&amp;={\\large\\lfloor} \\frac 1 {r_{i-1}} {\\large\\rfloor}, &amp;r_i &amp;=\\frac 1 {r_{i-1}} - a_i \\quad (i = 1, 2, ..., n)\\\\\n\\end{align}\\]</span> The corresponding Python function implementing the continued fraction expansion of rationals is as follows</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cf_expansion</span>(<span class=\"params\">nm: <span class=\"built_in\">int</span>, dn:<span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">list</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; Continued Fraction Expansion of Rationals</span></span><br><span class=\"line\"><span class=\"string\">    Parameters:</span></span><br><span class=\"line\"><span class=\"string\">        nm - nominator</span></span><br><span class=\"line\"><span class=\"string\">        dn - denomainator</span></span><br><span class=\"line\"><span class=\"string\">    Return:</span></span><br><span class=\"line\"><span class=\"string\">        List for the abbreviated notation of the continued fraction</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    cf = []</span><br><span class=\"line\">    a, r = nm // dn, nm % dn</span><br><span class=\"line\">    cf.append(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> r != <span class=\"number\">0</span>:</span><br><span class=\"line\">        nm, dn = dn, r</span><br><span class=\"line\">        a = nm // dn</span><br><span class=\"line\">        r = nm % dn</span><br><span class=\"line\">        cf.append(a)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cf</span><br></pre></td></tr></table></figure></p></li>\n<li><p>For both rational and irrational numbers, the initial segments of their continued fraction representations produce increasingly accurate rational approximations. These rational numbers are called the convergents of the continued fraction. The even convergents continually increase, but are always less than the original number; while the odd ones continually decrease, but are always greater than the original number. Denote the numerator and denominator of the <span class=\"math inline\">\\(i\\)</span>-th convergent as <span class=\"math inline\">\\(h_i\\)</span> and <span class=\"math inline\">\\(k_i\\)</span> respectively, and define <span class=\"math inline\">\\(h_{-1}=1,h_{-2}=0\\)</span> and <span class=\"math inline\">\\(k_{-1}=0,k_{-2}=1\\)</span>, then the recursive formula for calculating the convergents is <span class=\"math display\">\\[\\begin{align}\n\\frac {h_0} {k_0} &amp;= [0] = \\frac 0 1 = 0&lt;\\frac {68}  {75}\\\\\n\\frac {h_1} {k_1} &amp;= [0;1] = \\frac 1 1 = 1&gt;\\frac {68}  {75}\\\\\n\\frac {h_2} {k_2} &amp;= [0;1,9] = \\frac 9 {10}&lt;\\frac {68}  {75}\\\\\n\\frac {h_3} {k_3} &amp;= [0;1,9,1] = \\frac {10} {11}&gt;\\frac {68}  {75}\\\\\n\\frac {h_4} {k_4} &amp;= [0;1,9,1,2] = \\frac {29} {32}&lt;\\frac {68}  {75}\\\\\n\\end{align}\\]</span> It can be verified that these convergents satisfy the aforementioned property and are getting closer to the true value. The following Python function implements a convergent generator for a given concatenated fraction expansion, and it returns a tuple of objects consisting of the convergent's numerator and denominator.</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cf_convergent</span>(<span class=\"params\">cf: <span class=\"built_in\">list</span></span>) -&gt; (<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; Calculates the convergents of a continued fraction</span></span><br><span class=\"line\"><span class=\"string\">    Parameters:</span></span><br><span class=\"line\"><span class=\"string\">        cf - list for the continued fraction expansion</span></span><br><span class=\"line\"><span class=\"string\">    Return:</span></span><br><span class=\"line\"><span class=\"string\">        A generator object of the convergent tuple</span></span><br><span class=\"line\"><span class=\"string\">        (numerator, denominator)</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    nm = [] <span class=\"comment\"># Numerator</span></span><br><span class=\"line\">    dn = [] <span class=\"comment\"># Denominators</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(cf)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"number\">0</span>:</span><br><span class=\"line\">            ni, di = cf[i], <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">            ni, di = cf[i]*cf[i-<span class=\"number\">1</span>] + <span class=\"number\">1</span>, cf[i]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>: <span class=\"comment\"># i &gt; 1</span></span><br><span class=\"line\">            ni = cf[i]*nm[i-<span class=\"number\">1</span>] + nm[i-<span class=\"number\">2</span>]</span><br><span class=\"line\">            di = cf[i]*dn[i-<span class=\"number\">1</span>] + dn[i-<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        nm.append(ni)</span><br><span class=\"line\">        dn.append(di)</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> ni, di</span><br></pre></td></tr></table></figure></p></li>\n<li><p>Regarding the convergents of continued fractions, there is also an important Legendre<a href=\"#fn4\" class=\"footnote-ref\" id=\"fnref4\" role=\"doc-noteref\"><sup>4</sup></a> theorem: Let <span class=\"math inline\">\\(a∈ \\mathbb Z, b ∈ \\mathbb Z^+\\)</span> such that <span class=\"math display\">\\[\\left\\lvert\\,f - \\frac a b\\right\\rvert&lt; \\frac 1 {2b^2}\\]</span> then <span class=\"math inline\">\\(\\frac a b\\)</span> is a convergent of the continued fraction of <span class=\"math inline\">\\(f\\)</span>.</p></li>\n</ol>\n<h4 id=\"attack-mechanism\">Attack Mechanism</h4>\n<p>Now analyze how Wiener's attack works. From the relationship between RSA public and private exponent <span class=\"math inline\">\\(ed\\equiv 1 {\\pmod {\\varphi(N)}}\\)</span>, it can be deduced that there exists an integer <span class=\"math inline\">\\(k\\)</span> such that <span class=\"math display\">\\[ed - k\\varphi(N) = 1\\]</span> Dividing both sides by <span class=\"math inline\">\\(d\\varphi(N)\\)</span> gives <span class=\"math display\">\\[\\left\\lvert\\frac e {\\varphi(N)} - \\frac k d\\right\\rvert = \\frac 1 {d{\\varphi(N)}}\\]</span> Careful observation of this formula reveals that because <span class=\"math inline\">\\(\\varphi(N)\\)</span> itself is very large, and <span class=\"math inline\">\\(\\gcd(k,d)=1\\)</span>, <span class=\"math inline\">\\(\\frac k d\\)</span> is very close to <span class=\"math inline\">\\(\\frac e {\\varphi(N)}\\)</span>. In addition, <span class=\"math display\">\\[\\varphi(N)=(p-1)(q-1)=N-(p+q)+1\\]</span> Its difference from <span class=\"math inline\">\\(N\\)</span> is also relatively small. Therefore, <span class=\"math inline\">\\(\\frac k d\\)</span> and <span class=\"math inline\">\\(\\frac e N\\)</span> also do not differ by much. Since RSA's <span class=\"math inline\">\\((N,e)\\)</span> are public, Wiener boldly conceived - <strong>if <span class=\"math inline\">\\(\\pmb{\\frac e N}\\)</span> is expanded into a continued fraction, it is possible that <span class=\"math inline\">\\(\\pmb{\\frac k d}\\)</span> is one of its convergents!</strong></p>\n<p>So how to verify if a certain convergent is indeed <span class=\"math inline\">\\(\\frac k d\\)</span>? With <span class=\"math inline\">\\(k\\)</span> and <span class=\"math inline\">\\(d\\)</span>, <span class=\"math inline\">\\(\\varphi (N)\\)</span> can be calculated, thereby obtaining <span class=\"math inline\">\\((p+q)\\)</span>. Since both <span class=\"math inline\">\\((p+q)\\)</span> and <span class=\"math inline\">\\(pq\\)</span> are known, constructing a simple quadratic equation<a href=\"#fn5\" class=\"footnote-ref\" id=\"fnref5\" role=\"doc-noteref\"><sup>5</sup></a> can solve for <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span>. If their product equals <span class=\"math inline\">\\(N\\)</span>, then <span class=\"math inline\">\\(k\\)</span> and <span class=\"math inline\">\\(d\\)</span> are correct and the attack succeeds.</p>\n<p>What are the conditions for Wiener's attack to work? Referring to Legendre's theorem mentioned above, it can be deduced that if <span class=\"math display\">\\[\\left\\lvert\\frac e N - \\frac k d\\right\\rvert &lt; \\frac 1 {2{d^2}}\\]</span> then <span class=\"math inline\">\\(\\frac k d\\)</span> must be a convergent of <span class=\"math inline\">\\(\\frac e N\\)</span>. This formula can also be used to derive an upper bound of the private exponent d for a feasible attack. Wiener's original paper states the upper bound as <span class=\"math inline\">\\(N^{\\frac 1 4}\\)</span>, but without detailed analysis. In 1999, American cryptographer Dan Boneh<a href=\"#fn6\" class=\"footnote-ref\" id=\"fnref6\" role=\"doc-noteref\"><sup>6</sup></a> provided the first rigorous proof of the upper bound, showing that under the constraints <span class=\"math inline\">\\(q&lt;p&lt;2q\\)</span> and <span class=\"math inline\">\\(e&lt;\\varphi(N)\\)</span>, Wiener's attack applies for <span class=\"math inline\">\\(d&lt;\\frac 1 3 N^{\\frac 1 4}\\)</span>. In <a href=\"https://ink.library.smu.edu.sg/cgi/viewcontent.cgi?article=8411&amp;context=sis_research\">a new paper published in 2019</a>, several researchers at the University of Wollongong in Australia further expanded the upper bound under the same constraints to <span class=\"math display\">\\[d\\leq \\frac 1 {\\sqrt[4]{18}} N^\\frac 1 4=\\frac 1 {2.06...}N^\\frac 1 4\\]</span></p>\n<p>Note that for simplicity, the above analysis of Wiener's attack mechanism is based on the Euler phi function <span class=\"math inline\">\\(\\varphi (N)\\)</span>. In reality, RSA key pairs are often generated using the Carmichael function <span class=\"math inline\">\\(\\lambda(N)\\)</span>. The relationship between the two is: <span class=\"math display\">\\[\\varphi (N)=\\lambda(n)\\cdot\\gcd(p-1,q-1)\\]</span> It can be proven that starting from <span class=\"math inline\">\\(ed≡1{\\pmod{\\lambda(N)}}\\)</span>, the same conclusions can be reached. Interested readers may refer to Wiener's original paper for details.</p>\n<h4 id=\"attack-workflow\">Attack Workflow</h4>\n<p>With an understanding of the mechanism of Wiener's attack, the attack workflow can be summarized as follows:</p>\n<ol type=\"1\">\n<li>Expand <span class=\"math inline\">\\(\\frac e N\\)</span> into a continued fraction</li>\n<li>Generate the sequence of successive convergents of this continued fraction.</li>\n<li>Iteratively check each convergent's numerator <span class=\"math inline\">\\(k\\)</span> and denominator <span class=\"math inline\">\\(d\\)</span>:\n<ul>\n<li>If <span class=\"math inline\">\\(k\\)</span> is zero, or <span class=\"math inline\">\\(d\\)</span> is even, or <span class=\"math inline\">\\(ed\\not\\equiv 1 \\pmod k\\)</span>, skip this convergent.</li>\n<li>Calculate <span class=\"math inline\">\\(\\varphi (N) = \\frac {ed-1} k\\)</span>, and solve for the integer roots p and q of the quadratic equation <span class=\"math inline\">\\(x^2−(N−φ(N)+1)x+N\\)</span>.</li>\n<li>Verify if <span class=\"math inline\">\\(N = p \\cdot q\\)</span>, if true, the attack succeeds and return <span class=\"math inline\">\\((p, q, d)\\)</span>; otherwise continue.</li>\n<li>If all convergents are checked and no match, Wiener's attack fails.</li>\n</ul></li>\n</ol>\n<p>The complete Python implementation is as follows:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve_rsa_primes</span>(<span class=\"params\">s: <span class=\"built_in\">int</span>, m: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">tuple</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; Solve RSA prime numbers (p, q) from the quadratic equation</span></span><br><span class=\"line\"><span class=\"string\">    p^2 - s * p + m = 0 with the formula p = s/2 +/- sqrt((s/2)^2 - m)</span></span><br><span class=\"line\"><span class=\"string\">    Parameters:</span></span><br><span class=\"line\"><span class=\"string\">        s - sum of primes (p + q)</span></span><br><span class=\"line\"><span class=\"string\">        m - product of primes (p * q)</span></span><br><span class=\"line\"><span class=\"string\">    Return: (p, q)</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    half_s = s &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    tmp = gmpy2.isqrt(half_s ** <span class=\"number\">2</span> - m)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(half_s + tmp), <span class=\"built_in\">int</span>(half_s - tmp)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">wiener_attack</span>(<span class=\"params\">n: <span class=\"built_in\">int</span>, e: <span class=\"built_in\">int</span></span>) -&gt; (<span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>, <span class=\"built_in\">int</span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; Wiener&#x27;s Attack on RSA public key cryptosystem</span></span><br><span class=\"line\"><span class=\"string\">    Parameters:</span></span><br><span class=\"line\"><span class=\"string\">        N - RSA modulus N = p*q</span></span><br><span class=\"line\"><span class=\"string\">        e - RSA public exponent</span></span><br><span class=\"line\"><span class=\"string\">    Return:</span></span><br><span class=\"line\"><span class=\"string\">        A tuple of (p, q, d)</span></span><br><span class=\"line\"><span class=\"string\">        p, q - the two prime factors of RSA modulus N</span></span><br><span class=\"line\"><span class=\"string\">        d - RSA private exponent</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    cfe = cf_expansion(e, n) <span class=\"comment\"># Convert e/n into a continued fraction</span></span><br><span class=\"line\">    cvg = cf_convergent(cfe) <span class=\"comment\"># Get all of its convergents</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, d <span class=\"keyword\">in</span> cvg:</span><br><span class=\"line\">        <span class=\"comment\"># Check if k and d meet the requirements</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> k == <span class=\"number\">0</span> <span class=\"keyword\">or</span> d % <span class=\"number\">2</span> == <span class=\"number\">0</span> <span class=\"keyword\">or</span> (e * d) % k != <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># assume ed ≡ 1 (mod ϕ(n))</span></span><br><span class=\"line\">        phi = (e * d - <span class=\"number\">1</span>) // k </span><br><span class=\"line\">        p, q = solve_rsa_primes(n - phi + <span class=\"number\">1</span>, n)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n == p * q:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> p, q, d</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">uint_to_bytes</span>(<span class=\"params\">x: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bytes</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot; This works only for unsigned (non-negative) integers.</span></span><br><span class=\"line\"><span class=\"string\">    It does not work for 0.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">bytes</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.to_bytes((x.bit_length() + <span class=\"number\">7</span>) // <span class=\"number\">8</span>, <span class=\"string\">&#x27;big&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">N = <span class=\"built_in\">int</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;6727075990400738687345725133831068548505159909089226&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;9093081511054056173840933739311418333016536024767844&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;14065504536979164089581789354173719785815972324079&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">e = <span class=\"built_in\">int</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;4805054278857670490961232238450763248932257077920876&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;3637915365038611552743522891345050097418639182479215&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;15546177391127175463544741368225721957798416107743&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"built_in\">int</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;5928120944877154092488159606792758283490469364444892&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;1679423458017133739626176287570534122326362199676752&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;56510422984948872954949616521392542703915478027634&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p, q, d = wiener_attack(N, e)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> d <span class=\"keyword\">is</span> <span class=\"literal\">None</span>, <span class=\"string\">&quot;Wiener&#x27;s Attack failed!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;p =&quot;</span>, p)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;q =&quot;</span>, q)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;d =&quot;</span>, d)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(uint_to_bytes(<span class=\"built_in\">pow</span>(c, d, N)))</span><br><span class=\"line\"></span><br><span class=\"line\">N = <span class=\"built_in\">int</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;22836858353287668091920368816286415778103964252589&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;28295130420474999022996621982166664596581454018899&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;48429922376560732622754871538043874356270300826321&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;16650572564937978011181394388679265524940467869924&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;85473650038355720409426235584833584188449224331698&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;63569900296911605460645581176522325967221393273906&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;69673188457131381644120787783215342848744792830245&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;01805598140668893320307200136190794138325132168722&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;14217943474001731747822701596634040292342194986951&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;94551646668806852454006312372413658692027515557841&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;41440661232146905186431357112566536770669381756925&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;38179415478954522854711968599279014482060579354284&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;55238863726089083&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">e = <span class=\"built_in\">int</span>(</span><br><span class=\"line\">    <span class=\"string\">&#x27;17160819308904585327789016134897914235762203050367&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;34632679585567058963995675965428034906637374660531&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;64750599687461192166424505919293706011293378320096&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;43372382766547546926535697752805239918767190684796&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;26509298669049485976118315666126871681847641670872&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;58895073919139366379901867664076540531765577090231&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;67209821832859747419658344363466584895316847817524&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;24703257392651850823517297420382138943770358904660&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;59442300191228592937251734592732623207324742303631&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;32436274414264865868028527840102483762414082363751&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;87208612632105886502393648156776330236987329249988&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;11429508256124902530957499338336903951924035916501&#x27;</span>\\</span><br><span class=\"line\">    <span class=\"string\">&#x27;53661610070010419&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">d = wiener_attack(N, e)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"keyword\">not</span> d <span class=\"keyword\">is</span> <span class=\"literal\">None</span>, <span class=\"string\">&quot;Wiener&#x27;s attack failed!&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;d =&quot;</span>, d)</span><br><span class=\"line\"></span><br><span class=\"line\">old_b = <span class=\"built_in\">int</span>(gmpy2.root(N, <span class=\"number\">4</span>)/<span class=\"number\">3</span>)</span><br><span class=\"line\">new_b = <span class=\"built_in\">int</span>(gmpy2.root(N, <span class=\"number\">4</span>)/gmpy2.root(<span class=\"number\">18</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;old_b =&quot;</span>, old_b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;new_b =&quot;</span>, new_b)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d &gt; old_b <span class=\"keyword\">and</span> d &lt;= new_b</span><br></pre></td></tr></table></figure>\n<p>The code above ends with two test cases. Referring to the program output below, the first test case gives a small RSA modulus <span class=\"math inline\">\\(N\\)</span> and a relatively large <span class=\"math inline\">\\(e\\)</span>, which is precisely the scenario where Wiener's attack comes into play. The program calls the attack function wiener_attack() that quickly returns <span class=\"math inline\">\\(d\\)</span> as 7, then decrypts a ciphertext and recovers the original plaintext \"Wiener's attack success!\".</p>\n<p>The second test case sets a 2048-bit <span class=\"math inline\">\\(N\\)</span> and <span class=\"math inline\">\\(e\\)</span>, and Wiener's attack also succeeds swiftly. The program also verifies that the cracked <span class=\"math inline\">\\(d\\)</span> (511 bits) is greater than the old bound <code>old_b</code> (<span class=\"math inline\">\\(N^{\\frac 1 4}\\)</span>), but slightly less than the new bound <code>new_b</code> (<span class=\"math inline\">\\(\\frac 1 {\\sqrt[4]{18}} N^\\frac 1 4\\)</span>). This confirms the conclusion of the University of Wollongong researchers.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">p = 105192975360365123391387526351896101933106732127903638948310435293844052701259</span><br><span class=\"line\">q = 63949859459297920725542167940404754256294386312715512490347273751054137071981</span><br><span class=\"line\">d = 7</span><br><span class=\"line\">b<span class=\"string\">&quot;Wiener&#x27;s attack success!&quot;</span></span><br><span class=\"line\">d = 5968166949079360555220268992852191823920023811474288738674370592596189517443887780023653031793516493806462114248181371416016184480421640973439863346079123</span><br><span class=\"line\">old_b = 4097678063688683751669784036917434915284399064709500941393388469932708726583832656910141469383433913840738001283204519671690533047637554279688711463501824</span><br><span class=\"line\">new_b = 5968166949079360962136673400587903792234115710617172051628964885379180548131448950677569697264501402772121272285767654845001503996650347315559383468867584</span><br></pre></td></tr></table></figure>\n<p>These two test cases prove the effectiveness and prerequisites of Wiener's attack. To prevent Wiener's attack, the RSA private exponent <span class=\"math inline\">\\(d\\)</span> must be greater than the upper bound. Choosing <span class=\"math inline\">\\(d\\)</span> no less than <span class=\"math inline\">\\(N^{\\frac 1 2}\\)</span> is a more prudent scheme. In practice, <a href=\"https://www.packetmania.net/en/2023/11/14/Fermats-Little-Theorem/#optimized-rsa-decryption\">the optimized decryption using Fermat's theorem and Chinese remainder theorem</a> is often used, so that even larger <span class=\"math inline\">\\(d\\)</span> can achieve fast decryption and digital signing.</p>\n<blockquote>\n<p>To be continued, stay tuned for the next article: RSA: Attack and Defense (III)</p>\n</blockquote>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>John Pollard, a British mathematician, the recipient of 1999 <a href=\"https://en.wikipedia.org/wiki/RSA_Award_for_Excellence_in_Mathematics\">RSA Award for Excellence in Mathematics</a> for major contributions to algebraic cryptanalysis of integer factorization and discrete logarithm.<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p>Richard Peirce Brent, an Australian mathematician and computer scientist, an emeritus professor at the Australian National University.<a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn3\" role=\"doc-endnote\"><p>M. Wiener, “<a href=\"https://scholar.google.com/scholar?cluster=14819867265705249637&amp;hl=en&amp;as_sdt=0,5\">Cryptanalysis of short RSA secret exponents</a>,” <em>IEEE Trans. Inform. Theory</em>, vol. 36, pp. 553–558, May 1990<a href=\"#fnref3\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn4\" role=\"doc-endnote\"><p>Adrien-Marie Legendre (1752-1833), a French mathematician who made numerous contributions to mathematics.<a href=\"#fnref4\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn5\" role=\"doc-endnote\"><p>Refer to <a href=\"https://www.packetmania.net/en/2022/08/20/picoCTF-Sum-O-Primes/\">Solve picoCTF's RSA Challenge Sum-O-Primes</a><a href=\"#fnref5\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn6\" role=\"doc-endnote\"><p>Dan Boneh, an Israeli–American professor in applied cryptography and computer security at Stanford University, a member of the National Academy of Engineering.<a href=\"#fnref6\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Technical Know-how"],"tags":["Cryptography","Network Security","Python Programming"]},{"title":"RSA: Attack and Defense (I)","url":"/en/2023/03/16/RSA-attack-defense/","content":"<p>RSA is a public-key cryptosystem built on top of an asymmetric encryption algorithm, which was jointly invented by three cryptographers and computer scientists at the Massachusetts Institute of Technology in 1977. The RSA public-key encryption algorithm and cryptosystem provide data confidentiality and signature verification functions widely used on the Internet. Since its birth, RSA has become a major research object of modern cryptography. Many cryptanalysts and information security experts have been studying its possible theoretical flaws and technical loopholes to ensure security and reliability in practical applications.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>There are certain things whose number is unknown. If we count them by threes, we have two left over; by fives, we have three left over; and by sevens, two are left over. How many things are there?</strong><br> <strong>— <em>Sunzi Suanjing, Volume 2.26</em></strong></p>\n</div>\n<p>Fortunately, after more than 40 years of extensive research and practical application tests, although many sophisticated attack methods have been discovered, RSA is generally safe. These attack methods all take advantage of the improper use of RSA or the vulnerability of software and hardware implementations, and cannot shake the security foundation of its encryption algorithm. On the other hand, the research on these attack methods shows that implementing a safe and robust RSA application is not a simple task. A consensus in cryptography and network security hardware and software engineering practice is: <strong>never roll your own cryptography!</strong><a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a> The appropriate solution is to use an existing, well-tested, and reliably maintained library or API to implement the RSA algorithm and protocol application.</p>\n<p>Here is a brief survey of the common means of attacking RSA, the mathematical mechanism on which the attack is based, and the corresponding protective measures. Referring to <a href=\"https://www.packetmania.net/en/2022/11/21/DH-and-RSA/\">the previous article</a>, let’s start by reviewing the working mechanism and process of RSA:</p>\n<ol type=\"1\">\n<li>Choose two large prime numbers <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span>, compute <span class=\"math inline\">\\(N=pq\\)</span></li>\n<li>Compute <span class=\"math inline\">\\(\\lambda(N)\\)</span>, where <span class=\"math inline\">\\(\\lambda\\)</span> is <a href=\"https://en.wikipedia.org/wiki/Carmichael_function\">Carmichael's totient function</a>\n<ul>\n<li>When both <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> are prime, <span class=\"math inline\">\\(\\lambda(pq)=\\operatorname {lcm}(p − 1, q − 1)\\)</span></li>\n<li><span class=\"math inline\">\\(\\operatorname{lcm}\\)</span> is a function to find the least common multiple, which can be calculated by the Euclidean algorithm</li>\n</ul></li>\n<li>Choose a number <span class=\"math inline\">\\(e\\)</span> that is less than <span class=\"math inline\">\\(\\lambda(N)\\)</span> and also coprime with it, then calculate the <a href=\"https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\">modular multiplicative inverse</a> of <span class=\"math inline\">\\(e\\)</span> modulo <span class=\"math inline\">\\(\\lambda(N)\\)</span>. That is <span class=\"math inline\">\\(d\\equiv e^{-1}\\pmod {\\lambda(N)}\\)</span>\n<ul>\n<li>Per the definition of modular multiplicative inverse, find <span class=\"math inline\">\\(d\\)</span> such that <span class=\"math inline\">\\((d⋅e)\\bmod\\lambda(N)=1\\)</span></li>\n<li>A modular multiplicative inverse can be found by using the <a href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\">extended Euclidean algorithm</a></li>\n</ul></li>\n<li><span class=\"math inline\">\\(\\pmb{(N,e)}\\)</span> is <strong>the public key</strong>，<span class=\"math inline\">\\(\\pmb{(N,d)}\\)</span> is <strong>the private key</strong>\n<ul>\n<li>The public key can be known by everyone, but the private key must be kept secret</li>\n<li>The records of <span class=\"math inline\">\\(p,q,\\lambda(N)\\)</span> can all be discarded</li>\n</ul></li>\n<li>The sender first converts the message into a positive integer less than <span class=\"math inline\">\\(N\\)</span> according to the agreed encoding format, then uses the receiver's public key to compute the ciphertext with the formula <span class=\"math inline\">\\(\\pmb{c\\equiv m^e\\pmod N}\\)</span></li>\n<li>After receiving the ciphertext, the receiver uses its private key to compute the plaintext <span class=\"math inline\">\\(m\\)</span> with the formula <span class=\"math inline\">\\(\\pmb{m\\equiv c^d\\pmod N}\\)</span>, then decodes it into the original message</li>\n<li>A message encrypted with the private key can also be decrypted by the public key, i.e. if <span class=\"math inline\">\\(\\pmb{s\\equiv m^d\\pmod N}\\)</span>, <span class=\"math inline\">\\(\\pmb{m\\equiv s^e\\pmod N}\\)</span>. This is the supported digital signature feature</li>\n</ol>\n<p>Note that the second and third steps in <a href=\"http://people.csail.mit.edu/rivest/Rsapaper.pdf\">the original RSA paper</a> use <a href=\"https://en.wikipedia.org/wiki/Euler%27s_totient_function\">Euler's totient function</a> <span class=\"math inline\">\\(\\varphi(N)\\)</span> instead of <span class=\"math inline\">\\(\\lambda(N)\\)</span>. The relationship between these two functions is: <span class=\"math display\">\\[\\varphi(N)=\\lambda(N)⋅\\operatorname{gcd}(p-1,q-1)\\]</span> Here <span class=\"math inline\">\\(\\operatorname{gcd}\\)</span> is the greatest common divisor function. Using <span class=\"math inline\">\\(\\lambda(N)\\)</span> can yield the minimum workable private exponent <span class=\"math inline\">\\(d\\)</span>, which is conducive to efficient decryption and signature operations. Implementations that follow the above procedure, whether using Euler's or Carmichael's functions, are often referred to as \"textbook RSA \".</p>\n<p>Textbook RSA is insecure, and there are many simple and effective means of attack. Before discussing the security holes of the textbook RSA in detail, it is necessary to review the first known attack method - integer factorization!</p>\n<h3 id=\"integer-factorization\">Integer Factorization</h3>\n<p>The theoretical cornerstone of the security of the RSA encryption algorithm is the problem of <a href=\"https://en.wikipedia.org/wiki/Integer_factorization\">factoring large numbers</a>. If we can separate <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> from the known <span class=\"math inline\">\\(N\\)</span>, we can immediately derive the private exponent <span class=\"math inline\">\\(d\\)</span> and thus completely crack RSA. Factoring large numbers is a presumed difficult computational problem. The best-known asymptotic running time algorithm is <a href=\"https://en.wikipedia.org/wiki/General_number_field_sieve\">General Number Field Sieve</a>, and its time complexity is <span class=\"math inline\">\\({\\displaystyle \\exp \\left(\\left(c+o(1)\\right)(\\ln N)^{\\frac {1}{3}}(\\ln \\ln N)^{\\frac {2}{3}}\\right)}\\)</span>, where the constant <span class=\"math inline\">\\(c = 4/\\sqrt[3]{9}\\)</span>，<span class=\"math inline\">\\(\\displaystyle \\exp\\)</span> and <span class=\"math inline\">\\(\\displaystyle \\exp\\)</span> is the exponential function of Euler's number (2.718).</p>\n<p>For a given large number, it is difficult to accurately estimate the actual complexity of applying the GNFS algorithm. However, based on the heuristic complexity empirical estimation, we can roughly see the increasing trend of computational time complexity:</p>\n<ul>\n<li>For a large number of 1024 bits, there are two prime factors of about 500 bits each, and the decomposition requires basic arithmetic operations of order <span class=\"math inline\">\\(2^{70}\\)</span></li>\n<li>For a large number of 2048 bits, there are two prime factors of about 1000 bits each, and the decomposition requires basic arithmetic operations of order <span class=\"math inline\">\\(2^{90}\\)</span>, a million times slower than the 1024-bit number</li>\n</ul>\n<p>The rapid development of computer software and hardware technology has made many tasks that seemed impossible in the past become a reality. Check the latest record released by the <a href=\"https://en.wikipedia.org/wiki/RSA_Factoring_Challenge\">RSA Factoring Challenge</a> website. In February 2020, a team led by French computational mathematician Paul Zimmermann successfully decomposed the large number RSA-250 with 250 decimal digits (829 bits):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">RSA-250 = 6413528947707158027879019017057738908482501474294344720811685963202453234463</span><br><span class=\"line\">          0238623598752668347708737661925585694639798853367</span><br><span class=\"line\">        × 3337202759497815655622601060535511422794076034476755466678452098702384172921</span><br><span class=\"line\">          0037080257448673296881877565718986258036932062711</span><br></pre></td></tr></table></figure>\n<p>announcement</p>\n<p>According to the announcement of the factorization released by Zimmerman, using a 2.1GHz Intel Xeon Gold 6130 processor, the total computing time to complete this task is about 2700 CPU core-years. This number may seem large, but in today's era of cluster computing, grid computing, and cloud computing for the masses, it's not a stretch to think that organizations with strong financial backing can reduce computing time to hours or even minutes. As an example, go to the online tool website of the free open-source mathematical software system <a href=\"https://sagecell.sagemath.org\">SageMath</a> and enter the following first 5 lines of Sage Python code:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">p=random_prime(<span class=\"number\">2</span>**<span class=\"number\">120</span>)</span><br><span class=\"line\">q=random_prime(<span class=\"number\">2</span>**<span class=\"number\">120</span>)</span><br><span class=\"line\">n=p*q</span><br><span class=\"line\"><span class=\"built_in\">print</span>(n)</span><br><span class=\"line\">factor(n)</span><br><span class=\"line\"><span class=\"comment\"># The output</span></span><br><span class=\"line\"><span class=\"number\">28912520751034191277571809785701738245635791077300278534278526509273423</span></span><br><span class=\"line\"><span class=\"number\">38293227899687810929829874029597363</span> * <span class=\"number\">755029605411506802434801930237797621</span></span><br></pre></td></tr></table></figure>\n<p>The result was obtained within minutes, and a large number of 72 decimal digits (240 bits) was decomposed. You know, in the 1977 RSA paper, it is mentioned that it takes about 104 days to decompose a 75-digit decimal number. The technological progress of mankind is so amazing!</p>\n<p>As the attacker's spear becomes sharper and sharper, the defender's shield must become thicker and thicker. Therefore, 1024-bit RSA is no longer secure, and applications should not use public key <span class=\"math inline\">\\(N\\)</span> values that are less than 2048 bits. And when high security is required, choose 4096-bit RSA.</p>\n<h3 id=\"elementary-attacks\">Elementary Attacks</h3>\n<p>Although the decomposition of large numbers is an attack method known to everyone, the security vulnerabilities caused by some low-level errors commonly found in RSA applications make it possible to use simple attacks to succeed, and some typical ones are explained below.</p>\n<ul>\n<li><p>In the early development of RSA, finding large prime numbers took quite a bit of time based on the backward computing power of the time. Therefore, some system implementations tried to share the modulus <span class=\"math inline\">\\(N\\)</span>. The idea was to generate only one set <span class=\"math inline\">\\((p,q)\\)</span>, and then all users would use the same <span class=\"math inline\">\\(N=pq\\)</span> values, with a central authority that everyone trusted assigning key pairs <span class=\"math inline\">\\((e_i,d_i)\\)</span> to each user <span class=\"math inline\">\\(i\\)</span>, and nothing would go wrong as long as the respective private keys <span class=\"math inline\">\\(d_i\\)</span> were kept. Unfortunately, this is a catastrophic mistake! This implementation has two huge security holes：</p>\n<ol type=\"1\">\n<li><p>The user <span class=\"math inline\">\\(i\\)</span> can decompose <span class=\"math inline\">\\(N\\)</span> using his own key pair <span class=\"math inline\">\\((e_i,d_i)\\)</span>. Whether <span class=\"math inline\">\\(d\\)</span> is generated using the Euler function <span class=\"math inline\">\\(\\varphi(N)\\)</span> or the Carmichael function <span class=\"math inline\">\\(\\lambda(N)\\)</span>, there are algorithms that quickly derive the prime factors <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> from a given <span class=\"math inline\">\\(d\\)</span> <a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a>. And once <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> are known, user <span class=\"math inline\">\\(i\\)</span> can compute any other user's private key <span class=\"math inline\">\\(d_j\\)</span> with one's public key <span class=\"math inline\">\\((N,e_j)\\)</span>. At this point, the other users have no secrets from user <span class=\"math inline\">\\(i\\)</span>.</p></li>\n<li><p>Even if all users do not have the knowledge and skill to decompose <span class=\"math inline\">\\(N\\)</span>, or are \"nice\" enough not to know the other users' private keys, a hacker can still perform a <mark>common modulus attack</mark> to break the users' messages. If the public keys of two users, Alice and Bob, are <span class=\"math inline\">\\(e_1\\)</span> and <span class=\"math inline\">\\(e_2\\)</span>, and <span class=\"math inline\">\\(e_1\\)</span> and <span class=\"math inline\">\\(e_2\\)</span> happen to be mutually prime (which is very likely), then by <a href=\"https://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity\">Bézout's identity</a>, the eavesdropper Eve can find that <span class=\"math inline\">\\(s\\)</span> and <span class=\"math inline\">\\(t\\)</span> satisfy: <span class=\"math display\">\\[e_{1}s+e_{2}t=gcd(e_1,e_2)=1\\]</span> At this point, if someone sends the same message <span class=\"math inline\">\\(m\\)</span> to Alice and Bob, Eve can decrypt <span class=\"math inline\">\\(m\\)</span> after recording the two ciphertexts <span class=\"math inline\">\\(c_1\\)</span> and <span class=\"math inline\">\\(c_2\\)</span> and performing the following operation: <span class=\"math display\">\\[c_1^s⋅c_2^t\\equiv(m^{e _1})^s⋅(m^{e_2})^t\\equiv m^{e_{1}s+e_{2}t}\\equiv m\\pmod N\\]</span> The corresponding Python function code is shown below.</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">common_modulus</span>(<span class=\"params\">e1, e2, N, c1, c2</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Call the extended Euclidean algorithm function</span></span><br><span class=\"line\">    g, s, t = gymp2.gcdext(e1, e2)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> g == <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> s &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Find c1&#x27;s modular multiplicative inverse\t\t        re = int(gmpy2.invert(c1, N))</span></span><br><span class=\"line\">        c1 = <span class=\"built_in\">pow</span>(re, s*(-<span class=\"number\">1</span>), N)</span><br><span class=\"line\">        c2 = <span class=\"built_in\">pow</span>(c2, t, N)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"comment\"># t is negative, find c2&#x27;s modular multiplicative inverse</span></span><br><span class=\"line\">        re = <span class=\"built_in\">int</span>(gmpy2.invert(c2, N))</span><br><span class=\"line\">        c2 = <span class=\"built_in\">pow</span>(re, t*(-<span class=\"number\">1</span>), N)</span><br><span class=\"line\">        c1 = <span class=\"built_in\">pow</span>(c1, a, N)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (c1*c2) % N</span><br></pre></td></tr></table></figure> Two library functions of gmpy2<a href=\"#fn3\" class=\"footnote-ref\" id=\"fnref3\" role=\"doc-noteref\"><sup>3</sup></a> are called here: gcdext() to implement the extended Euclidean algorithm, and invert() to find the modular multiplicative inverse element. Note that Python's exponential function pow() supports modular exponentiation, but the exponent must not be negative. Since one of <span class=\"math inline\">\\(s\\)</span> or <span class=\"math inline\">\\(t\\)</span> must be negative, you have to first call invert() to convert <span class=\"math inline\">\\(c_1\\)</span> or <span class=\"math inline\">\\(c_2\\)</span> to the corresponding modular multiplicative inverse, then invert the negative number to calculate the modular exponent. For example, lines 7 and 8 above implement <span class=\"math inline\">\\(c_1^s=(c_1^{-1})^{-s}\\bmod N\\)</span>.</p></li>\n</ol></li>\n<li><p>Is it possible to reuse only <span class=\"math inline\">\\(p\\)</span> or <span class=\"math inline\">\\(q\\)</span> since the shared modulus <span class=\"math inline\">\\(N\\)</span> is proven to be insecure? This seems to avoid the common-modulus attack and ensure that each user's public key <span class=\"math inline\">\\(N\\)</span> value is unique. Big mistake! This is an even worse idea! The attacker gets the public <span class=\"math inline\">\\(N\\)</span> values of all users and simply combines <span class=\"math inline\">\\((N_1,N_2)\\)</span> pairwise to solve Euclid's algorithm for the great common divisor, and a successful solution gives a prime factor <span class=\"math inline\">\\(p\\)</span>, and a simple division gives the other prime factor <span class=\"math inline\">\\(q\\)</span>. With <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span>, the attacker can immediately compute the user's private key <span class=\"math inline\">\\(d\\)</span>. This is the <mark>non-coprime modulus attack</mark>.</p></li>\n<li><p>When applying textbook RSA, if both the public exponent <span class=\"math inline\">\\(e\\)</span> and the plaintext <span class=\"math inline\">\\(m\\)</span> are small, such that <span class=\"math inline\">\\(c=m^e&lt;N\\)</span>, the plaintext <span class=\"math inline\">\\(m\\)</span> can be obtained by directly calculating the <span class=\"math inline\">\\(e\\)</span>th root of the ciphertext <span class=\"math inline\">\\(c\\)</span>. Even if <span class=\"math inline\">\\(m^e&gt;N\\)</span> but not large enough, then since <span class=\"math inline\">\\(m^e=c+k⋅N\\)</span>, you can loop through the small <span class=\"math inline\">\\(k\\)</span> values to perform <mark>brute-force root extraction cracking</mark>. Here is the Python routine:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">crack_small</span>(<span class=\"params\">c, e, N, repeat</span>)</span><br><span class=\"line\">    times = <span class=\"number\">0</span></span><br><span class=\"line\">    msg = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(repeat):</span><br><span class=\"line\">        m, is_exact = gmpy2.iroot(c + times, e)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> is_exact <span class=\"keyword\">and</span> <span class=\"built_in\">pow</span>(m, e, N) == c:</span><br><span class=\"line\">            msg = <span class=\"built_in\">int</span>(m)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        times += N</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg</span><br></pre></td></tr></table></figure> Here the gmpy2 library function iroot() is called to find the <span class=\"math inline\">\\(e\\)</span>th root.</p></li>\n<li><p>Textbook RSA is <strong>deterministic</strong>, meaning that the same plaintext <span class=\"math inline\">\\(m\\)</span> always generates the same ciphertext <span class=\"math inline\">\\(c\\)</span>. This makes <mark>codebook attack</mark> possible: the attacker precomputes all or part of the <span class=\"math inline\">\\(m\\to c\\)</span> mapping table and saves, then simply searches the intercepted ciphertext for a match. Determinism also means that textbook RSA is not semantically secure and that the ciphertext can reveal some information about the plaintext. Repeated occurrences of the ciphertext indicate that the sender is sending the same message over and over again.</p></li>\n<li><p>Textbook RSA is <strong>malleable</strong>, where a particular form of algebraic operation is performed on the ciphertext and the result is reflected in the decrypted plaintext. For example, if there are two plaintexts <span class=\"math inline\">\\(m_1\\)</span> and <span class=\"math inline\">\\(m_2\\)</span>, and encryption yields <span class=\"math inline\">\\(c_1=m_1^e\\bmod N\\)</span> and <span class=\"math inline\">\\(c_2=m_2^e\\bmod N\\)</span>, what does <span class=\"math inline\">\\((c_1⋅c_2)\\)</span> decryption yield? Look at the following equation: <span class=\"math display\">\\[(c_1⋅c_2)^d\\equiv m_1^{ed}⋅m_2^{ed}\\equiv m_1⋅m_2\\pmod N\\]</span> So the plaintext obtained after decrypting the product of the two ciphertexts is equal to the product of the two plaintexts. This feature is detrimental to RSA encryption systems in general and provides an opportunity for <mark>chosen-ciphertext attack</mark>. The following are two examples of attack scenarios:</p>\n<ol type=\"1\">\n<li><p>Imagine that there is an RSA decryption machine that can decrypt messages with an internally saved private key <span class=\"math inline\">\\((N,d)\\)</span>. For security reasons, the decryptor will reject repeated input of the same ciphertext. An attacker, Marvin, finds a piece of ciphertext <span class=\"math inline\">\\(c\\)</span> that is rejected by the decryptor when he enters it directly because the ciphertext <span class=\"math inline\">\\(c\\)</span> has been decrypted before. Marvin finds a way to crack it. He prepares a plaintext <span class=\"math inline\">\\(r\\)</span> himself, encrypts it with the public key <span class=\"math inline\">\\((N,e)\\)</span> to generate a new ciphertext <span class=\"math inline\">\\(c&#39;={r^e}c\\bmod N\\)</span>, and then feeds the ciphertext <span class=\"math inline\">\\(c&#39;\\)</span> to the decryptor. The decryption machine has not decrypted this new ciphertext, so it will not reject it. The result of the decryption is <span class=\"math display\">\\[m&#39;\\equiv (c&#39;)^d\\equiv r^{ed}c^d\\equiv rm\\pmod N\\]</span> Now that Marvin has <span class=\"math inline\">\\(m&#39;\\)</span>, he can calculate <span class=\"math inline\">\\(m\\)</span> using the formula <span class=\"math inline\">\\(m\\equiv m&#39;r^{-1}\\pmod N\\)</span>.</p></li>\n<li><p>Suppose Marvin wants Bob to sign a message <span class=\"math inline\">\\(m\\)</span>, but Bob refuses to do so after reading the message content. Marvin can achieve his goal by using an attack called <mark>blinding</mark><a href=\"#fn4\" class=\"footnote-ref\" id=\"fnref4\" role=\"doc-noteref\"><sup>4</sup></a>. He picks a random message <span class=\"math inline\">\\(r\\)</span>, generates <span class=\"math inline\">\\(m&#39;={r^e}m\\bmod N\\)</span>, and then takes <span class=\"math inline\">\\(m&#39;\\)</span> to Bob to sign. Bob probably thinks <span class=\"math inline\">\\(m&#39;\\)</span> is irrelevant and signs it. The result of Bob's signature is <span class=\"math inline\">\\(s&#39;=(m&#39;)^d\\bmod N\\)</span>. Now Marvin has Bob's signature on the original message <span class=\"math inline\">\\(m\\)</span> using the formula <span class=\"math inline\">\\(s=s&#39;r^{-1}\\bmod N\\)</span>. Why? The reason is that <span class=\"math display\">\\[s^e\\equiv (s&#39;)^er^{-e}\\equiv (m&#39;)^{ed}r^{-e}\\equiv m&#39;r^{-e}\\equiv m\\pmod N\\]</span></p></li>\n</ol></li>\n</ul>\n<p>The above is by no means a complete list of elementary attack methods, but they are illustrative. In practical RSA applications, we must be very careful and should do the following:</p>\n<ul>\n<li>generate a unique public key modulus <span class=\"math inline\">\\(N\\)</span> for each user individually to prevent common-mode attacks</li>\n<li>not reuse the prime factor to generate the public key modulus <span class=\"math inline\">\\(N\\)</span>, to eliminate the non-coprime modulus attack</li>\n</ul>\n<p>For the textbook RSA deterministic and malleable flaws, and possible brute-force root extraction cracking vulnerabilities, the padding with random elements method can be used to protect against them, and the protection is valid due to the following:</p>\n<ul>\n<li>Padding ensures that the number of bits in the encrypted message is close to <span class=\"math inline\">\\(N\\)</span>, while not using small <span class=\"math inline\">\\(e\\)</span> values, making possible brute-force root extraction cracking ineffective</li>\n<li>Random padding makes the same plaintext produce different ciphertexts, guaranteeing semantic security and making ciphertext attacks impossible</li>\n<li>Strictly format-defined padding destroys malleability and reduces the possibility of ciphertext selection attacks. For example, if the first few bytes after padding must be a given value, the decrypted data will most likely not conform to the predefined format after the algebraic operation on the corresponding ciphertext, which disrupts the ciphertext selection attack.</li>\n</ul>\n<h3 id=\"low-public-exponent-attacks\">Low Public Exponent Attacks</h3>\n<p>Using low public exponent is dangerous, and there are advanced attacks in the case of non-padding or improper padding, even if brute-force root extraction cracking does not succeed.</p>\n<h4 id=\"broadcast-attack\">Broadcast Attack</h4>\n<p>Discovered by Swedish theoretical computer scientist Johan Håstad <a href=\"#fn5\" class=\"footnote-ref\" id=\"fnref5\" role=\"doc-noteref\"><sup>5</sup></a>, hence the name <mark>Håstad's Broadcast Attack</mark>. Consider this simplified scenario, assuming that Alice needs to send the same message <span class=\"math inline\">\\(m\\)</span> to Bob, Carol, and Dave. The public keys of the three recipients are <span class=\"math inline\">\\((N_1,3)\\)</span>, <span class=\"math inline\">\\((N_2,3)\\)</span>, and <span class=\"math inline\">\\((N_3,3)\\)</span>, i.e., the public exponent is all 3 and the public key modulus is different for each. The messages are not padded and Alice directly encrypts and sends three ciphertexts <span class=\"math inline\">\\(c_1,c_2,c_3\\)</span> using the public keys of the other three:</p>\n<p><span class=\"math display\">\\[\\begin{cases}\nc_1=m^3\\bmod N_1\\\\\nc_2=m^3\\bmod N_2\\\\\nc_3=m^3\\bmod N_3\n\\end{cases}\\]</span></p>\n<p>At this point Eve secretly writes down the three ciphertexts, marking <span class=\"math inline\">\\(M=m^3\\)</span>, and if she can recover <span class=\"math inline\">\\(M\\)</span>, running a cube root naturally yields the plaintext <span class=\"math inline\">\\(m\\)</span>. Obviously, the common modulus attack does not hold here, and we can also assume that the moduli are pairwise coprime, or else decomposing the modulus using the non-coprime modulus attack will work. So does Eve have a way to compute <span class=\"math inline\">\\(M\\)</span>? The answer is yes.</p>\n<p>In fact, the equivalent problem for solving <span class=\"math inline\">\\(M\\)</span> here is: Is there an efficient algorithm for solving a number that has known remainders of the Euclidean division by several integers, under the condition that the divisors are pairwise coprime? This efficient algorithm is <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\"><strong>Chinese Remainder Theorem</strong></a>!</p>\n<p>The Chinese remainder theorem gives the criterion that a system of one-element linear congruence equations has a solution and the method to solve it. For the following system of one-element linear congruence equations (be careful not to confuse it with the mathematical notation used to describe the attack scenario above):</p>\n<p><span class=\"math display\">\\[(S) : \\quad \\left\\{ \n\\begin{matrix} x \\equiv a_1 \\pmod {m_1} \\\\\nx \\equiv a_2 \\pmod {m_2} \\\\\n\\vdots \\qquad\\qquad\\qquad \\\\\nx \\equiv a_n \\pmod {m_n} \\end\n{matrix} \\right.\\]</span></p>\n<p>Suppose that the integers <span class=\"math inline\">\\(m_1,m_2,\\ldots,m_n\\)</span> are pairwise coprime, then the system of equations <span class=\"math inline\">\\((S)\\)</span> has a solution for any integer <span class=\"math inline\">\\(a_1,a_2,\\ldots,a_n\\)</span> and the general solution can be constructed in four steps as follows:</p>\n<p><span class=\"math display\">\\[\\begin{align}\nM &amp;= m_1 \\times m_2 \\times \\cdots \\times m_n = \\prod_{i=1}^n m_i \\tag{1}\\label{eq1}\\\\\nM_i &amp;= M/m_i, \\; \\; \\forall i \\in \\{1, 2, \\cdots , n\\}\\tag{2}\\label{eq2}\\\\\nt_i M_i &amp;\\equiv 1\\pmod {m_i},  \\; \\; \\forall i \\in \\{1, 2, \\cdots , n\\}\\tag{3}\\label{eq3}\\\\\nx &amp;=kM+\\sum_{i=1}^n a_i t_i M_i\\tag{4}\\label{eq4}\n\\end{align}\\]</span></p>\n<p>The last line above, Eq. (4) gives the formula of the general solution. In the sense of modulus <span class=\"math inline\">\\(M\\)</span>, the unique solution is <span class=\"math inline\">\\(\\sum_{i=1}^n a_i t_i M_i \\bmod M\\)</span>.</p>\n<details class=\"note primary\"><summary><p>Try to solve the things whose number is unknown problem at the beginning of this article by using the Chinese remainder theorem</p>\n</summary>\n<p>First, correspond the variable symbols to the values: <span class=\"math display\">\\[m_1=3,a_1=2;\\quad m_2=5,a_2=3;\\quad m_3=7,a_3=2\\]</span> Then calculate <span class=\"math inline\">\\(M=3\\times5\\times7=105\\)</span>, which in turn leads to the derivation of： <span class=\"math display\">\\[\\begin{align}\nM_1 &amp;=M/m_1=105/3=35,\\quad t_1=35^{-1}\\bmod 3 = 2\\\\\nM_2 &amp;=M/m_2=105/5=21,\\quad t_2=21^{-1}\\bmod 5 = 1\\\\\nM_3 &amp;=M/m_3=105/7=15,\\quad t_3=15^{-1}\\bmod 7 = 1\\\\\n\\end{align}\\]</span> Finally, take these into the general solution formula: <span class=\"math display\">\\[x=k⋅105+(2⋅35⋅2+3⋅21⋅1+2⋅15⋅1)=k⋅105+233\\]</span> So the smallest positive integer solution concerning modulus 105 is <span class=\"math inline\">\\(233\\bmod 105=23\\)</span>。</p>\n<p>In his mathematical text \"Suanfa Tongzong\", Cheng Dawei, a mathematician of the Ming Dynasty in the 16th century, compiled the solutions recorded by the mathematician Qin Jiushao of the Song Dynasty in the \"Mathematical Treatise in Nine Sections\" into a catchy \"Sun Tzu's Song\":</p>\n<blockquote>\n<p>Three friends set out with seventy rare<br />\nTwenty-one blossoms on five trees of plums<br />\nSeven men reunited at the half-month<br />\nAll be known once divided by one hundred and five</p>\n</blockquote>\n<p>Here we must admire the wisdom of the ancient Chinese who, in the absence of a modern mathematical symbol system, were able to derive and summarize such an ingenious solution, contributing an important mathematical theorem to mankind.</p>\n\n</details>\n<p>So Eve just applies the solution of the Chinese Remainder Theorem, computes <span class=\"math inline\">\\(M\\)</span>, and then finds its cube root to get the plaintext <span class=\"math inline\">\\(m\\)</span>, and the attack succeeds. More generally, setting the number of receivers to <span class=\"math inline\">\\(k\\)</span>, if all receivers use the same <span class=\"math inline\">\\(e\\)</span>, then this broadcast attack is feasible as long as <span class=\"math inline\">\\(k\\ge e\\)</span>.</p>\n<p>Håstad further proves that even if padding is used to prevent broadcast attacks, if the messages generated by the padding scheme are linearly related to each other, such as using the formula <span class=\"math inline\">\\(m_i=i2^b+m\\)</span> (<span class=\"math inline\">\\(b\\)</span> is the number of bits of <span class=\"math inline\">\\(m\\)</span>) to generate the message sent to the receiver <span class=\"math inline\">\\(i\\)</span>, then the broadcast attack can still recover the plaintext <span class=\"math inline\">\\(m\\)</span> as long as <span class=\"math inline\">\\(k&gt;e\\)</span>. The broadcast attack in this case is still based on the Chinese remainder theorem, but the specific cracking method depends on the information of the linear relationship.</p>\n<p>To summarize the above analysis, to prevent the broadcast attack, we must use a higher public exponent <span class=\"math inline\">\\(e\\)</span> and apply random padding at the same time. Nowadays, the common public key exponent <span class=\"math inline\">\\(e\\)</span> is 65537 (<span class=\"math inline\">\\(2^{16}+1\\)</span>), which can balance the efficiency and security of message encryption or signature verification operations.</p>\n<p>Last, Python routines for simulating broadcast attacks are given as follows:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve_crt</span>(<span class=\"params\">ai: <span class=\"built_in\">list</span>, mi: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;mi and ai are the list of modulus and remainders. </span></span><br><span class=\"line\"><span class=\"string\">       The precondition of the function is that the modulus </span></span><br><span class=\"line\"><span class=\"string\">       in the mi list are pairwise coprime.&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    M = reduce(<span class=\"keyword\">lambda</span> x, y: x * y, mi)</span><br><span class=\"line\">    ti = [a * (M//m) * <span class=\"built_in\">int</span>(gmpy2.invert(M//m, m)) <span class=\"keyword\">for</span> (m, a) <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(mi, ai)]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> reduce(<span class=\"keyword\">lambda</span> x, y: x + y, ti) % M</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">rsa_broadcast_attack</span>(<span class=\"params\">ctexts: <span class=\"built_in\">list</span>, moduli: <span class=\"built_in\">list</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;RSA broadcast attack: applying CRT to crack e=3&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    c0, c1, c2 = ctexts[<span class=\"number\">0</span>], ctexts[<span class=\"number\">1</span>], ctexts[<span class=\"number\">2</span>]</span><br><span class=\"line\">    n0, n1, n2 = moduli[<span class=\"number\">0</span>], moduli[<span class=\"number\">1</span>], moduli[<span class=\"number\">2</span>]</span><br><span class=\"line\">    m0, m1, m2 = n1 * n2, n0 * n2, n0 * n1</span><br><span class=\"line\">    t0 = (c0 * m0 * <span class=\"built_in\">int</span>(gmpy2.invert(m0, n0)))</span><br><span class=\"line\">    t1 = (c1 * m1 * <span class=\"built_in\">int</span>(gmpy2.invert(m1, n1)))</span><br><span class=\"line\">    t2 = (c2 * m2 * <span class=\"built_in\">int</span>(gmpy2.invert(m2, n2)))</span><br><span class=\"line\">    c = (t0 + t1 + t2) % (n0 * n1 * n2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(gmpy2.iroot(c, <span class=\"number\">3</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">uint_to_bytes</span>(<span class=\"params\">x: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bytes</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;convert unsigned integer to byte array&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">bytes</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x.to_bytes((x.bit_length() + <span class=\"number\">7</span>) // <span class=\"number\">8</span>, <span class=\"string\">&#x27;big&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">quote = <span class=\"string\">b&#x27;The cosmos is within us. We are made of star stuff. - Carl Sagan&#x27;</span></span><br><span class=\"line\">bob = RSA(<span class=\"number\">1024</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">carol = RSA(<span class=\"number\">1024</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">dave = RSA(<span class=\"number\">1024</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">cipher_list = [bob.encrypt(quote), carol.encrypt(quote), dave.encrypt(quote)]</span><br><span class=\"line\">modulus_list = [bob.n, carol.n, dave.n]</span><br><span class=\"line\"></span><br><span class=\"line\">cracked_cipher = solve_crt(cipher_list, modulus_list)</span><br><span class=\"line\">cracked_int = <span class=\"built_in\">int</span>(gmpy2.iroot(cracked_cipher, <span class=\"number\">3</span>)[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">assert</span> cracked_int == rsa_broadcast_attack(cipher_list, modulus_list)</span><br><span class=\"line\"></span><br><span class=\"line\">hacked_quote = uint_to_bytes(cracked_int)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> hacked_quote == quote</span><br></pre></td></tr></table></figure>\n<p>This code uses two methods to simulate the broadcast attack. One calls the generic Chinese remainder theorem solver function <code>solve_crt()</code> and then gets the cube root of the result; the other calls the special broadcast attack function <code>rsa_broadcast_attack()</code> for the public key index <span class=\"math inline\">\\(e=3\\)</span>, which directly outputs the cracked plaintext value. The internal implementation of these two functions is based on the generalized formula of the Chinese remainder theorem, and the output results should be identical. The cracked plaintext value is then input to the <code>uint_to_bytes()</code> function, which is converted into a byte array to compare with the original <code>quote</code>. Note that the program uses objects generated by the RSA class to simulate the receivers Bob, Carroll, and Dave, and the implementation of the RSA class is omitted here given the limitation of space.</p>\n<blockquote>\n<p>Next article: <a href=\"https://www.packetmania.net/en/2023/11/17/RSA-attack-defense-2/\">RSA: Attack and Defense (II)</a></p>\n</blockquote>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>American computer scientist and security expert Gary McGraw has a famous piece of advice for software developers - \"<a href=\"http://web.archive.org/web/20030629085904/http://www-106.ibm.com/developerworks/library/s-everything.html#author1\">never roll your own cryptography</a>\"<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p>The original RSA paper (Part IX, Section C) did mention <a href=\"https://www.cs.cmu.edu/~glmiller/Publications/Papers/Mi76.pdf\">Miller's algorithm</a> for factoring <span class=\"math inline\">\\(N\\)</span> with a known <span class=\"math inline\">\\(d\\)</span>. This algorithm also applies to <span class=\"math inline\">\\(d\\)</span> generated by the Carmichael function <span class=\"math inline\">\\(\\lambda(N)\\)</span>.<a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn3\" role=\"doc-endnote\"><p>gmpy2 is a Python extension module written in C that supports multi-precision arithmetic.<a href=\"#fnref3\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn4\" role=\"doc-endnote\"><p>On some special occasions, blinding can be used for effective privacy protection. For example, in cryptographic election systems and digital cash applications, the signer and the message author can be different.<a href=\"#fnref4\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn5\" role=\"doc-endnote\"><p>Johan Håstad, a Swedish theoretical computer scientist, a professor at the KTH Royal Institute of Technology, and a Fellow of the American Mathematical Society (AMS) and an Association for Computing Machinery (ACM) fellow.<a href=\"#fnref5\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Technical Know-how"],"tags":["Cryptography","Network Security","Python Programming"]},{"title":"Please Stop Using TLS 1.0 and TLS 1.1 Now!","url":"/en/2022/11/10/Stop-TLS1-0-TLS1-1/","content":"<p>In March 2021, the Internet Engineering Task Force (IETF) released <a href=\"https://tools.ietf.org/html/rfc8996\">RFC 8996</a>, classified as a current best practice, officially announcing the deprecation of the TLS 1.0 and TLS 1.1 protocols. If your applications and web services are still using these protocols, please stop immediately and update to TLS 1.2 or TLS 1.3 protocol versions as soon as possible to eliminate any possible security risks. <span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>One single vulnerability is all an attacker needs.</strong><br> <strong>— <em>Window Snyder</em> (American computer security expert, former Senior Security Strategist at Microsoft, and has been a top security officer at Apple, Intel and other companies)</strong></p>\n</div>\n<h3 id=\"rfc-interpretation\">RFC Interpretation</h3>\n<p>The document title of <a href=\"https://tools.ietf.org/html/rfc8996\">RFC 8996</a> is quite straightforward, \"Deprecating TLS 1.0 and TLS 1.1\". So what is the rationale it gives? Here is a simple interpretation.</p>\n<p>First, take a look at its abstract:</p>\n<blockquote>\n<p><em>This document formally deprecates Transport Layer Security (TLS) versions 1.0 (RFC 2246) and 1.1 (RFC 4346). Accordingly, those documents have been moved to Historic status. These versions lack support for current and recommended cryptographic algorithms and mechanisms, and various government and industry profiles of applications using TLS now mandate avoiding these old TLS versions. TLS version 1.2 became the recommended version for IETF protocols in 2008 (subsequently being obsoleted by TLS version 1.3 in 2018), providing sufficient time to transition away from older versions. Removing support for older versions from implementations reduces the attack surface, reduces opportunity for misconfiguration, and streamlines library and product maintenance.</em></p>\n<p><em>This document also deprecates Datagram TLS (DTLS) version 1.0 (RFC 4347) but not DTLS version 1.2, and there is no DTLS version 1.1.</em></p>\n<p><em>This document updates many RFCs that normatively refer to TLS version 1.0 or TLS version 1.1, as described herein. This document also updates the best practices for TLS usage in RFC 7525; hence, it is part of BCP 195.</em></p>\n</blockquote>\n<p>The information given here is clear, the reasons for deprecating them are purely technical. TLS 1.0 and TLS 1.1 cannot support stronger encryption algorithms and mechanisms, and cannot meet the high-security requirements of various network applications in the new era. TLS is TCP-based. Corresponding to the UDP-based DTLS protocol, RFC 8996 also announced the deprecation of the DTLS 1.0 protocol.</p>\n<p>The Introduction section lists some details of the technical reasons:</p>\n<ol type=\"1\">\n<li>They require the implementation of older cipher suites that are no longer desirable for cryptographic reasons, e.g., TLS 1.0 makes TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA mandatory to implement.</li>\n<li>There is a lack of support for current recommended cipher suites, especially <a href=\"https://en.wikipedia.org/wiki/Authenticated_encryption\">authenticated encryption with associated Data (AEAD)</a>, which were not supported prior to TLS 1.2.</li>\n<li>The integrity of the handshake depends on SHA-1 hash.</li>\n<li>The authentication of the peers depends on SHA-1 signatures.</li>\n<li>Support for four TLS protocol versions increases the likelihood of misconfiguration.</li>\n<li>At least one widely used library has plans to drop TLS 1.1 and TLS 1.0 support in upcoming releases.</li>\n</ol>\n<p>Clauses 5 and 6 above are clear and need no further explanation.</p>\n<p>For 3DES mentioned in Clause 1, although it uses three independent keys with a total length of 168 bits, considering the possible <a href=\"https://en.wikipedia.org/wiki/Meet-in-the-middle_attack\">meet-in-the-middle_attack</a> attack, its effective key strength is only 112 bits. Also, the 3DES encryption block length is still 64 bits, which makes it extremely vulnerable to <a href=\"https://en.wikipedia.org/wiki/Birthday_attack\">birthday attack</a> (see <a href=\"https://sweet32.info/\">Sweet32</a>). NIST stipulates that a single 3DES key group can only be used for encrypting <span class=\"math inline\">\\(2^{20}\\)</span> data blocks (ie 8MB). This was of course too small, and eventually, NIST decided in 2017 to deprecate 3DES in the IPSec and TLS protocols.</p>\n<p>3DES is just one example, another category that has been phased out earlier is cipher suites that use RC4 stream ciphers, see <a href=\"https://tools.ietf.org/html/rfc7465\">RFC 7465</a> for details. In addition, there are various problems in the implementation of block cipher CBC mode, which are often exploited by attackers to crack TLS sessions. A summary of various attacks and countermeasures of TLS 1.0 and TLS 1.1 is described in detail in <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r2.pdf\">NIST800-52r2</a> and <a href=\"https://tools.ietf.org/html/rfc7457\">RFC7457</a>. These two reference documents provide the key rationale for deprecation. Obviously, any protocol that mandates the implementation of insecure cipher suites should be on the list to be eliminated.</p>\n<p>In the second section of the document, the content in Section 1.1 \"The History of TLS\" of NIST800-52r2 is directly quoted (abbreviated as shown in the following table):</p>\n<table>\n<colgroup>\n<col style=\"width: 36%\" />\n<col style=\"width: 36%\" />\n<col style=\"width: 28%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">TLS Version</th>\n<th style=\"text-align: center;\">Protocol Document</th>\n<th style=\"text-align: left;\">Key Feature Update</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1.1</td>\n<td style=\"text-align: center;\"><a href=\"https://tools.ietf.org/html/rfc4346\">RFC 4346</a></td>\n<td style=\"text-align: left;\">Improved initialization vector selection and padding error processing to address weaknesses discovered on the CBC mode of operation defined in TLS 1.0.</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1.2</td>\n<td style=\"text-align: center;\"><a href=\"https://tools.ietf.org/html/rfc5246\">RFC 5246</a></td>\n<td style=\"text-align: left;\">Enhanced encryption algorithms, particularly in the area of hash functions, can support SHA-2 series algorithms for hashing, MAC, and pseudorandom function computations, also added AEAD cipher suite.</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1.3</td>\n<td style=\"text-align: center;\"><a href=\"https://tools.ietf.org/html/rfc8446\">RFC 8446</a></td>\n<td style=\"text-align: left;\">A significant change to TLS that aims to address threats that have arisen over the years. Among the changes are a new handshake protocol, a new key derivation process that uses the HMAC-based Extract-and-Expand Key Derivation Function (HKDF), and the removal of cipher suites that use RSA key transport or static Diffie-Hellman key exchanges, the CBC mode of operation, or SHA-1.</td>\n</tr>\n</tbody>\n</table>\n<p>AEAD is an encryption mode that can guarantee the confidentiality, integrity, and authenticity of data at the same time, typically such as CCM and GCM. TLS 1.2 introduced a range of AEAD cipher suites, and its high security made it the exclusive choice for TLS 1.3. These annotate Clause 2 of technical reasons.</p>\n<p>Clauses 3 and 4 of technical reasons call out SHA-1, so what is the problem with SHA-1? Section 3 of the document cites a paper by two French researchers, Karthikeyan Bhargavan and Gaetan Leurent .</p>\n<p>As a cryptographic hash function, SHA-1 was designed by the National Security Agency (NSA) and then published as a Federal Information Processing Standard (FIPS) by the National Institute of Standards and Technology (NIST). SHA-1 can process a message up to <span class=\"math inline\">\\(2^{64}\\)</span> bits and generate a 160-bit (20-byte) hash value known as the message digest. Therefore, the complexity of brute force cracking based on birthday attack is <span class=\"math inline\">\\(2^{80}\\)</span> operations. In 2005, Chinese cryptographer Wang Xiaoyun and her research team made a breakthrough in this field. The high-efficiency SHA-1 attack method they published can be used to find a hash collision within a computational complexity of <span class=\"math inline\">\\(2^{63}\\)</span>. This has brought a huge impact on the security of SHA-1, but it does not mean that the cracking method can enter the practical stage.</p>\n<p>Network security protocols (such as TLS, IKE, and SSH, etc.) rely on the second preimage resistance of cryptographic hash functions, that is, it is computationally impossible to find any secondary input value that has the same output as a specific input value. For example, for a cryptographic hash function <span class=\"math inline\">\\(h(x)\\)</span> and given input <span class=\"math inline\">\\(x\\)</span>, it is difficult to find a sub-preimage <span class=\"math inline\">\\(x^′ ≠ x\\)</span> that is satisfying <span class=\"math inline\">\\(h(x) = h(x^′)\\)</span>. Because finding a hash collision does not mean that a sub-preimage can be located, in practice, it was once thought that continuing to use SHA-1 is not a problem.</p>\n<p>However, in 2016, Bhargavan and Leurent (who implemented the aforementioned Sweet32 attack against 64-bit block ciphers) discovered a new class of methods to attack key exchange protocols that shattered this perception. These methods are based on the principle of the <a href=\"https://en.wikipedia.org/wiki/Collision_attack#Chosen-prefix_collision_attack\">chosen prefix collision attack</a>. That is, given two different prefixes <span class=\"math inline\">\\(p_1\\)</span> and <span class=\"math inline\">\\(p_2\\)</span>, the attack finds two appendages <span class=\"math inline\">\\(m_1\\)</span> and <span class=\"math inline\">\\(m_2\\)</span> such that <span class=\"math inline\">\\(h(p_1 ∥ m_1) = hash(p_2 ∥ m_2)\\)</span>. Using this approach, they demonstrated a man-in-the-middle attack against TLS clients and servers to steal sensitive data, and also showed that the attack could be used to masquerade and downgrade during TLS 1.1, IKEv2, and SSH-2 session handshakes. In particular, they proved that with only <span class=\"math inline\">\\(2^{77}\\)</span> operations the handshake protocol using SHA-1 or MD5 and SHA-1 concatenated hash values ​​could be cracked.</p>\n<p>Since neither TLS 1.0 nor TLS 1.1 allows the peers to choose a stronger cryptographic hash function for signatures in the ServerKeyExchange or CertificateVerify messages, the IETF confirmed that using a newer protocol version is the only upgrade path.</p>\n<p>Sections 4 and 5 of the document again clarify that TLS 1.0 and TLS 1.1 must not be used, and negotiation to TLS 1.0 or TLS 1.1 from any TLS version is not allowed. This means that ClientHello.client_version and ServerHello.server_version issued by the TLS client and server, respectively, must not be {03,01} (TLS 1.0) or {03,02} (TLS 1.1). If the protocol version number in the Hello message sent by the other party is {03,01} or {03,02}, the local must respond with a \"protocol_version\" alert message and close the connection.</p>\n<p>It is worth noting that due to historical reasons, the TLS specification does not specify the value of the record layer version number (TLSPlaintext.version) when the client sends the ClientHello message. So to maximize interoperability, TLS servers MUST accept any value {03,XX} (including {03,00}) as the record layer version number for ClientHello messages, but they MUST NOT negotiate TLS 1.0 or 1.1.</p>\n<p>Section 6 of the document declares a textual revision to the previously published RFC 7525 (Recommendations for the Secure Use of TLS and DTLS). Three places in this RFC change implementation-time negotiations of TLS 1.0, TLS 1.1, and DTLS 1.0 from \"SHOULD NOT\" to \"MUST NOT\". The last section is a summary of standard RFC operations and security considerations.</p>\n<h3 id=\"industry-responses\">Industry Responses</h3>\n<p>In the industry of large public online services, GitHub was the first to act. They started disabling TLS 1.0 and TLS 1.1 in all HTTPS connections back in February 2018, while also phasing out insecure <code>diffie-hellman-group1-sha1</code> and <code>diffie-hellman-group14-sha1</code> key exchange algorithms in the SSH connection service. In August 2018, Eric Rescorla, CTO of Mozilla Firefox, published the TLS 1.3 technical specification <a href=\"https://tools.ietf.org/html/rfc8996\">RFC 8446</a>. Two months later, Mozilla issued a statement together with the three giants of Apple, Google, and Microsoft, and put the deprecation of TLS 1.0 and TLS 1.1 on the agenda.</p>\n<p>The following is a brief summary of the actions of several related well-known companies:</p>\n<ul>\n<li><strong>Microsoft:</strong> For Office 365 services, TLS 1.0 and 1.1 disabling for commercial customers was temporarily suspended due to COVID-19. The mandatory rollout of TLS 1.2 was restarted on October 15, 2020. Users of SharePoint and OneDrive will need to update and configure .NET to support TLS 1.2. Users of Teams Rooms recommend upgrading the app to version 4.0.64.0. The Surface Hub released support for TLS 1.2 in May 2019. The Edge browser version 84 does not use TLS 1.0/1.1 by default, while the Azure cloud computing service will permanently obsolete TLS 1.0/1.1 from March 31, 2022.</li>\n<li><strong>Google:</strong> As early as 2018, TLS 1.3 was added to Chrome 70. Starting with Chrome 84, support for TLS 1.0 and TLS 1.1 is completely removed. After running TLS 1.3 in Search Engine, Gmail, YouTube, and various other Google services for some time, TLS 1.3 was officially rolled out in 2020 as the default configuration for all new and existing Cloud CDN and Global Load Balancing customers.</li>\n<li><strong>Apple:</strong> Announced in September 2021 that TLS 1.0 and TLS 1.1 will be deprecated in iOS 15, iPadOS 15, macOS 12, watchOS 8, and tvOS 15, and support for them be completely removed in future releases. If the user's application activates the App Transport Security (ATS) feature on all connections, no changes are required. Users are also notified to ensure that the web server supports newer TLS versions and to remove the following deprecated <code>Security.framework</code> symbols from the app\n<ul>\n<li>tls_protocol_version_t.TLSv10</li>\n<li>tls_protocol_version_t.TLSv11</li>\n<li>tls_protocol_version_t.DTLSv10</li>\n</ul></li>\n<li><strong>Mozilla:</strong> Starting with Firefox version 78, the minimum TLS version configured by default is TLS 1.2. In early 2020, Mozilla briefly removed TLS 1.0 and TLS 1.1 from Firefox completely, but this caused many users to be unable to open some COVID-19 outbreak public information sites, so the related functionality had to be restored. Following this, Mozilla provides helpful information on its technical support page, instructing users to modify the minimum TLS version number in the default configuration as needed.</li>\n<li><strong>Cisco:</strong> The Cisco Umbrella (renamed from OpenDNS) service discontinued support for all versions of TLS prior to 1.2 on March 31, 2020. After this, only TLS 1.2 compliant clients will be able to connect. In the router and switch product lines, web management has basically been implemented around 2020 to allow only TLS 1.2 or subsequent versions.\n<ul>\n<li>The CAPWAP connection between Cisco's Wireless Access Point (AP) and Wireless LAN Controller (WLC) is established over DTLS. All 802.11ac Wave 2 and 802.11ax APs from 2015 to the most recent release support DTLS 1.2. The AireOS WLC added DTLS 1.2 functionality in version 8.3.11x.0, and the next-generation C9800 WLC running IOS-XE supports DTLS 1.2 from the start. Note that because of the large number of existing network deployments using older equipment and software versions, DTLS 1.0 support cannot be removed immediately from APs and WLCs at this time to protect user investments. However, DTLS 1.2 is already the default optimal choice for APs and WLCs.</li>\n</ul></li>\n</ul>\n<h3 id=\"protocol-test\">Protocol Test</h3>\n<p>Both TLS/DTLS clients and servers need to be tested to verify that their implementations follow the current best practices of <a href=\"https://tools.ietf.org/html/rfc8996\">RFC 8996</a>.</p>\n<h4 id=\"ssl-lab-test\">SSL Lab Test</h4>\n<p>Qualys originated as a non-commercial <a href=\"https://www.ssllabs.com/index.html\">SSL Labs Projects</a>. They offer a free and simple client and server testing service, as well as a <a href=\"https://www.ssllabs.com/ssl-pulse/\">monitoring panel</a> reporting TLS/SSL security scan statistics for the most popular Internet sites. Below is the most recent chart of protocol support statistics for November 2022.</p>\n<p><img src=\"SSL-Pulse-2022-11.png\" style=\"width:70.0%;height:70.0%\" /></p>\n<table>\n<colgroup>\n<col style=\"width: 21%\" />\n<col style=\"width: 21%\" />\n<col style=\"width: 19%\" />\n<col style=\"width: 19%\" />\n<col style=\"width: 17%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Protocol Version</th>\n<th style=\"text-align: center;\">Security</th>\n<th style=\"text-align: center;\">Supporting Sites (Oct. 2022)</th>\n<th style=\"text-align: center;\">Supporting Site (Nov. 2022)</th>\n<th style=\"text-align: center;\">% Change</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">SSL 2.0</td>\n<td style=\"text-align: center;\">Insecure</td>\n<td style=\"text-align: center;\">316（0.2%）</td>\n<td style=\"text-align: center;\">303（0.2%)</td>\n<td style=\"text-align: center;\">-0.0%</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">SSL 3.0</td>\n<td style=\"text-align: center;\">Insecure</td>\n<td style=\"text-align: center;\">3,015（2.2%）</td>\n<td style=\"text-align: center;\">2,930（2.2%)</td>\n<td style=\"text-align: center;\">-0.0%</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">TLS 1.0</td>\n<td style=\"text-align: center;\">Deprecated</td>\n<td style=\"text-align: center;\">47,450（34.9%）</td>\n<td style=\"text-align: center;\">46,691（34.4)</td>\n<td style=\"text-align: center;\">-0.5%</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">TLS 1.1</td>\n<td style=\"text-align: center;\">Deprecated</td>\n<td style=\"text-align: center;\">51,674（38.1%）</td>\n<td style=\"text-align: center;\">50,816（37.5%)</td>\n<td style=\"text-align: center;\">-0.6%</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">TLS 1.2</td>\n<td style=\"text-align: center;\">Depending on the Cipher Suite and the Client</td>\n<td style=\"text-align: center;\">135,557（99.8）</td>\n<td style=\"text-align: center;\">135,445（99.9)</td>\n<td style=\"text-align: center;\">+0.1%</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">TLS 1.3</td>\n<td style=\"text-align: center;\">Secure</td>\n<td style=\"text-align: center;\">78,479（57.8%）</td>\n<td style=\"text-align: center;\">79,163（58.4%)</td>\n<td style=\"text-align: center;\">+0.6%</td>\n</tr>\n</tbody>\n</table>\n<p>As you can see, almost 100% of sites are running TLS 1.2, and the percentage of TLS 1.3 support is close to 60%. This is very encouraging data. While very few sites are still running SSL 2.0/3.0 and TLS 1.0/1.1 are both still supported at around 35%, overall their percentages are continuing to decline and this good trend should continue.</p>\n<p>This blog site is served by GitHub Page, enter the URL to <a href=\"https://www.ssllabs.com/ssltest/\">SSL Server Test</a> page and submit it to get a summary of the test results as follows.</p>\n<p><img src=\"SSL-Report-Sum.png\" /></p>\n<p>The site achieved the highest overall security rating of A+. It got a perfect score for certificate and protocol support, and a 90 for both key exchange and password strength. This shows that GitHub fulfills its security promises to users and deserves the trust of programmers.</p>\n<p>The configuration section of the report gives details of the test results for protocol support and cipher suites as follows.</p>\n<p><img src=\"SSL-Report-Conf.png\" /></p>\n<p>This further confirms that the GitHub Page only supports TLS 1.2/1.3, as required by <a href=\"https://tools.ietf.org/html/rfc8996\">RFC 8996</a>. It can also be seen that under the \"Cipher Suites\" subheading, TLS 1.3 shows two GCMs and one ChaCha20-Poly1305, which are all cipher suites based on the AEAD algorithms. Three cipher suites of the same type are the preferred TLS 1.2 cipher suites for the server as well. This is exactly the current commonly adopted configuration of secure cryptographic algorithms.</p>\n<h4 id=\"user-selftest\">User Selftest</h4>\n<p>If you suspect that a private server is still using the outdated TLS/SSL protocol, you can do a simple test with the command line tool <code>curl</code>, an example of which is as follows.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ curl https://www.cisco.com -svo /dev/null --tls-max 1.1</span><br><span class=\"line\">*   Trying 104.108.67.95:443...</span><br><span class=\"line\">* Connected to www.cisco.com (104.108.67.95) port 443 (<span class=\"comment\">#0)</span></span><br><span class=\"line\">* ALPN, offering h2</span><br><span class=\"line\">* ALPN, offering http/1.1</span><br><span class=\"line\">* successfully <span class=\"built_in\">set</span> certificate verify locations:</span><br><span class=\"line\">*  CAfile: /etc/ssl/cert.pem</span><br><span class=\"line\">*  CApath: none</span><br><span class=\"line\">* (304) (OUT), TLS handshake, Client hello (1):</span><br><span class=\"line\">&#125; [151 bytes data]</span><br><span class=\"line\">* error:1404B42E:SSL routines:ST_CONNECT:tlsv1 alert protocol version</span><br><span class=\"line\">* Closing connection 0</span><br></pre></td></tr></table></figure>\n<p>Here enter the command line option <code>-tls-max 1.1</code> to set the highest protocol version 1.1 and connect to the Cisco home page. The output shows that the connection failed and that a \"protocol version\" alert message was received. This indicates that the server has rejected the TLS 1.1 connection request, and the response is exactly what is required by <a href=\"https://tools.ietf.org/html/rfc8996\">RFC 8996</a>.</p>\n<p>The <code>openssl</code> command line tool provided by the general purpose open source cryptography and secure communication toolkit <a href=\"https://www.openssl.org\">OpenSSL</a> can also do the same test. To test whether the server supports the TLS 1.2 protocol, use the option <code>s_client</code> to emulate a TLS/SSL client and also enter <code>-tls1_2</code> to specify that only TLS 1.2 is used. The command line runs as follows.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ openssl s_client -connect www.cisco.com:443 -tls1_2</span><br><span class=\"line\">CONNECTED(00000005)</span><br><span class=\"line\">depth=2 C = US, O = IdenTrust, CN = IdenTrust Commercial Root CA 1</span><br><span class=\"line\">verify <span class=\"built_in\">return</span>:1</span><br><span class=\"line\">depth=1 C = US, O = IdenTrust, OU = HydrantID Trusted Certificate Service, CN = HydrantID Server CA O1</span><br><span class=\"line\">verify <span class=\"built_in\">return</span>:1</span><br><span class=\"line\">depth=0 CN = www.cisco.com, O = Cisco Systems Inc., L = San Jose, ST = California, C = US</span><br><span class=\"line\">verify <span class=\"built_in\">return</span>:1</span><br><span class=\"line\">---</span><br><span class=\"line\">Certificate chain</span><br><span class=\"line\"> 0 s:/CN=www.cisco.com/O=Cisco Systems Inc./L=San Jose/ST=California/C=US</span><br><span class=\"line\">   i:/C=US/O=IdenTrust/OU=HydrantID Trusted Certificate Service/CN=HydrantID Server CA O1</span><br><span class=\"line\"> 1 s:/C=US/O=IdenTrust/OU=HydrantID Trusted Certificate Service/CN=HydrantID Server CA O1</span><br><span class=\"line\">   i:/C=US/O=IdenTrust/CN=IdenTrust Commercial Root CA 1</span><br><span class=\"line\"> 2 s:/C=US/O=IdenTrust/CN=IdenTrust Commercial Root CA 1</span><br><span class=\"line\">   i:/C=US/O=IdenTrust/CN=IdenTrust Commercial Root CA 1</span><br><span class=\"line\">---</span><br><span class=\"line\">Server certificate</span><br><span class=\"line\">-----BEGIN CERTIFICATE-----</span><br><span class=\"line\">MIIHrzCCBpegAwIBAgIQQAF9KqwAKOKNhDf17h+WazANBgkqhkiG9w0BAQsFADBy</span><br><span class=\"line\">...</span><br><span class=\"line\">4TY7</span><br><span class=\"line\">-----END CERTIFICATE-----</span><br><span class=\"line\">subject=/CN=www.cisco.com/O=Cisco Systems Inc./L=San Jose/ST=California/C=US</span><br><span class=\"line\">issuer=/C=US/O=IdenTrust/OU=HydrantID Trusted Certificate Service/CN=HydrantID Server CA O1</span><br><span class=\"line\">---</span><br><span class=\"line\">No client certificate CA names sent</span><br><span class=\"line\">Server Temp Key: ECDH, P-256, 256 bits</span><br><span class=\"line\">---</span><br><span class=\"line\">SSL handshake has <span class=\"built_in\">read</span> 5765 bytes and written 322 bytes</span><br><span class=\"line\">---</span><br><span class=\"line\">New, TLSv1/SSLv3, Cipher is ECDHE-RSA-AES128-GCM-SHA256</span><br><span class=\"line\">Server public key is 2048 bit</span><br><span class=\"line\">Secure Renegotiation IS supported</span><br><span class=\"line\">Compression: NONE</span><br><span class=\"line\">Expansion: NONE</span><br><span class=\"line\">No ALPN negotiated</span><br><span class=\"line\">SSL-Session:</span><br><span class=\"line\">    Protocol  : TLSv1.2</span><br><span class=\"line\">    Cipher    : ECDHE-RSA-AES128-GCM-SHA256</span><br><span class=\"line\">    Session-ID: 1656D7D14447C1D5E68943F614A697455E60A036957D8D8C18F3B198DF42969F</span><br><span class=\"line\">    Session-ID-ctx:</span><br><span class=\"line\">    Master-Key: BB1209155344C55792077A4337964661FCA4F3F5BBF3185112F5E235BD07AD63838D24F5CF97161E696CB57398CAF478</span><br><span class=\"line\">    TLS session ticket lifetime hint: 83100 (seconds)</span><br><span class=\"line\">    TLS session ticket:</span><br><span class=\"line\">    0000 - 00 00 0b 33 d4 56 15 3d-64 e8 fa 1d cf c1 1c 04   ...3.V.=d.......</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    0090 - 1b 96 9c 25 82 70 a8 ed-24 1d 70 c9 28 56 84 59   ...%.p..$.p.(V.Y</span><br><span class=\"line\"></span><br><span class=\"line\">    Start Time: 1653265585</span><br><span class=\"line\">    Timeout   : 7200 (sec)</span><br><span class=\"line\">    Verify <span class=\"built_in\">return</span> code: 0 (ok)</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>This record is very detailed and the format is very readable. From the output, it can be understood that the digital certificate of the Cisco home page server is digitally signed and certified by the root certificate authority IdenTrust. The client-server session is built on the TLS 1.2 protocol, and the selected cipher suite is ECDHE-RSA-AES128-GCM-SHA256 of type AEAD, which is identical to the preferences provided by the GitHub Page.</p>\n<h4 id=\"browser-test\">Browser Test</h4>\n<p>If you are not sure about the security of your browser and want to test whether it still supports the pre-TLS 1.2 protocols, you can enter the following URL in your browser's address bar.</p>\n<ul>\n<li><a href=\"https://tls-v1-0.badssl.com\">https://tls-v1-0.badssl.com</a> (Only support TLS 1.0)</li>\n<li><a href=\"https://tls-v1-1.badssl.com\">https://tls-v1-1.badssl.com</a> (Only support TLS 1.1)</li>\n</ul>\n<p>After connecting to the second URL with the default configuration of Firefox, the page shows the following</p>\n<blockquote>\n<p><strong>Secure Connection Failed</strong></p>\n<p>An error occurred during a connection to tls-v1-1.badssl.com:1011. Peer using unsupported version of security protocol.</p>\n<p>Error code: SSL_ERROR_UNSUPPORTED_VERSION</p>\n<ul>\n<li>The page you are trying to view cannot be shown because the authenticity of the received data could not be verified.</li>\n<li>Please contact the website owners to inform them of this problem.</li>\n</ul>\n<p><mark>This website might not support the TLS 1.2 protocol, which is the minimum version supported by Firefox.</mark></p>\n</blockquote>\n<p>This error message clearly indicates that Firefox is running a minimum TLS protocol version of 1.2 in this configuration, and since the other side is only running TLS 1.1, the two sides cannot establish a connection.</p>\n<p>So what is the result of the connection when the browser does still retain TLS 1.0/1.1 functionality?</p>\n<p>For testing purposes, you can first change the default TLS preference value of Firefox to 1.1 by following the steps below (refer to the figure below).</p>\n<ol type=\"1\">\n<li>Open a new tab, type <strong>about:config</strong> in the address bar, and press Enter/Return.</li>\n<li>The page prompts \"Proceed with Caution\", click the <strong>Accept the Risk and Continue</strong> button.</li>\n<li>In the search box at the top of the page, type TLS to display the filtered list.</li>\n<li>Find the <strong>security.tls.version.min</strong> preference option and click the <strong>Edit</strong> icon to change the minimum TLS version.\n<ul>\n<li>TLS 1.0 =&gt; 1</li>\n<li>TLS 1.1 =&gt; 2</li>\n<li>TLS 1.2 =&gt; 3</li>\n<li>TLS 1.3 =&gt; 4</li>\n</ul></li>\n</ol>\n<p><img src=\"Firefox-TLS-MIN-VER.png\" style=\"width:80.0%;height:80.0%\" /></p>\n<p>At this point, then connect to <a href=\"https://tls-v1-1.badssl.com\">https://tls-v1-1.badssl.com</a>, the result is</p>\n<p><img src=\"TLS-V1-1-BADSSL.png\" style=\"width:80.0%;height:80.0%\" /></p>\n<p>This bold red page tells you that the browser you are currently using does not have TLS 1.1 disabled and is a security risk, so try not to use it if you can.</p>\n<p>After testing, don't forget to restore the default TLS minimum version setting (3) for Firefox.</p>\n<h3 id=\"references\">References</h3>\n<blockquote>\n<p><strong><em>Disclosure</em></strong>: <em>This blog site is reader-supported. When you buy through the affiliate links below, as an Amazon Associate, I earn a tiny commission from qualifying purchases. Thank you.</em></p>\n</blockquote>\n<p>Besides NIST and RFC documents, For an in-depth study of the TLS protocol specification, system implementation, and application deployment, a careful reading of the following three books is recommended.</p>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><a href=\"https://amzn.to/3EIfeo0\"><img src=\"SSL-TLS.jpg\" /></a></div><div class=\"group-picture-column\"><a href=\"https://amzn.to/3tGCfBx\"><img src=\"Implement-TLS.jpg\" /></a></div><div class=\"group-picture-column\"><a href=\"https://amzn.to/3tLhaG6\"><img src=\"Bulletproof-TLS.jpg\" /></a></div></div></div>\n<ol type=\"1\">\n<li><a href=\"https://amzn.to/3EIfeo0\">SSL and TLS: Theory and Practice, Second Edition</a> (2016) - This book provides a comprehensive discussion of the SSL, TLS, and DTLS protocols. It has complete details on the theory and practice of the protocols, offering readers a solid understanding of their design principles and modes of operation. The book also presents the advantages and disadvantages of the protocols compared to other Internet security protocols and provides the details necessary to correctly implement the protocols while saving time on the security practitioner’s side.</li>\n<li><a href=\"https://amzn.to/3tGCfBx\">Implementing SSL/TLS Using Cryptography and PKI</a> (2011) - For a network professional who knows C programming, this book is a hands-on, practical guide to implementing SSL and TLS protocols for Internet security. Focused on how to implement SSL and TLS, it walks you through all the necessary steps, whether or not you have a working knowledge of cryptography. The book covers TLS 1.2, including implementations of the relevant cryptographic protocols, secure hashing, certificate parsing, certificate generation, and more.</li>\n<li><a href=\"https://amzn.to/3tLhaG6\">Bulletproof TLS and PKI, Second Edition: Understanding and Deploying SSL/TLS and PKI to Secure Servers and Web</a> (2022) - This book is a complete guide to using TLS encryption and PKI to deploy secure servers and web applications. Written by Ivan Ristić, founder of the popular SSL Labs website, it will teach you everything you need to know to protect your systems from eavesdropping and impersonation attacks. You can also find just the right mix of theory, protocol detail, vulnerability and weakness information, and deployment advice to get the work done.</li>\n</ol>\n","categories":["Technology Review"],"tags":["Cryptography","Network Security"]},{"title":"TLS 1.3 and the Coming NIST Mandate","url":"/en/2023/08/21/TLS1-3-intro/","content":"<p>TLS (Transport Layer Security) is a cryptographic protocol to secure network communication. TLS 1.3 is the latest version of the TLS protocol, succeeding TLS 1.2. TLS 1.3 aims to provide more robust security, higher privacy protection, as well as better performance than previous versions. Here is a brief introduction to TLS 1.3. Also, we discuss NIST's requirement for TLS 1.3 readiness and give examples of enabling TLS 1.3 in some commonly used web servers. <span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>It takes 20 years to build a reputation and a few minutes of cyber-incident to ruin it.</strong><br> <strong>— <em>Stéphane Nappo</em> (Vice President and Global Chief Information Security Officer of Groupe SEB, France, 2018 Global CISO of the year)</strong></p>\n</div>\n<h2 id=\"introduction-to-tls-1.3\">Introduction to TLS 1.3</h2>\n<p>TLS 1.3 is the latest recommended cryptographic protocol for protecting a wide variety of network communications, including web browsing, email, online trading, instant messaging, mobile payments, and many other applications. By using TLS 1.3, more secure and reliable communication connections can be established, ensuring confidentiality, authenticity, and data integrity. It was standardized by the Internet Engineering Task Force (IETF) in August 2018, and published as <a href=\"https://datatracker.ietf.org/doc/html/rfc8446\">RFC 8446</a>.</p>\n<p>TLS 1.3 introduces some important improvements over TLS 1.2. The table below presents a quick comparison of the two:</p>\n<table>\n<colgroup>\n<col style=\"width: 18%\" />\n<col style=\"width: 40%\" />\n<col style=\"width: 40%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Aspect</th>\n<th style=\"text-align: left;\">TLS 1.2</th>\n<th style=\"text-align: left;\">TLS 1.3</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Protocol Design</td>\n<td style=\"text-align: left;\">Request-response model</td>\n<td style=\"text-align: left;\">Reduced round trips</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Handshake</td>\n<td style=\"text-align: left;\">Multiple round trips</td>\n<td style=\"text-align: left;\">Single round trip</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Cipher Suites</td>\n<td style=\"text-align: left;\">Supports wide range, including insecure ones</td>\n<td style=\"text-align: left;\">Focuses on stronger algorithms</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Security</td>\n<td style=\"text-align: left;\">Known vulnerabilities, e.g., CBC vulnerabilities</td>\n<td style=\"text-align: left;\">Addresses previous issues, stronger security</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Performance</td>\n<td style=\"text-align: left;\">Higher latency due to more round trips</td>\n<td style=\"text-align: left;\">Faster connection establishment</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Resilience to Attacks</td>\n<td style=\"text-align: left;\">Vulnerable to downgrade attacks and padding oracle attacks</td>\n<td style=\"text-align: left;\">Additional protections against attacks</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Compatibility</td>\n<td style=\"text-align: left;\">Widely supported across platforms</td>\n<td style=\"text-align: left;\">Increasing support, may not be available on older systems</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Implementation Supports</td>\n<td style=\"text-align: left;\">Available in many cryptographic libraries</td>\n<td style=\"text-align: left;\">Supported in various libraries</td>\n</tr>\n</tbody>\n</table>\n<p>It can be seen that enhanced security and performance improvements are the most notable features of TLS 1.3, and we can explore more into these in the following sections.</p>\n<h3 id=\"security-hardening\">Security Hardening</h3>\n<h4 id=\"cipher-suites\">Cipher Suites</h4>\n<p>The protocol design principle of TLS 1.3 has enhanced security as its primary goal. As a result, TLS 1.3 drastically reduces the number of supported cipher suites. It removes insecure and weak cipher suites, leaving only more secure and modern cipher suites. This helps to increase the security of communications and avoids the use of outdated or vulnerable cipher suites.</p>\n<p>Specifically, TLS 1.3 removes various cipher suites that use static RSA key transport, static Diffie-Hellman key exchange, CBC mode of operation, or SHA-1. It adopts only a limited number of Authenticated Encryption with Associated Data (AEAD) cipher suites. AEAD can guarantee the confidentiality, integrity, and authenticity of data at the same time, and its high security makes it the exclusive choice for TLS 1.3.</p>\n<p>On the other hand, the name string of the cipher suite used in previous TLS versions included all algorithms for key exchange, digital signatures, encryption, and message authentication. Each cipher suite is assigned a 2-byte code point in the TLS Cipher Suites registry managed by the Internet Assigned Numbers Authority (IANA). Every time a new cryptographic algorithm is introduced, a series of new combinations need to be added to the list. This has led to an explosion of code points representing every valid choice of these parameters. This situation also makes the selection of cipher suites complicated and confusing.</p>\n<p>The design of TLS 1.3 changed the concept of the cipher suite. It separates the authentication and key exchange mechanisms from the record protection algorithm (including secret key length) and a hash to be used with both the key derivation function and handshake message authentication code (MAC). The new cipher suite naming convention is <code>TLS_&lt;AEAD&gt;_&lt;Hash&gt;</code>, where the hash algorithm is used for the newly defined key derivation function <a href=\"https://en.wikipedia.org/wiki/HKDF\">HKDF</a> of TLS 1.3 and the MAC generation in the handshake phase. The cipher suites defined by the TLS 1.3 protocol are:</p>\n<figure class=\"highlight c\"><figcaption><span>RFC 8446 - Appendix B.4. Cipher Suites</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">+------------------------------+-------------+</span><br><span class=\"line\">| Description                  | Value       |</span><br><span class=\"line\">+------------------------------+-------------+</span><br><span class=\"line\">| TLS_AES_128_GCM_SHA256       | &#123;<span class=\"number\">0x13</span>,<span class=\"number\">0x01</span>&#125; |</span><br><span class=\"line\">|                              |             |</span><br><span class=\"line\">| TLS_AES_256_GCM_SHA384       | &#123;<span class=\"number\">0x13</span>,<span class=\"number\">0x02</span>&#125; |</span><br><span class=\"line\">|                              |             |</span><br><span class=\"line\">| TLS_CHACHA20_POLY1305_SHA256 | &#123;<span class=\"number\">0x13</span>,<span class=\"number\">0x03</span>&#125; |</span><br><span class=\"line\">|                              |             |</span><br><span class=\"line\">| TLS_AES_128_CCM_SHA256       | &#123;<span class=\"number\">0x13</span>,<span class=\"number\">0x04</span>&#125; |</span><br><span class=\"line\">|                              |             |</span><br><span class=\"line\">| TLS_AES_128_CCM_8_SHA256     | &#123;<span class=\"number\">0x13</span>,<span class=\"number\">0x05</span>&#125; |</span><br><span class=\"line\">+------------------------------+-------------+</span><br></pre></td></tr></table></figure>\n<p>This simplified cipher suite definition and greatly reduced set of negotiation parameters also speed up TLS 1.3 handshake, improving overall performance.</p>\n<h4 id=\"key-exchange\">Key Exchange</h4>\n<p>TLS 1.3 emphasizes forward secrecy, ensuring that the confidentiality of communications is protected even if long-term secrets used in the session key exchange are compromised. It only allows key exchange based on ephemeral Diffie-Hellman key exchange (DHE) or ephemeral elliptic curve Diffie-Hellman key exchange (ECDHE). Both have the property of forward secrecy. Also, the protocol explicitly restricts the use of secure elliptic curve groups and finite field groups for key exchange:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Elliptic Curve Groups (ECDHE) */</span></span><br><span class=\"line\">secp256r1(<span class=\"number\">0x0017</span>), secp384r1(<span class=\"number\">0x0018</span>), secp521r1(<span class=\"number\">0x0019</span>),</span><br><span class=\"line\">x25519(<span class=\"number\">0x001D</span>), x448(<span class=\"number\">0x001E</span>),</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Finite Field Groups (DHE) */</span></span><br><span class=\"line\">ffdhe2048(<span class=\"number\">0x0100</span>), ffdhe3072(<span class=\"number\">0x0101</span>), ffdhe4096(<span class=\"number\">0x0102</span>),</span><br><span class=\"line\">ffdhe6144(<span class=\"number\">0x0103</span>), ffdhe8192(<span class=\"number\">0x0104</span>),</span><br></pre></td></tr></table></figure>\n<p>The above elliptic curve groups for ECDHE are specified by <a href=\"https://www.rfc-editor.org/rfc/rfc8422\">RFC 8422</a>. The first three are defined by the FIPS.186-4 specification and the corresponding NIST names are P-256/P-384/P-512, while the next two (x25519/x448) are recommended by ANSI.X9-62.2005. <a href=\"https://www.rfc-editor.org/rfc/rfc7919\">RFC 7919</a> specifies four finite field groups (ffdhe####) for DHE. The primes in these finite field groups are all safe primes.</p>\n<div class=\"note info\"><p>In number theory, a prime number <span class=\"math inline\">\\(p\\)</span> is a safe prime if <span class=\"math inline\">\\((p-1)/2\\)</span> is also prime.</p>\n</div>\n<h4 id=\"signature-verification\">Signature Verification</h4>\n<p>For signature verification in the key exchange phase, TLS 1.3 introduces more signature algorithms to meet different security requirements:</p>\n<ul>\n<li><strong>RSA signature algorithm</strong>: TLS 1.3 still supports RSA-based signature algorithms, including RSA-PKCS1-SHA256, RSA-PKCS1-SHA384, etc. These algorithms use RSA keys for digital signatures.</li>\n<li><strong>ECDSA signature algorithm</strong>: TLS 1.3 introduces more signature algorithms based on elliptic curve cryptography (ECC), such as ECDSA-SHA256, ECDSA-SHA384, etc. These algorithms use elliptic curve keys for digital signatures and are generally superior to RSA in terms of security and performance.</li>\n<li><strong>EdDSA signature algorithm</strong>: TLS 1.3 also introduces the EdDSA (Edwards-curve Digital Signature Algorithm) signature algorithm based on the Edwards curve. It features efficient performance and strong security for mobile devices and resource-constrained environments.</li>\n<li><strong>RSASSA-PSS signature algorithm</strong>: In addition to the traditional RSA-PKCS1 signature algorithm, TLS 1.3 also introduces the RSASSA-PSS signature algorithm, which is a more secure signature method based on RSA and has better attack resistance.</li>\n<li><strong>PSK signature algorithm</strong>: TLS 1.3 supports the signature algorithm based on the pre-shared key (PSK), which applies to the PSK handshake mode. This approach does not involve a digital certificate but uses a pre-shared key for verification.</li>\n</ul>\n<p>TLS 1.3 stops using the DSA (Digital Signature Algorithm) signature algorithm. This is also a notable difference from TLS 1.2. DSA has some security and performance limitations and is rarely used in practice, so TLS 1.3 removed support for DSA certificates.</p>\n<h4 id=\"other-reinforcements\">Other Reinforcements</h4>\n<p>Additionally, TLS 1.3 includes the following improvements to enhance security</p>\n<ul>\n<li>TLS 1.3 does not allow data compression. The data compression feature in earlier versions of TLS could lead to security issues such as <a href=\"https://zh.wikipedia.org/wiki/CRIME\">CRIME</a> attacks. To avoid this risk, TLS 1.3 removed support for data compression entirely.</li>\n<li>Unlike earlier versions of TLS, TLS 1.3 prohibits renegotiation after the connection has been established. This helps reduce security risk and complexity. Renegotiation may introduce new security holes, and frequent negotiations during the connection process may also cause performance problems.</li>\n<li>All handshake messages following the <code>ServerHello</code> message during the TLS 1.3 handshake are now encrypted. The newly introduced <code>EncryptedExtensions</code> message enables encryption protection of various extensions previously sent in plain text.</li>\n<li>TLS 1.3 adds asymmetric cryptographic protection of the <code>Certificate</code> messages sent from the server to the client. This encryption prevents threats such as man-in-the-middle attacks, information leakage, and certificate forgery, further fortifying the security and privacy of the connection.</li>\n</ul>\n<h3 id=\"performance-boosting\">Performance Boosting</h3>\n<h4 id=\"simplified-handshake\">Simplified Handshake</h4>\n<p>The general trend towards high-speed mobile Internet requires the use of HTTPS/TLS to protect the privacy of all traffic as much as possible. The downside of this is that new connections can become a bit slower. For the client and web server to agree on a shared key, both parties need to exchange security attributes and related parameters through the TLS \"handshake process\". In TLS 1.2 and all protocols before it, the initial handshake process required at least two round-trip message transfers. Compared to pure HTTP, the extra latency introduced by the TLS handshake process of HTTPS can be very detrimental to performance-conscious applications.</p>\n<p>TLS 1.3 greatly simplifies the handshake process, requiring only one round trip in most cases, resulting in faster connection establishment and lower latency. Every TLS 1.3 connection will use (EC)DHE-based key exchange, and the parameters supported by the server may be easy to guess (such as ECDHE + x25519 or P-256). Since the options are limited, the client can directly send the (EC)DHE key share information in the first message without waiting for the server to confirm which key exchange it is willing to support. This way, the server can derive the shared secret one round in advance and send encrypted data.</p>\n<p>The following diagram compares the message sequences of the handshake process of TLS 1.2 and TLS 1.3. Both operate with public key-based authentication. The TLS 1.3 handshake shown below uses the symbols borrowed from the RFC 8446 specification: '+' indicates a noteworthy extension; '*' indicates an optional message or extension; '[]', '()', and '{}' represent encrypted messages, where the keys used for encryption are different.</p>\n<figure>\n<img src=\"TLS1_2vs1_3-handshake.jpg\" alt=\"TLS 1.2 handshake (left) vs. TLS 1.3 handshake (right)\" /><figcaption aria-hidden=\"true\">TLS 1.2 handshake (left) vs. TLS 1.3 handshake (right)</figcaption>\n</figure>\n<p>This figure illustrates the following points:</p>\n<ul>\n<li>TLS 1.3 removes several messages used by TLS 1.2: <code>ServerHelloDone</code>, <code>ChangeCipherSpec</code>, <code>ServerKeyExchange</code>, and <code>ClientKeyExchange</code>. The contents of TLS 1.2's <code>ServerKeyExchange</code> and <code>ClientKeyExchange</code> messages vary depending on the authentication and key-sharing method being negotiated. In TLS 1.3, this information was moved to the extensions of <code>ClientHello</code> and <code>ServerHello</code> messages. TLS 1.3 completely deprecates <code>ServerHelloDone</code> and <code>ChangeCipherSpec</code> messages, there is no replacement.</li>\n<li>For TLS 1.3 the public key-based authentication mode is probably the most important. It always uses (EC)DHE to achieve forward secrecy. The figure shows that the <code>ClientHello</code> message carries four extensions that are must-haves in this mode: <code>key_share</code>, <code>signature_algorithms</code>, <code>supported_groups</code>, and <code>support_versions</code>.</li>\n<li>During the TLS 1.2 handshake, the exchange of control data requires multiple round trips between the client and server. TLS 1.2's <code>ClientKeyExchange</code> and <code>ChangeCipherSpec</code> messages are carried in separate packets, and the <code>Finished</code> message is the first (and only) encrypted handshake message. The whole process needs to transmit 5-7 data packets.</li>\n<li>During the TLS 1.3 handshake, encrypted <code>Application Data</code> is already sent by the client after the first round trip. As mentioned earlier, the <code>EncryptedExtension</code> message provides privacy protection for <code>ServerHello</code> extensions in earlier versions of TLS. If mutual authentication is required (which is common in IoT deployments), the server will send a <code>CertificateRequest</code> message.</li>\n<li>The <code>Certificate</code>, <code>CertificateVerify</code>, and <code>Finished</code> messages in TLS 1.3 retain the semantics of earlier TLS versions, but they are all asymmetrically encrypted now. Echoing the description in the last section, by encrypting <code>Certificate</code> and <code>CertificateVerify</code> messages, TLS 1.3 better protects against man-in-the-middle and certificate forgery attacks while enhancing the privacy of connections. This is also an important security feature in the design of TLS 1.3.</li>\n</ul>\n<p>In rare cases, when the server does not support a certain key-sharing method sent by the client, the server can send a new <code>HelloRetryRequest</code> message letting the client know which groups it supports. As the group list has shrunk significantly, this is not expected to happen very often.</p>\n<h4 id=\"rtt-session-resumption\">0-RTT Session Resumption</h4>\n<p>0-RTT (Zero Round Trip Time) in TLS 1.3 is a special handshake mode. It allows clients to send encrypted data during the handshake phase, reducing the number of round trips required for connection establishment and enabling faster session resumption. The following is a brief explanation of the 0-RTT working mode:</p>\n<ol type=\"1\">\n<li><strong>Store session tickets</strong>: During the normal TLS 1.3 handshake, the client and server generate a data structure called a \"session ticket\" during the handshake. Session tickets contain information about the connection, including key parameters and cipher suites. The server stores the session ticket provided by the client.</li>\n<li><strong>0-RTT handshake</strong>: When the client reconnects to the server, it includes the previously saved session ticket in the <code>early_data</code> extension of the <code>ClientHello</code> message, along with encrypted <code>Application Data</code>. The client encrypts 0-RTT data using a pre-shared key (PSK) obtained from a previous connection.</li>\n<li><strong>Server Response</strong>: After the server receives this message, if it supports 0-RTT mode and can recognize and verify the session ticket, it sends an <code>EncryptedExtensions</code> message, and then confirms the connection in the <code>Finished</code> message. This way, the server can quickly establish a secure connection with 0 round trips. It can also immediately send data to the client to achieve 0-RTT data transmission.</li>\n</ol>\n<p>The message sequence of the 0-RTT session resumption and data transmission process of TLS 1.3 is as follows:</p>\n<figure>\n<img src=\"TLS1_3-0-RTT.jpg\" style=\"width:50.0%;height:50.0%\" alt=\"TLS 1.3 0-RTT\" /><figcaption aria-hidden=\"true\">TLS 1.3 0-RTT</figcaption>\n</figure>\n<h3 id=\"faq\">FAQ</h3>\n<ul>\n<li><p><strong>Does the TLS 1.3 protocol allow the use of RSA digital certificates?</strong></p>\n<p>A common misconception is that \"TLS 1.3 is not compatible with RSA digital certificates\". The description in the \"Signature Verification\" section above shows that this is wrong. TLS 1.3 still supports the use of RSA for key exchange and authentication. However, considering the limitations of RSA, it is recommended that when building and deploying new TLS 1.3 applications, ECDHE key exchange algorithms and ECC digital certificates are preferred to achieve higher security and performance.</p></li>\n<li><p><strong>During the TLS 1.3 handshake, how does the server request the client to provide a certificate?</strong></p>\n<p>In some scenarios, the server also needs to verify the identity of the client to ensure that only legitimate clients can access server resources. This is the case with mTLS (mutual TLS). During the TLS 1.3 handshake, the server can specify that the client is required to provide a certificate by sending a special <code>CertificateRequest</code> extension. When the server decides to ask the client for a certificate, it sends a <code>CertificateRequest</code> extension message after the <code>ServerHello</code> message. This extended message contains some necessary parameters, such as a list of supported certificate types, a list of acceptable certificate authorities, and so on. When the client receives it, it knows that the server asked it for a certificate, and it can optionally respond to the request. If the client is also configured to support mTLS and decides to provide a certificate, it provides its certificate chain by sending a <code>Certificate</code> message.</p></li>\n<li><p><strong>Is 0-RTT vulnerable to replay attacks?</strong></p>\n<p>TLS 1.3's 0-RTT session resumption mode is non-interactive and does risk replay attacks in some cases. An attacker may repeat previously sent data to simulate a legitimate request. To avoid and reduce the risk of replay attacks to the greatest extent, TLS 1.3 provides some protection measures and suggestions:</p>\n<ol type=\"1\">\n<li>The simplest anti-replay method is that the server only allows each session ticket to be used once. For example, the server may maintain a database of all valid tickets that have not been used, deleting each ticket from the database as it is used. If an unknown ticket is received, the server falls back to a full handshake.</li>\n<li>The server may limit the time window in which session tickets are accepted, that is, the time range in which 0-RTT data is allowed to be valid. This reduces the chance of an attacker successfully replaying.</li>\n<li>Clients and servers should also use 0-RTT data only for stateless requests, that is, requests that do not affect the state of the server such as HTTP GET. For requests that need to modify the state of the server or have an impact, restrict the use of normal handshake patterns only.</li>\n<li>Another way to prevent replay is to store the unique value (usually a random value or a PSK bundled value) derived from the <code>ClientHello</code> message, and reject duplicates. Logging all <code>ClientHello</code>s would cause the state to grow without bound, but combined with #2 above, the server can log <code>ClientHello</code>s within a given time window and use <code>obfuscated_ticket_age</code> to ensure that tickets are not duplicated outside the window use.</li>\n</ol></li>\n<li><p><strong>If the client does not know whether the server supports TLS 1.3, how could it negotiate the TLS version via handshake?</strong></p>\n<p>The TLS protocol provides a built-in mechanism for negotiating the running version between endpoints. TLS 1.3 continues this tradition. RFC 8446 Appendix D.1 \"Negotiating with an Older Server\" gives specific instructions:</p>\n<blockquote>\n<p>A TLS 1.3 client who wishes to negotiate with servers that do not support TLS 1.3 will send a normal TLS 1.3 ClientHello containing 0x0303 (TLS 1.2) in ClientHello.legacy_version but with the correct version(s) in the \"supported_versions\" extension. If the server does not support TLS 1.3, it will respond with a ServerHello containing an older version number. If the client agrees to use this version, the negotiation will proceed as appropriate for the negotiated protocol.</p>\n</blockquote>\n<p>The following screenshot of a TLS 1.3 <code>ClientHello</code> message decode demonstrates this. The version number of the handshake message displayed on the left is \"Version: TLS 1.2 (0x0303)\". At the same time, it can be seen that the cipher suite section first lists 3 TLS 1.3 AEAD cipher suites, followed by 14 TLS 1.2 regular cipher suites. On the right, there are 4 extensions - <code>key_share</code>, <code>signature_algorithms</code>, <code>supported_groups</code>, and <code>support_versions</code>. The <code>support_versions</code> extension includes both TLS 1.3 and TLS 1.2 version numbers. This is the TLS version list for the server to choose from. Additionally, the <code>key_share</code> extension includes the client's preferred key-sharing method as x25519 and secp256r1(i.e. NIST P-256)</p>\n<p><img src=\"TLS1_3-clienthello.jpg\" /></p></li>\n<li><p><strong>Does the TLS 1.3 protocol work with UDP and EAP?</strong></p>\n<p>TLS was originally designed for TCP connections, and a variant DTLS (Datagram Transport Layer Security) for UDP was introduced later. Based on TLS 1.3, IETF has released the corresponding upgraded version of the DTLS 1.3 protocol <a href=\"https://www.rfc-editor.org/rfc/rfc9147\">RFC 9147</a>. The design goal of DTLS 1.3 is to provide \"equivalent security guarantees with the exception of order protection / non-replayability\". This protocol was released in April 2022, and currently, there are not many software libraries supporting it.</p>\n<p>TLS can also be used as an authentication and encryption protocol in various EAP types, such as EAP-TLS, EAP-FAST, and PEAP. Corresponding to TLS 1.3, IETF also published two technical standard documents:</p>\n<ul>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc9190\">RFC 9190</a>: EAP-TLS 1.3: Using the Extensible Authentication Protocol with TLS 1.3 (Feb. 2022)</li>\n<li><a href=\"https://www.rfc-editor.org/rfc/rfc9427\">RFC 9427</a>: TLS-Based Extensible Authentication Protocol (EAP) Types for Use with TLS 1.3 (Jun. 2023)</li>\n</ul>\n<p>Both protocols are also quite new, and the software library updates supporting them are still some time away.</p></li>\n</ul>\n<h2 id=\"nist-mandate\">NIST Mandate</h2>\n<p>TLS 1.3 brings new security features and a faster TLS handshake. Since its release in 2018, many Internet services have migrated to this latest version. Nevertheless, widespread adoption across websites takes time. The non-commercial <a href=\"https://www.ssllabs.com/index.html\">SSL Labs Projects</a> has a dashboard called <a href=\"https://www.ssllabs.com/ssl-pulse/\">SSL Pulse</a> that reports TLS/SSL security scan statistics for the most popular Internet sites. Below is the most recent chart of protocol support statistics by July 2023.</p>\n<figure>\n<img src=\"TLS1_3-stats.png\" style=\"width:75.0%;height:75.0%\" alt=\"Source: SSL Pulse - 07/03/2023\" /><figcaption aria-hidden=\"true\">Source: SSL Pulse - 07/03/2023</figcaption>\n</figure>\n<p>As can be seen, of all 135,000+ probed sites the percentage of TLS 1.3 support is about 63.5%. That means there are still close to 50 thousand sites that do not leverage the security and performance benefits of TLS 1.3. Why? The decision to migrate a website to a new protocol version like TLS 1.3 can be complex and influenced by various factors. The top 3 common reasons hindering TLS 1.3 migration are</p>\n<ul>\n<li><strong>Compatibility Concerns</strong>: Some websites might have users who are still using outdated browsers or operating systems that do not support TLS 1.3. These websites need to maintain backward compatibility to ensure that all users can access their content securely.</li>\n<li><strong>Resource Constraints</strong>: Migration involves technical updates, configuration changes, and testing. Smaller websites or those with limited resources might face challenges in allocating the necessary time and effort to make these changes.</li>\n<li><strong>Third-Party Dependencies</strong>: Many websites rely on third-party services, content delivery networks, or other components. If these services do not yet support TLS 1.3, the website might delay migration to avoid disruptions or compatibility issues with these dependencies.</li>\n</ul>\n<p>However, for network hardware/software vendors who want their products on the procurement list of any US public sector organization, there is a coming NIST mandate to make TLS 1.3 available by January 2024. This is stipulated in the National Institute of Standards and Technology Special Publication (NIST SP) 800-52 Rev. 2: <strong>Guidelines for the Selection, Configuration, and Use of Transport Layer Security (TLS) Implementations</strong>. Quoted from <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r2.pdf\">NIST SP 800-52 Rev. 2</a></p>\n<blockquote>\n<p><strong>3.1 Protocol Version Support</strong></p>\n<p>Servers that support government-only applications <strong>shall</strong> be configured to use TLS 1.2 and <strong>should</strong> be configured to use TLS 1.3 as well. ...</p>\n<p>Servers that support citizen or business-facing applications (i.e., the client may not be part of a government IT system)10 <strong>shall</strong> be configured to negotiate TLS 1.2 and <strong>should</strong> be configured to negotiate TLS 1.3. ...</p>\n<p>Agencies <strong>shall</strong> support TLS 1.3 by January 1, 2024. After this date, servers <strong>shall</strong> support TLS 1.3 for both government-only and citizen or business-facing applications. In general, servers that support TLS 1.3 <strong>should</strong> be configured to use TLS 1.2 as well. However, TLS 1.2 may be disabled on servers that support TLS 1.3 if it has been determined that TLS 1.2 is not needed for interoperability.</p>\n</blockquote>\n<p>As in the RFC documents, \"shall\" above is a strong keyword that means that the definition is an absolute requirement of the specification. So this NIST publication requires all servers owned by the US government agencies to be able to support TLS 1.3 by 01/01/2024. They must run a minimum TLS version 1.2 by default and can be configured to do TLS 1.3 only if desired.</p>\n<p>It is worth pointing out that this is not an official FIPS requirement, so not mandatory for the FIPS 140-3 certification at present. Besides, this NIPS document has a clear scope statement: \"The scope is further limited to TLS when used in conjunction with TCP/IP. For example, Datagram TLS (DTLS), which operates over datagram protocols, is outside the scope of these guidelines. NIST may issue separate guidelines for DTLS at a later date.\" Based on this, we can infer that DTLS and EAP are out of consideration for this mandate.</p>\n<h2 id=\"enabling-tls-1.3\">Enabling TLS 1.3</h2>\n<p>The enhanced security and optimized performance of TLS 1.3 make it the first choice for securing communication of various network applications. Now we demonstrate how to enable TLS 1.3 function in three commonly used web server software Apache, Nginx, and Lighttpd.</p>\n<div class=\"note warning\"><p><strong>NOTE:</strong> The implementation of many secure network communication applications relies on third-party SSL/TLS software libraries, such as wolfSSL, GnuTLS, NSS, and OpenSSL. Therefore, to enable the TLS 1.3 function of these applications, you need to ensure that the libraries they link with support TLS 1.3. For example, in September 2018, the popular OpenSSL project released version 1.1.1 of the library, with support for TLS 1.3 as its \"top new feature\".</p>\n</div>\n<h3 id=\"apache-http-server\">Apache HTTP Server</h3>\n<p>The Apache HTTP Server is an open-source web server software from the Apache Software Foundation. Apache HTTP server is widely used and is one of the most popular web server software due to its cross-platform and security. Apache supports a variety of features, many of which extend core functionality through compiled modules, such as authentication schemes, proxy servers, URL rewriting, SSL/TLS support, and compiling interpreters such as Perl/Python into the server.</p>\n<p>Apache HTTP Server has built-in support for TLS 1.3 since version 2.4.36, no need to install any additional modules or patches. The following command can be used to verify the version of the server</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ apache2ctl -v </span><br><span class=\"line\">Server version: Apache/2.4.41 (Ubuntu)</span><br><span class=\"line\">Server built:   2020-04-13T17:19:17</span><br></pre></td></tr></table></figure>\n<p>Once the version is verified, the <code>SSLProtocol</code> line of the configuration file can be updated. The following will enable the Apache HTTP server to only support the TLS 1.3 protocol</p>\n<figure class=\"highlight nginx\"><figcaption><span>/etc/apache2/mods-available/ssl.conf</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Only enable TLS 1.3</span></span><br><span class=\"line\"><span class=\"attribute\">SSLProtocol</span> -all +TLSv1.<span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>If the server needs to be compatible with clients that support TLS 1.2, you can add <code>+TLSv1.2</code>. After updating the configuration, restart the service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo service apache2 restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-web-server\">Nginx Web Server</h3>\n<p>Nginx is a high-performance web server based on an asynchronous framework and modular design. It can also be used for reverse proxy, load balancer, and HTTP caching applications. It is free and open-source software released under the terms of a BSD-like license. Nginx uses an asynchronous event-driven approach to request processing, which can provide more predictable performance under high load. The current market share of Nginx is almost equal to that of the Apache HTTP server.</p>\n<p>Nginx supports TLS 1.3 from version 1.13.0. The following command can be used to verify its version</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ nginx -v</span><br><span class=\"line\">nginx version: nginx/1.17.10 (Ubuntu)</span><br></pre></td></tr></table></figure>\n<p>In the Nginx configuration file, find the server block and modify the <code>ssl_protocols</code> line to enable TLS 1.3:</p>\n<figure class=\"highlight nginx\"><figcaption><span>/etc/nginx/nginx.conf</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl http2;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> [::]:<span class=\"number\">443</span> ssl http2;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> example.com;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> /var/www/example.com/public;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span> /path/to/your/certificate.crt;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span> /path/to/your/private-key.key;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># support TLS 1.2 and TLS 1.3 </span></span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1.<span class=\"number\">2</span> TLSv1.<span class=\"number\">3</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>If you don't need to continue to support TLS 1.2, delete the <code>TLSv1.2</code> there. After the modification is complete, you can run the following command to test the configuration of Nginx, and then restart the service</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ sudo nginx -t</span><br><span class=\"line\">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class=\"line\">nginx: configuration file /etc/nginx/nginx.conf <span class=\"built_in\">test</span> is successful</span><br><span class=\"line\"></span><br><span class=\"line\">$ sudo service nginx restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"lighttpd-web-server\">Lighttpd Web Server</h3>\n<p>Lighttpd is a lightweight open-source web server software. It focuses on high performance, low memory footprint, and fast responsiveness. Lighttpd is suitable for serving web applications and static content of all sizes. Its design goal is to provide an efficient, flexible, and scalable web server, especially suitable for high-load and resource-constrained (such as embedded systems) environments.</p>\n<p>The first Lighttpd release to support TLS 1.3 is version 1.4.56. Starting with this version, the minimum version of TLS that Lighttpd supports by default is TLS 1.2. That is to say, Lighttpd supports TLS 1.2 and TLS 1.3 if no corresponding configuration file modification is made.</p>\n<p>To limit the use of Lighttpd to only the TLS 1.3 feature, first make sure the mod_openssl module is loaded. Then in the configuration file lighttpd.conf, find the <code>server.modules</code> section, and add the following <code>ssl.openssl.ssl-conf-cmd</code> line:</p>\n<figure class=\"highlight nginx\"><figcaption><span>/etc/lighttpd/lighttpd.conf</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">server.<span class=\"attribute\">modules</span> += (<span class=\"string\">&quot;mod_openssl&quot;</span>)</span><br><span class=\"line\"><span class=\"variable\">$SERVER</span>[<span class=\"string\">&quot;socket&quot;</span>] == <span class=\"string\">&quot;:443&quot;</span> &#123;</span><br><span class=\"line\">    ssl.<span class=\"attribute\">engine</span> = <span class=\"string\">&quot;enable&quot;</span> </span><br><span class=\"line\">    ssl.pemfile = <span class=\"string\">&quot;/path/to/your/cert.pem&quot;</span></span><br><span class=\"line\">    ssl.privkey = <span class=\"string\">&quot;/path/to/your/privkey.pem&quot;</span></span><br><span class=\"line\">    ssl.openssl.ssl-conf-cmd = (<span class=\"string\">&quot;MinProtocol&quot;</span> =&gt; <span class=\"string\">&quot;TLSv1.3&quot;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&quot;Options&quot;</span> =&gt; <span class=\"string\">&quot;-ServerPreference&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This will set the minimum version supported by Lighttpd to be TLS 1.3. Finally, save and reload the Lighttpd configuration for the changes to take effect:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo lighttpd -t -f /etc/lighttpd/lighttpd.conf <span class=\"comment\"># check configuration</span></span><br><span class=\"line\">sudo systemctl reload lighttpd</span><br></pre></td></tr></table></figure>\n","categories":["Technical Know-how"],"tags":["C/C++ Programming","Cryptography","Network Security"]},{"title":"Solve picoCTF's RSA Challenge Sum-O-Primes","url":"/en/2022/08/20/picoCTF-Sum-O-Primes/","content":"<p>By chance, I came across a picoCTF RSA challenge called Sum-O-Primes. This problem is not difficult, you can do it by knowing the basics of the RSA algorithm. In addition, if you are familiar with the history of the evolution of the RSA algorithm, you can find a second ingenious fast solution.<span id=\"more\"></span></p>\n<h3 id=\"picoctf-project\">picoCTF Project</h3>\n<p>picoCTF is a free computer security education program created by security and privacy experts at Carnegie Mellon University. It uses original content built on the CTF (Capture the Flag) framework to provide a variety of challenges. It provides participants with valuable opportunities to systematically learn cybersecurity knowledge and gain practical experience.</p>\n<p>The collection of practice questions for picoCTF is called picoGym. The general problem solution is to search or decipher a string in the format \"picoCTF{...}\" from the given information, that is, the flag to be captured. As shown in the figure below, picoGym currently contains 271 cybersecurity challenge exercises, covering general skills, cryptography, reverse engineering, forensics, and other fields.</p>\n<p><img src=\"picoGym.png\" style=\"width:40.0%;height:40.0%\" /></p>\n<h3 id=\"sum-o-primes-challenge\">Sum-O-Primes Challenge</h3>\n<p>There are 50 cryptography-related challenges in picoGym, one of which is Sum-O-Primes. The task of this challenge is simple and explained as follows:</p>\n<blockquote>\n<p>We have so much faith in RSA we give you not just the product of the primes, but their sum as well!</p>\n<ul>\n<li><a href=\"https://artifacts.picoctf.net/c/180/gen.py\">gen.py</a></li>\n<li><a href=\"https://artifacts.picoctf.net/c/180/output.txt\">output.txt</a></li>\n</ul>\n</blockquote>\n<p>That is, we not only give the product of the two prime numbers used by RSA but also tell you their sum. How are these given? You need to discover by yourself from the rest of the information. After clicking the two links and downloading the file, open the first Python file:</p>\n<figure class=\"highlight python\"><figcaption><span>gen.py</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> binascii <span class=\"keyword\">import</span> hexlify</span><br><span class=\"line\"><span class=\"keyword\">from</span> gmpy2 <span class=\"keyword\">import</span> mpz_urandomb, next_prime, random_state</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> sys.version_info &lt; (<span class=\"number\">3</span>, <span class=\"number\">9</span>):</span><br><span class=\"line\">    <span class=\"keyword\">import</span> gmpy2</span><br><span class=\"line\">    math.gcd = gmpy2.gcd</span><br><span class=\"line\">    math.lcm = gmpy2.lcm</span><br><span class=\"line\"></span><br><span class=\"line\">FLAG  = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;flag.txt&#x27;</span>).read().strip()</span><br><span class=\"line\">FLAG  = <span class=\"built_in\">int</span>(hexlify(FLAG.encode()), <span class=\"number\">16</span>)</span><br><span class=\"line\">SEED  = <span class=\"built_in\">int</span>(hexlify(os.urandom(<span class=\"number\">32</span>)).decode(), <span class=\"number\">16</span>)</span><br><span class=\"line\">STATE = random_state(SEED)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_prime</span>(<span class=\"params\">bits</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next_prime(mpz_urandomb(STATE, bits) | (<span class=\"number\">1</span> &lt;&lt; (bits - <span class=\"number\">1</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">p = get_prime(<span class=\"number\">1024</span>)</span><br><span class=\"line\">q = get_prime(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x = p + q</span><br><span class=\"line\">n = p * q</span><br><span class=\"line\"></span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\"></span><br><span class=\"line\">m = math.lcm(p - <span class=\"number\">1</span>, q - <span class=\"number\">1</span>)</span><br><span class=\"line\">d = <span class=\"built_in\">pow</span>(e, -<span class=\"number\">1</span>, m)</span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"built_in\">pow</span>(FLAG, e, n)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;x = <span class=\"subst\">&#123;x:x&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;n = <span class=\"subst\">&#123;n:x&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;c = <span class=\"subst\">&#123;c:x&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>If you have basic Python programming skills and understand the principles of the RSA algorithm, you should be able to read the above program quickly. What it does is:</p>\n<ol type=\"1\">\n<li>Open the file <code>flag.txt</code> to read the content. Then use the <code>hexlify</code> and <code>int</code> functions to convert it to an integer and store the result in a variable <code>FLAG</code>.</li>\n<li>Call the function <code>get_prime</code> to generate two prime numbers, store their sum in <code>x</code> and their product in <code>n</code>. Then assign 65537 to <code>e</code> and calculate the RSA private exponent <code>d</code>.</li>\n<li>Use standard <code>pow</code> functions to perform modular exponentiation, which implements RSA encryption to encrypt plaintext <code>FLAG</code> into ciphertext <code>c</code>.</li>\n<li>Print out <code>x</code>, <code>n</code>, and <code>c</code>.</li>\n</ol>\n<p>Open the second file, which is apparently the output of the first program in Python:</p>\n<figure class=\"highlight bash\"><figcaption><span>output.txt</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">x = 154ee809a4dc337290e6a4996e0717dd938160d6abfb651736d9f5d524812a659b310ad1f221196ee8ab187fa746a1b488a4079cddfc5db08e78be0d96c83c01e9bb42420b40d6f0ad9f220633459a6dc058bb01c517386bfbd2d4811c9b08558b0e05534768581a74884758d15e15b4ef0dbd6a338bf1f52eed4f137957737d2</span><br><span class=\"line\">n = 6ce91e471f1df651b0d275d6d5522703feecdd77e7821a2caf9514104c059781c1b2e64772d9220addd657ecbd4e6cb8b5941608f6ab54bd5760074a5cd5854920439422192d2ee8912f1ebcc0d97714f209ee2a22e2da60e071541cb7e0772373cfea71831673378ee6432e63abfd14db0d4aa601928923253f9edd419ce96f4d68ce0aa3e6d6b530cd46eefbdac93038ce949c9dd2e573a47471cf8223f88b96e00a92f4d47fd277c42c4075b5e99b41a9f279f442bc0d533b9ddc50592e369e7026b3f7afaa8edf8972f0c3055f4de67a0eea963f099a32e1539de1d1727abadd9235f66371998ec883d1f89b8d907270842818cae49cd5c7f906c4752e81</span><br><span class=\"line\">c = 48b89662b9718fb391c96527272bf74c27810edaca09b63e694af9d11608010b1db9aedd1c867849371121941a1ccac610f7b28b92fa2f981babe816e6d3ecfab83514ed7e18e2b23fc3b96c7002ff47da897e9f2a9cb1b4e245396589e0b72affb73568a2016031555d2a46557919e44a15cd43fe9e1881d40dce1d1e36625e63b1472d3c317898102943072e06d79688c96b6ee2e584002c66497a9cdc48c38aa0548a7bc4fed9b4c23fcd493f38ece68788ef37a559b7f20c6941fcf8e567d9f50807259a7f11fa7a01d3125a1f7609cd94781f224ec8351605354b11c6b078fe015826342c3271ee3af4b99bb0a538b1e6b845594ee6546be8abd22ef2bd</span><br></pre></td></tr></table></figure>\n<p>Once you understand the meaning of the question, you can make a judgment immediately —— if you can decrypt the ciphertext <code>c</code> and retrieve the plaintext FLAG, you can get the original content of <code>flag.txt</code>, that is, capture the flag.</p>\n<h3 id=\"conventional-solution\">Conventional Solution</h3>\n<p>RSA decryption requires a private key exponent <code>d</code>. Referring to the steps of the RSA algorithm below, it is obvious that this demands integer factorization for large prime numbers <code>p</code> and <code>q</code> first.</p>\n<ol type=\"1\">\n<li>Choose two large prime numbers <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span>, compute <span class=\"math inline\">\\(n=pq\\)</span></li>\n<li>Compute <a href=\"https://en.wikipedia.org/wiki/Carmichael_function\">Carmichael function</a> <span class=\"math inline\">\\(\\lambda(n)=\\operatorname{lcm}(p − 1, q − 1)\\)</span> the product, <span class=\"math inline\">\\(\\operatorname{lcm}\\)</span> is a function to find the least common multiple</li>\n<li>Choose any number <span class=\"math inline\">\\(e\\)</span> that is less than and coprime to <span class=\"math inline\">\\(\\lambda(n)\\)</span>, then compute <span class=\"math inline\">\\(d\\)</span>, the <a href=\"https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\">modular multiplicative inverse</a> of <span class=\"math inline\">\\(e\\)</span> regarding <span class=\"math inline\">\\(\\lambda(n)\\)</span>, <span class=\"math inline\">\\(d\\equiv e^{-1}\\pmod {\\lambda(n)}\\)</span></li>\n<li><span class=\"math inline\">\\((n,e)\\)</span> is the RSA public key, <span class=\"math inline\">\\((n,d)\\)</span> the RSA private key</li>\n<li>Use the public key to encrypt the plaintext <span class=\"math inline\">\\(m\\)</span>, the formula is <span class=\"math inline\">\\(c\\equiv m^e\\pmod n\\)</span></li>\n<li>Use the private key to decrypt the ciphertext <span class=\"math inline\">\\(c\\)</span>, the formula is <span class=\"math inline\">\\(m\\equiv c^d\\pmod n\\)</span></li>\n</ol>\n<p>From here, the challenge becomes a problem that, knowing the sum and product of two large prime numbers known, find these two large prime numbers. That is, to solve a system of quadratic linear equations</p>\n<p><span class=\"math display\">\\[\n\\left\\{\n\\begin{aligned}\np+q &amp;=n \\\\ \np*q &amp;=x\n\\end{aligned} \n\\right. \n\\]</span></p>\n<p>Using the knowledge of elementary mathematics, the above equations can be transformed into a quadratic equation <span class=\"math display\">\\[p^2 - x * p + n = 0\\]</span></p>\n<p>Obviously, <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> are its two roots. According to the quadratic formula</p>\n<p><span class=\"math display\">\\[(p,q)={\\frac {x}{2}}\\pm {\\sqrt {\\left({\\frac {x}{2}}\\right)^{2}-n}}\\]</span></p>\n<p>We can get <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span>. The rest of the work is easy. The code to compute <span class=\"math inline\">\\(d\\)</span> from <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> can be copied directly from lines 28, 30, and 31 in gen.py. The final complete Python problem-solving code is as follows:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">file = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;output.txt&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\">Lines = file.readlines()</span><br><span class=\"line\">file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">x = <span class=\"built_in\">int</span>((Lines[<span class=\"number\">0</span>].split())[<span class=\"number\">2</span>], <span class=\"number\">16</span>) <span class=\"comment\"># x = p + q</span></span><br><span class=\"line\">n = <span class=\"built_in\">int</span>((Lines[<span class=\"number\">1</span>].split())[<span class=\"number\">2</span>], <span class=\"number\">16</span>) <span class=\"comment\"># n = p * q</span></span><br><span class=\"line\">c = <span class=\"built_in\">int</span>((Lines[<span class=\"number\">2</span>].split())[<span class=\"number\">2</span>], <span class=\"number\">16</span>) <span class=\"comment\"># Ciphertext</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">solve_rsa_primes</span>(<span class=\"params\">s: <span class=\"built_in\">int</span>, m: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">tuple</span>:</span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">    Solve RSA prime numbers (p, q) from the quadratic equation</span></span><br><span class=\"line\"><span class=\"string\">    p^2 - s * p + m = 0 with the formula p = s/2 +/- sqrt((s/2)^2 - m)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    Input: s - sum of primes, m - product of primes</span></span><br><span class=\"line\"><span class=\"string\">    Output: (p, q)</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    half_s = s &gt;&gt; <span class=\"number\">1</span></span><br><span class=\"line\">    tmp = math.isqrt(half_s ** <span class=\"number\">2</span> - m)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">int</span>(half_s + tmp), <span class=\"built_in\">int</span>(half_s - tmp);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Now run with the real input</span></span><br><span class=\"line\">p, q = solve_rsa_primes(x, n)</span><br><span class=\"line\">m = math.lcm(p - <span class=\"number\">1</span>, q - <span class=\"number\">1</span>)</span><br><span class=\"line\">e = <span class=\"number\">65537</span></span><br><span class=\"line\">d = <span class=\"built_in\">pow</span>(e, -<span class=\"number\">1</span>, m)</span><br><span class=\"line\">FLAG = <span class=\"built_in\">pow</span>(c, d, n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(FLAG.to_bytes((FLAG.bit_length() + <span class=\"number\">7</span>) // <span class=\"number\">8</span>, <span class=\"string\">&#x27;big&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p>The above program defines a general function <code>solve_rsa_primes</code> to solve two large prime numbers. After it gets <code>d</code>, the same <code>pow</code> function is called to decrypt, and finally the plaintext is converted from a large integer to a byte sequence and printed out. The result of running this program is</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">b&#x27;picoCTF&#123;pl33z_n0_g1v3_c0ngru3nc3_0f_5qu4r35_92fe3557&#125;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>BINGO! Capture the Flag successfully!</p>\n<div class=\"note warning\"><p><strong>Note:</strong> The function <code>solve_rsa_primes</code> calls <code>math.isqrt</code> to compute the integer square root of the given integer. This is indispensable! If it is written incorrectly with <code>math.sqrt</code>, the following overflow error will occur</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">=============== RESTART: /Users/zixi/Downloads/Sum-O-Primes.py ==============</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/zixi/Downloads/Sum-O-Primes.py&quot;</span>, line <span class=\"number\">35</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    p, q = solve_rsa_primes(x, n)</span><br><span class=\"line\">  File <span class=\"string\">&quot;/Users/zixi/Downloads/Sum-O-Primes.py&quot;</span>, line <span class=\"number\">31</span>, <span class=\"keyword\">in</span> solve_rsa_primes</span><br><span class=\"line\">    tmp = math.sqrt(<span class=\"built_in\">int</span>(half_s ** <span class=\"number\">2</span> - m))</span><br><span class=\"line\">OverflowError: <span class=\"built_in\">int</span> too large to convert to <span class=\"built_in\">float</span></span><br></pre></td></tr></table></figure>\n<p>This error happens because <code>math.sqrt</code> uses floating-point arithmetic but fails to convert large integers to floating-point numbers.</p>\n</div>\n<h3 id=\"quick-solution\">Quick Solution</h3>\n<p>The conventional solution to this problem has to solve a quadratic equation, so the integer square root operation is essential. Is there a solution that doesn't need a square root operation? The answer is yes.</p>\n<p>In the <a href=\"http://people.csail.mit.edu/rivest/Rsapaper.pdf\">original RSA paper</a>, the public exponent <span class=\"math inline\">\\(e\\)</span> and the private exponent <span class=\"math inline\">\\(d\\)</span> have the relationship as the following equation</p>\n<p><span class=\"math display\">\\[d⋅e≡1\\pmod{\\varphi(n)}\\]</span></p>\n<p>Here the modular is the Euler's totient function <span class=\"math inline\">\\(\\varphi(n)=(p-1)(q-1)\\)</span>. Since <span class=\"math inline\">\\(\\varphi(N)\\)</span> is always divisible by <span class=\"math inline\">\\(\\lambda(n)\\)</span>, any <code>d</code> satisfying the above also satisfies <span class=\"math inline\">\\(d⋅e≡1\\pmod{\\lambda(n)}\\)</span>, thus <strong>the private exponent is not unique</strong>. Although the calculated <span class=\"math inline\">\\(d&gt;\\lambda(n)\\)</span>, the square root operation can be avoided when applied to the Sum-O-Primes problem. This is because <span class=\"math display\">\\[\n\\begin{aligned}\n\\varphi(n)&amp;=(p-1)(q-1)\\\\\n&amp;=pq-(p+q)+1\\\\\n&amp;=n-x+1\n\\end{aligned}\n\\]</span></p>\n<p>Hereby the formula for computing the private exponent becomes</p>\n<p><span class=\"math display\">\\[\n\\begin{aligned}\nd&amp;≡e^{-1}\\pmod{\\varphi(n)}\\\\\n&amp;≡e^{-1}\\pmod{(n-x+1)}\n\\end{aligned}\n\\]</span></p>\n<p>Now that <span class=\"math inline\">\\(n\\)</span> and <span class=\"math inline\">\\(x\\)</span> are readily available, this method does not require finding <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> first, and naturally, there is no need for a square root operation. The Python code for this new solution is very concise</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">d1 = <span class=\"built_in\">pow</span>(e, -<span class=\"number\">1</span>, n - x + <span class=\"number\">1</span>)</span><br><span class=\"line\">FLAG = <span class=\"built_in\">pow</span>(c, d1, n)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(FLAG.to_bytes((FLAG.bit_length() + <span class=\"number\">7</span>) // <span class=\"number\">8</span>, <span class=\"string\">&#x27;big&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;d = &quot;</span>, d)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;d1 = &quot;</span>, d1)</span><br><span class=\"line\"><span class=\"keyword\">assert</span>(d1&gt;d)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;d1/d = &quot;</span>, d1/d)</span><br></pre></td></tr></table></figure>\n<p>To compare these two solutions, 4 lines of print and assert statements are added at the end. The execution result of this code is</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">=============== RESTART: /Users/zixi/Downloads/Sum-O-Primes.py ==============</span><br><span class=\"line\"><span class=\"string\">b&#x27;picoCTF&#123;pl33z_n0_g1v3_c0ngru3nc3_0f_5qu4r35_92fe3557&#125;&#x27;</span></span><br><span class=\"line\">d =  <span class=\"number\">1590433953643304448870807755026766943237397482033766155980367645454600169745357277163199312196609495875891431590581528929277583062406061101224041553945564552302546648687338536694903918084325519368961617691238793972703013656395301935576994660878296156727353260699130612675943209520489312860964899655070852366584778594425834982623831654304915478835573020874834723387183369976749895237126850604587166433366381884290402338703266523462767765540527102747754912478720160791675179128443712374832507705614160658601242723842366612805686436771142338154848447759947887908800687914418476358484536216953925324788380823429735298973</span></span><br><span class=\"line\">d1 =  <span class=\"number\">11901952834426939436403812982514571575614906347331071933175950931208083895179963694981295931167346168378938101218143770786299673201984563299831132533757316974157649670783507276616478666261648674806749337918514985951832847720617452268824430679672778783943236259522437088812130196067329355430038927225825521934485847159262037514154059696664148362902872186817856316128403800463106817000251243818717005827615275821709043532925457271839955998044684537152992871171338447136672661193487297988293156428071068861346467230927990425182893890027896377626007826573834588309038513191969376781172191621785853174152547091371818954913</span></span><br><span class=\"line\">d1/d =  <span class=\"number\">7.483462489694971</span></span><br></pre></td></tr></table></figure>\n<p>As shown above, this solution also succeeds in capturing the flag. The <span class=\"math inline\">\\(d\\)</span> value (<code>d1</code>) calculated by the new solution is more than 7 times that of the conventional solution.</p>\n<p>Click here to download all the code of this article: <a href=\"Sum-O-Primes.py.gz\">Sum-O-Primes.py.gz</a></p>\n","categories":["Technical Know-how"],"tags":["Cryptography","Python Programming","CTF"]},{"title":"Notes on Using uClibc Standard Library in Embedded Linux System","url":"/en/2023/03/10/uClibc-tips/","content":"<p><a href=\"https://www.uclibc.org\">uClibc</a> is a small and exquisite C standard library for embedded Linux systems. It is widely used in the development of low-end embedded systems and Internet of Things devices. Here are some recent experiences to provide convenience for engineers who need to solve similar problems or meet corresponding requirements.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>Low-level programming is good for the programmer's soul.</strong><br> <strong>— <em>John Carmack</em> (American computer programmer and video game developer, co-founder of the video game company id Software)</strong></p>\n</div>\n<h3 id=\"introduction-to-uclibc\">Introduction to uClibc</h3>\n<p>uClibc (sometimes written as μClibc) is a small C standard library designed to provide support for embedded systems and mobile devices using operating systems based on the Linux kernel. uClibc was originally developed to support μClinux, a version of Linux not requiring a memory management unit thus especially suited for microcontroller systems. The \"uC\" in its name is the abbreviation of microcontroller in English, where \"u\" is a Latin script typographical approximation of the Greek letter μ that stands for \"micro\".</p>\n<p>uClibc is a free and open-source software licensed under the GNU Lesser GPL, and its library functions encapsulate the system calls of the Linux kernel. It can run on standard or MMU-less Linux systems and supports many processors such as i386, x86-64, ARM, MIPS, and PowerPC. Development of uClibc started in 1999 and was written mostly from scratch, but also absorbed code from glibc and other projects. uClibc is much smaller than glibc. While glibc aims to fully support all relevant C standards on a wide range of hardware and kernel platforms, uClibc focuses on embedded Linux systems. It also allows developers to enable or disable some features according to the memory space design requirements.</p>\n<p>The following records show the list of C standard library files in two similar embedded systems. The first uses glibc-2.23 version, and the second integrates uClibc-0.9.33.2 version. The total size of glibc library files is more than 2MB, while the uClibc library files add up to less than 1MB. It can be seen that using uClibc does save a lot of storage space.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">STM1:/<span class=\"comment\"># find . -name &quot;*lib*2.23*&quot; | xargs ls -alh</span></span><br><span class=\"line\">-rwxr-xr-x    1 root     root        9.6K Jan  1  1970 ./lib/libanl-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root        1.1M Jan  1  1970 ./lib/libc-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root      177.5K Jan  1  1970 ./lib/libcidn-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       29.5K Jan  1  1970 ./lib/libcrypt-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root        9.5K Jan  1  1970 ./lib/libdl-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root      429.4K Jan  1  1970 ./lib/libm-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       65.8K Jan  1  1970 ./lib/libnsl-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       17.5K Jan  1  1970 ./lib/libnss_dns-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       33.6K Jan  1  1970 ./lib/libnss_files-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       90.5K Jan  1  1970 ./lib/libpthread-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       65.7K Jan  1  1970 ./lib/libresolv-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       25.9K Jan  1  1970 ./lib/librt-2.23.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root        9.5K Jan  1  1970 ./lib/libutil-2.23.so</span><br><span class=\"line\"></span><br><span class=\"line\">STM2:/<span class=\"comment\"># find . -name &quot;*lib*0.9.33*&quot; | xargs ls -alh</span></span><br><span class=\"line\">-rwxr-xr-x    1 root     root       28.0K Jan  1  1970 ./lib/ld-uClibc-0.9.33.2.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       36.1K Jan  1  1970 ./lib/libcrypt-0.9.33.2.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       16.2K Jan  1  1970 ./lib/libdl-0.9.33.2.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       72.1K Jan  1  1970 ./lib/libm-0.9.33.2.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root      116.4K Jan  1  1970 ./lib/libpthread-0.9.33.2.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       16.2K Jan  1  1970 ./lib/librt-0.9.33.2.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root       28.3K Jan  1  1970 ./lib/libthread_db-0.9.33.2.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root      621.4K Jan  1  1970 ./lib/libuClibc-0.9.33.2.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root        8.1K Jan  1  1970 ./lib/libubacktrace-0.9.33.2.so</span><br><span class=\"line\">-rwxr-xr-x    1 root     root        4.1K Jan  1  1970 ./lib/libutil-0.9.33.2.so</span><br></pre></td></tr></table></figure>\n<h3 id=\"ipv6-and-interface-api\">IPv6 and Interface API</h3>\n<p>With the steady growth of IPv6 deployment, adding IPv6 protocol stack support for embedded systems has become necessary. In a software project that adds IPv4/IPv6 dual-stack function to devices using uClibc, it is found that there is an application link error - <code>undefined reference to getifaddrs</code>. <code>getifaddrs()</code> is a very useful function, we can call it to get the address information of all the network interfaces of the system. Query the Linux programming manual:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">SYNOPSIS</span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\">       <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ifaddrs.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"title function_\">getifaddrs</span><span class=\"params\">(<span class=\"keyword\">struct</span> ifaddrs **ifap)</span>;</span><br><span class=\"line\">       ...</span><br><span class=\"line\"> \t </span><br><span class=\"line\"> DESCRIPTION</span><br><span class=\"line\">       The <span class=\"title function_\">getifaddrs</span><span class=\"params\">()</span> function creates a linked <span class=\"built_in\">list</span> of structures</span><br><span class=\"line\">       describing the network interfaces of the local system, and stores</span><br><span class=\"line\">       the address of the first item of the <span class=\"built_in\">list</span> in *ifap.</span><br><span class=\"line\">       ...</span><br><span class=\"line\">  </span><br><span class=\"line\"> VERSIONS</span><br><span class=\"line\">       The <span class=\"title function_\">getifaddrs</span><span class=\"params\">()</span> function first appeared in glibc 2.3, but before</span><br><span class=\"line\">       glibc 2.3.3, the implementation supported only IPv4 addresses;</span><br><span class=\"line\">       IPv6 support was added in glibc <span class=\"number\">2.3</span><span class=\"number\">.3</span>.  Support of address</span><br><span class=\"line\">       families other than IPv4 is available only on kernels that</span><br><span class=\"line\">       support netlink.</span><br><span class=\"line\">       ...</span><br></pre></td></tr></table></figure>\n<p>The last sentence above is key: <strong>only kernels supporting netlink can support address families other than IPv4</strong>. The Linux kernel version running on this system is 3.x, which supports netlink. So, could there be a problem with uClibc's support for netlink that causes getifaddrs() not to get compiled?</p>\n<p>With this question in mind, search the source code directory of uClibc and find the C file that implements the function <code>getifaddrs()</code>:</p>\n<figure class=\"highlight c\"><figcaption><span>libc/inet/ifaddrs.c</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> __ASSUME_NETLINK_SUPPORT</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __UCLIBC_SUPPORT_AI_ADDRCONFIG__</span></span><br><span class=\"line\"><span class=\"comment\">/* struct to hold the data for one ifaddrs entry, so we can allocate</span></span><br><span class=\"line\"><span class=\"comment\">   everything at once.  */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ifaddrs_storage</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ifaddrs</span> <span class=\"title\">ifa</span>;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">union</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/* Save space for the biggest of the four used sockaddr types and</span></span><br><span class=\"line\"><span class=\"comment\">       avoid a lot of casts.  */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr</span> <span class=\"title\">sa</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_ll</span> <span class=\"title\">sl</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in</span> <span class=\"title\">s4</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __UCLIBC_HAS_IPV6__</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sockaddr_in6</span> <span class=\"title\">s6</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">  &#125; addr, netmask, broadaddr;</span><br><span class=\"line\">  <span class=\"type\">char</span> name[IF_NAMESIZE + <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* __UCLIBC_SUPPORT_AI_ADDRCONFIG__ */</span></span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __UCLIBC_SUPPORT_AI_ADDRCONFIG__</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">getifaddrs</span> <span class=\"params\">(<span class=\"keyword\">struct</span> ifaddrs **ifap)</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* __UCLIBC_SUPPORT_AI_ADDRCONFIG__ */</span></span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">/* __ASSUME_NETLINK_SUPPORT */</span></span></span><br></pre></td></tr></table></figure>\n<p>Just as expected! The implementation of the entire function and the definition of the associated data structure ifaddrs_storageare are placed under three nested conditional compilation directives with macros defined as</p>\n<ol type=\"1\">\n<li>__ASSUME_NETLINK_SUPPORT</li>\n<li>__UCLIBC_SUPPORT_AI_ADDRCONFIG__</li>\n<li>__UCLIBC_HAS_IPV6__</li>\n</ol>\n<p>Therefore, as long as their corresponding configuration lines are opened, the problem should be solved. After changing the configuration file of uClibc as follows, rebuild the dynamic link library of uClibc, then the application can be made successfully:</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--- a/toolchain/uClibc/config-0.9.33.2/common</span></span><br><span class=\"line\"><span class=\"comment\">+++ b/toolchain/uClibc/config-0.9.33.2/common</span></span><br><span class=\"line\"><span class=\"meta\">@@ -147,7 +147,8 @@</span> UCLIBC_HAS_RPC=y</span><br><span class=\"line\"> UCLIBC_HAS_FULL_RPC=y</span><br><span class=\"line\"><span class=\"deletion\">-# UCLIBC_HAS_IPV6 is not set</span></span><br><span class=\"line\"><span class=\"addition\">+UCLIBC_HAS_IPV6=y</span></span><br><span class=\"line\"><span class=\"deletion\">-# UCLIBC_USE_NETLINK is not set</span></span><br><span class=\"line\"><span class=\"addition\">+UCLIBC_USE_NETLINK=y</span></span><br><span class=\"line\"><span class=\"addition\">+UCLIBC_SUPPORT_AI_ADDRCONFIG=y</span></span><br><span class=\"line\"> UCLIBC_HAS_BSD_RES_CLOSE=y</span><br></pre></td></tr></table></figure>\n<h3 id=\"sha-2-hash-function\">SHA-2 Hash Function</h3>\n<p>Embedded systems often need to provide remote SSH login services for system administrators, which requires the creation of system users and their passwords. Linux saves the user name and the hashed password in the /etc/shadow file. The storage format of the hash value follows a de facto standard called the Modular Crypt Format (MCF for short), and its format is as follows:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&lt;<span class=\"built_in\">id</span>&gt;[$&lt;param&gt;=&lt;value&gt;(,&lt;param&gt;=&lt;value&gt;)*][$&lt;salt&gt;[$&lt;<span class=\"built_in\">hash</span>&gt;]]</span><br></pre></td></tr></table></figure>\n<p>Here</p>\n<ul>\n<li>id: indicates the identifier of the hash algorithm (eg 1 for MD5, 5 for SHA-256, 6 for SHA-512)</li>\n<li>param=value: Hash complexity parameters (such as the number of rounds/iterations) and their values</li>\n<li>salt: radix-64 (charset [+/a-zA-Z0-9]) encoded salt</li>\n<li>hash: the radix-64 encoded hash result of the password and salt</li>\n</ul>\n<p>With the rapid increase of computing power following Moore's Law, the previously commonly used MD5-based hashing scheme has become obsolete because it is too vulnerable to attack. Newly designed systems are now switched to the SHA-512 hashing scheme, corresponding to <code>$6$</code> seen in the /etc/shadow file.</p>\n<p>Both generation and verification of user password hash values ​​can be implemented with the POSIX C library function named <code>crypt</code>. This function is defined as follows:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">crypt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *key, <span class=\"type\">const</span> <span class=\"type\">char</span> *salt)</span></span><br></pre></td></tr></table></figure>\n<p>The input parameter <code>key</code> points to the string containing the user's password, and <code>salt</code> points to a string in the format <code>$&lt;id&gt;$&lt;salt&gt;</code> indicating the hash algorithm and salt to be used. Most Linux distributions use the <code>crypt</code> function provided by the glibc library. The following figure summarizes the augmented <code>crypt</code> function in Glibc:</p>\n<p><img src=\"crypt-glibc-features.png\" style=\"width:60.0%;height:60.0%\" /></p>\n<p>In an embedded Linux system integrating uClibc, uClibc provides support for the <code>crypt</code> function. But the test found that it returned a null pointer for the correct <span class=\"math inline\">\\(6\\)</span><salt> input! What's going on here?</p>\n<p>The answer lies in the uClibc's implementation of the <code>crypt</code> function. Find the corresponding C source code:</p>\n<figure class=\"highlight c\"><figcaption><span>libcrypt/crypt.c</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;crypt.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;libcrypt.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *<span class=\"title function_\">crypt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *key, <span class=\"type\">const</span> <span class=\"type\">char</span> *salt)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *ukey = (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)key;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *usalt = (<span class=\"type\">const</span> <span class=\"type\">unsigned</span> <span class=\"type\">char</span> *)salt;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (salt[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;$&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (salt[<span class=\"number\">1</span>] &amp;&amp; salt[<span class=\"number\">2</span>] == <span class=\"string\">&#x27;$&#x27;</span>) &#123; <span class=\"comment\">/* no blowfish &#x27;2X&#x27; here ATM */</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (*++salt == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> __md5_crypt(ukey, usalt);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __UCLIBC_HAS_SHA256_CRYPT_IMPL__</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*salt == <span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> __sha256_crypt(ukey, usalt);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> __UCLIBC_HAS_SHA512_CRYPT_IMPL__</span></span><br><span class=\"line\">                        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (*salt == <span class=\"string\">&#x27;6&#x27;</span>)</span><br><span class=\"line\">                                <span class=\"keyword\">return</span> __sha512_crypt(ukey, usalt);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">/* __set_errno(EINVAL);*/</span> <span class=\"comment\">/* ENOSYS might be misleading */</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> __des_crypt(ukey, usalt);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Aha! It turns out that it only does MD5 hashing by default, and the codes of SHA-256 and SHA-512 need their own conditional compilation macro definitions. This is easy to handle, just edit the configuration file of uClibc and open the latter two.</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--- a/toolchain/uClibc/config-0.9.33.2/common</span></span><br><span class=\"line\"><span class=\"comment\">+++ b/toolchain/uClibc/config-0.9.33.2/common</span></span><br><span class=\"line\"><span class=\"meta\">@@ -151,8 +151,8 @@</span> UCLIBC_HAS_REGEX_OLD=y</span><br><span class=\"line\"> UCLIBC_HAS_RESOLVER_SUPPORT=y</span><br><span class=\"line\"><span class=\"deletion\">-# UCLIBC_HAS_SHA256_CRYPT_IMPL is not set</span></span><br><span class=\"line\"><span class=\"deletion\">-# UCLIBC_HAS_SHA512_CRYPT_IMPL is not set</span></span><br><span class=\"line\"><span class=\"addition\">+UCLIBC_HAS_SHA256_CRYPT_IMPL=y</span></span><br><span class=\"line\"><span class=\"addition\">+UCLIBC_HAS_SHA512_CRYPT_IMPL=y</span></span><br><span class=\"line\"> UCLIBC_HAS_SHADOW=y</span><br></pre></td></tr></table></figure>\n<p>Finally, take a look at the program that comes with uClibc to test the SHA-512 hash algorithm. It clearly lists the data structures defined by the test code, including the salt, the input password, and the expected output, as well as several test vectors:</p>\n<figure class=\"highlight c\"><figcaption><span>test/crypt/sha512c-test.c</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> *salt;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> *input;</span><br><span class=\"line\">  <span class=\"type\">const</span> <span class=\"type\">char</span> *expected;</span><br><span class=\"line\">&#125; tests[] =</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &#123; <span class=\"string\">&quot;$6$saltstring&quot;</span>, <span class=\"string\">&quot;Hello world!&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;$6$saltstring$svn8UoSVapNtMuq1ukKS4tPQd8iKwSMHWjl/O817G3uBnIFNjnQJu&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;esI68u4OTLiBFdcbYEdFCoEOfaS35inz1&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"string\">&quot;$6$rounds=10000$saltstringsaltstring&quot;</span>, <span class=\"string\">&quot;Hello world!&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;$6$rounds=10000$saltstringsaltst$OW1/O6BYHV6BcXZu8QVeXbDWra3Oeqh0sb&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;HbbMCVNSnCM/UrjmM0Dp8vOuZeHBy/YTBmSK6H9qs/y3RnOaw5v.&quot;</span> &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &#123; <span class=\"string\">&quot;$6$rounds=10$roundstoolow&quot;</span>, <span class=\"string\">&quot;the minimum number is still observed&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;$6$rounds=1000$roundstoolow$kUMsbe306n21p9R.FRkW3IGn.S9NPN0x50YhH1x&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;hLsPuWGsUSklZt58jaTfF4ZEQpyUNGc0dqbpBYYBaHHrsX.&quot;</span> &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>It can be seen that the last test case defines the round value 10 (<code>$6$rounds=10$roundstoolow</code>), while the output shows that the round is 1000 (<code>rounds=1000</code>). This confirms that the <code>crypt</code> function implementation of uClibc matches the augmented function of Glibc - in order to ensure security, if the input specified round is too small, <code>crypt</code> will automatically set to the minimum round of 1000.</p>\n<h3 id=\"dns-security-patch\">DNS Security Patch</h3>\n<p>In early May 2022, <a href=\"https://www.nozominetworks.com/blog/nozomi-networks-discovers-unpatched-dns-bug-in-popular-c-standard-library-putting-iot-at-risk/\">Nozomi Networks</a>, a company focused on providing security solutions for industrial and critical infrastructure environments, released a newly discovered uClibc security vulnerability <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-30295\">CVE-2022-30295</a>. This vulnerability exists in the Domain Name System (DNS) implementation of all versions of uClibc and its fork <a href=\"https://www.uclibc-ng.org\">uClibc-ng</a> (prior to version 1.0.41). Since the implementation uses predictable transaction IDs when making DNS requests, there is a risk of DNS cache poisoning attacks.</p>\n<p>Specifically, applications often call <code>gethostbyname</code> library functions to resolve a network address for a given hostname. uClibc/uClibc-ng internally implements a <code>__dns_lookup</code> function for the actual DNS domain name request and response processing. Taking the last version 0.9.33.2 of uClibc as an example, the screenshot below shows the problematic code in the function <code>__dns_lookup</code>:</p>\n<p><img src=\"CVE-2022-30295.png\" style=\"width:65.0%;height:65.0%\" /></p>\n<p>Referring to line 1308, at the first DNS request, the variable <code>local_id</code> is initialized to the transaction ID value of the last DNS request (stored in a static variable <code>last_id</code>). Line 1319 is the actual culprit, it simply updates the old <code>local_id</code> value by incrementing it by 1. This new value is stored back into the variable <code>last_id</code>, as shown on line 1322. Finally, on line 1334, the value of <code>local_id</code> is copied into the structure variable <code>h</code>, which represents the actual content of the DNS request header. This code works pretty much in all available versions of uClibc and uClibc-ng prior to version 1.0.41.</p>\n<p>This implementation makes the transaction ID in the DNS request predictable, because the attacker can estimate the value of the transaction ID in the next request as long as he/she detects the current transaction ID. By exploiting this vulnerability, an attacker can disrupt/poison the host's DNS cache by crafting a DNS response containing the correct source port and winning the competition with the legitimate response returned by the DNS server, making the network data of the application in the host system be directed to a trap site set by the attacker.</p>\n<p>The maintainers of uClibc-ng responded quickly to the announcement of this security vulnerability. They submitted a <a href=\"https://cgit.uclibc-ng.org/cgi/cgit/uclibc-ng.git/commit/?id=f73fcb3d067e22817189077c9b7bd2417c930d34\">fix</a> in mid-May 2022, and released version 1.0.41 including this patch at the end of that month. For uClibc, since this C standard library has stopped releasing any new versions since 2012, it is currently in an unmaintained state, so system R&amp;D engineers need to come up with their repair. The following uClibc patches are available for reference:</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">diff --git a/libc/inet/resolv.c b/libc/inet/resolv.c</span></span><br><span class=\"line\"><span class=\"comment\">index 31e63810b..c2a8e2be4 100644</span></span><br><span class=\"line\"><span class=\"comment\">--- a/libc/inet/resolv.c</span></span><br><span class=\"line\"><span class=\"comment\">+++ b/libc/inet/resolv.c</span></span><br><span class=\"line\"><span class=\"meta\">@@ -315,6 +315,7 @@</span> Domain name in a message can be represented as either:</span><br><span class=\"line\"> #include &lt;sys/utsname.h&gt;</span><br><span class=\"line\"> #include &lt;sys/un.h&gt;</span><br><span class=\"line\"> #include &lt;sys/stat.h&gt;</span><br><span class=\"line\"><span class=\"addition\">+#include &lt;fcntl.h&gt;</span></span><br><span class=\"line\"> #include &lt;sys/param.h&gt;</span><br><span class=\"line\"> #include &lt;bits/uClibc_mutex.h&gt;</span><br><span class=\"line\"> #include &quot;internal/parse_config.h&quot;</span><br><span class=\"line\"><span class=\"meta\">@@ -1212,6 +1213,20 @@</span> static int __decode_answer(const unsigned char *message, /* packet */</span><br><span class=\"line\">        return i + RRFIXEDSZ + a-&gt;rdlength;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+uint16_t dnsrand_next(int urand_fd, int def_value) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   if (urand_fd == -1) return def_value;</span></span><br><span class=\"line\"><span class=\"addition\">+   uint16_t val;</span></span><br><span class=\"line\"><span class=\"addition\">+   if(read(urand_fd, &amp;val, 2) != 2) return def_value;</span></span><br><span class=\"line\"><span class=\"addition\">+   return val;</span></span><br><span class=\"line\"><span class=\"addition\">+&#125;</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"><span class=\"addition\">+int dnsrand_setup(int *urand_fd, int def_value) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   if (*urand_fd &gt; 0) return dnsrand_next(*urand_fd, def_value);</span></span><br><span class=\"line\"><span class=\"addition\">+   *urand_fd = open(&quot;/dev/urandom&quot;, O_RDONLY);</span></span><br><span class=\"line\"><span class=\"addition\">+   if (*urand_fd == -1) return def_value;</span></span><br><span class=\"line\"><span class=\"addition\">+   return dnsrand_next(*urand_fd, def_value);</span></span><br><span class=\"line\"><span class=\"addition\">+&#125;</span></span><br><span class=\"line\"><span class=\"addition\">+</span></span><br><span class=\"line\"> /* On entry:</span><br><span class=\"line\">  *  a.buf(len) = auxiliary buffer for IP addresses after first one</span><br><span class=\"line\">  *  a.add_count = how many additional addresses are there already</span><br><span class=\"line\"><span class=\"meta\">@@ -1237,6 +1252,7 @@</span> int __dns_lookup(const char *name,</span><br><span class=\"line\">        /* Protected by __resolv_lock: */</span><br><span class=\"line\">        static int last_ns_num = 0;</span><br><span class=\"line\">        static uint16_t last_id = 1;</span><br><span class=\"line\"><span class=\"addition\">+       static int urand_fd = -1;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        int i, j, fd, rc;</span><br><span class=\"line\">        int packet_len;</span><br><span class=\"line\"><span class=\"meta\">@@ -1305,7 +1321,7 @@</span> int __dns_lookup(const char *name,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                /* first time? pick starting server etc */</span><br><span class=\"line\">                if (local_ns_num &lt; 0) &#123;</span><br><span class=\"line\"><span class=\"deletion\">-                       local_id = last_id;</span></span><br><span class=\"line\"><span class=\"addition\">+                       local_id = dnsrand_setup(&amp;urand_fd, last_id);</span></span><br><span class=\"line\"> /*TODO: implement /etc/resolv.conf&#x27;s &quot;options rotate&quot;</span><br><span class=\"line\">  (a.k.a. RES_ROTATE bit in _res.options)</span><br><span class=\"line\">                        local_ns_num = 0;</span><br><span class=\"line\"><span class=\"meta\">@@ -1316,8 +1332,9 @@</span> int __dns_lookup(const char *name,</span><br><span class=\"line\">                retries_left--;</span><br><span class=\"line\">                if (local_ns_num &gt;= __nameservers)</span><br><span class=\"line\">                        local_ns_num = 0;</span><br><span class=\"line\"><span class=\"deletion\">-               local_id++;</span></span><br><span class=\"line\"><span class=\"addition\">+               local_id = dnsrand_next(urand_fd, local_id++);</span></span><br><span class=\"line\">                local_id &amp;= 0xffff;</span><br><span class=\"line\"><span class=\"addition\">+               DPRINTF(&quot;local_id:0x%hx\\n&quot;, local_id);</span></span><br><span class=\"line\">                /* write new values back while still under lock */</span><br><span class=\"line\">                last_id = local_id;</span><br><span class=\"line\">                last_ns_num = local_ns_num;</span><br></pre></td></tr></table></figure>\n<p>This uClibc patch is a simplified version of the uClibc-ng official patch. Its core is to read a double-byte random number from the system <code>/dev/urandom</code> file, and then use it to set the original <code>local_id</code>, the transaction ID of the DNS request. <code>/dev/urandom</code> is a special device file of the Linux system. It can be used as a non-blocking random number generator, which will reuse the data in the entropy pool to generate pseudo-random data.</p>\n<p>Note that in the above patch, the function <code>dnsrand_setup</code> must first check <code>urand_fd</code> whether it is positive, and only open <code>/dev/urandom</code> when it is not true. Otherwise, the file will be reopened every time the application does a DNS lookup, the system will quickly hit the maximum number of file descriptors allowed, and the system will crash because it cannot open any more files.</p>\n<p>Finally, a comparison of an embedded system using uClibc before and after adding DNS security patches is given. The following are the DNS packets intercepted by two sniffers. In the first unpatched system, the transaction ID of the DNS request is incremented in sequence, which is an obvious security hole; the second is after the patch is added, the transaction ID of each DNS request is a random value, and the loophole has been filled.</p>\n<p><img src=\"uClibc-DNS-cve.png\" style=\"width:75.0%;height:75.0%\" /> <img src=\"uClibc-DNS-fix.png\" style=\"width:75.0%;height:75.0%\" /></p>\n","categories":["Technical Know-how"],"tags":["C/C++ Programming","System Programming","Cryptography","Computer Communications","TCP/IP"]}]