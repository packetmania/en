[{"title":"Understand Endianness","url":"/en/2021/12/24/Endianness/","content":"<p>The problem of Endianness is essentially a question about how computers store large numbers. <span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>I do not fear computers. I fear lack of them.</strong><br> <strong>— <em>Isaac Asimov</em> (American writer and professor of biochemistry, best known for his hard science fiction)</strong></p>\n</div>\n<p>We know that one basic memory unit can hold one byte, and each memory unit has its address. For an integer larger than decimal 255 (0xff in hexadecimal), more than one memory unit is required. For example, 4660 is 0x1234 in hexadecimal and requires two bytes. Different computer systems use different methods to store these two bytes. In our common PC, the least-significant byte 0x34 is stored in the low address memory unit and the most-significant byte 0x12 is stored in the high address memory unit. While in Sun workstations, the opposite is true, with 0x34 in the high address memory unit and 0x12 in the low address memory unit. The former is called <code>Little Endian</code> and the latter is <code>Big Endian</code>.</p>\n<p>How can I remember these two data storing modes? It is quite simple. First, remember that the addresses of the memory units we are talking about are always arranged from low to high. For a multi-byte number, if the first byte in the low address you see is the least-significant byte, the system is <code>Little Endian</code>, where Little matches <code>low</code>. On the contrary is <code>Big Endian</code>, where Big corresponds to \"high\".</p>\n<h2 id=\"program-example\">Program Example</h2>\n<p>To deepen our understanding of Endianness, let's look at the following example of a C program:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> a = <span class=\"number\">1</span>; \t \t \t </span><br><span class=\"line\"><span class=\"keyword\">char</span> b = <span class=\"number\">2</span>;                       </span><br><span class=\"line\"><span class=\"keyword\">short</span> c = <span class=\"number\">255</span>;\t<span class=\"comment\">/* 0x00ff */</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> d = <span class=\"number\">0x44332211</span>;</span><br></pre></td></tr></table></figure>\n<p>On Intel 80x86 based systems, the memory content corresponding to variables a, b, c, and d are shown in the following table：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>Address Offset</th>\n<th>Memory Content</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0x0000</td>\n<td>01 02 FF 00</td>\n</tr>\n<tr class=\"even\">\n<td>0x0004</td>\n<td>11 22 33 44</td>\n</tr>\n</tbody>\n</table>\n<p>We can immediately tell that this system is <code>Little Endian</code>. For a 16-bit integer <code>short c</code>, we see the least-significant byte 0xff first, and the next one is 0x00. Similarly for a 32-bit integer <code>long d</code>, the least-significant byte 0x11 is stored at the lowest address 0x0004. If this is in a <code>Big Endian</code> computer, memory content would be <em>01 02 00 FF 44 33 22 11</em>.</p>\n<p>At the run time all computer processors must choose between these two Endians. The following is a shortlist of processor types with supported Endian modes:</p>\n<ul>\n<li>Pure <code>Big Endian</code>: Sun SPARC, Motorola 68000, Java Virtual Machine</li>\n<li>Bi-Endian running <code>Big Endian</code> mode: MIPS with IRIX, PA-RISC, most Power and PowerPC systems</li>\n<li>Bi-Endian running <code>Little Endian</code> mode: ARM, MIPS with Ultrix, most DEC Alpha, IA-64 with Linux</li>\n<li><code>Little Endian</code>: Intel x86, AMD64, DEC VAX</li>\n</ul>\n<p>How to detect the Endianess of local system in the program? The following function can be called for a quick check. If the return value is 1, it is <code>Little Endian</code>, else <code>Big Endian</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">test_endian</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *((<span class=\"keyword\">char</span> *)&amp;x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"network-order\">Network Order</h2>\n<p>Endianness is also important for computer communications. Imagine that when a <code>Little Endian</code> system communicates with a <code>Big Endian</code> system, the receiver and sender will interpret the data completely differently if not handled properly. For example, for the variable d in the C program segment above, the <code>Little Endian</code> sender sends <em>11 22 33 44</em> four bytes, which the <code>Big Endian</code> receiver converts to the value 0x11223344. This is very different from the original value. To solve this problem, the TCP/IP protocol specifies a special \"network byte order\" (referred to as \"network order\"), which means that regardless of the Endian supported by the computer system, the most-significant byte is always sent first while transmitting data. From the definition, we can see that the network order corresponds to the <code>Big Endian</code>.</p>\n<p>To avoid communication problems caused by Endianness and to facilitate software developers to write portable programs, some C preprocessing macros are defined for conversion between network bytes and local byte order. <code>htons()</code> and <code>htonl()</code> are used to convert local byte order to network byte order, the former works with 16-bit unsigned numbers and the latter for 32-bit unsigned numbers. <code>ntohs()</code> and <code>ntohl()</code> implement the conversion in the opposite direction. The prototype definitions of these four macros can be found as follows (available in the <code>netinet/in.h</code> file on Linux systems).</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(BIG_ENDIAN) &amp;&amp; !defined(LITTLE_ENDIAN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> htons(A)  (A)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> htonl(A)  (A)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ntohs(A)  (A)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ntohl(A)  (A)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(LITTLE_ENDIAN) &amp;&amp; !defined(BIG_ENDIAN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> htons(A)  ((((uint16)(A) &amp; 0xff00) &gt;&gt; 8) | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint16)(A) &amp; 0x00ff) &lt;&lt; 8))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> htonl(A)  ((((uint32)(A) &amp; 0xff000000) &gt;&gt; 24) | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint32)(A) &amp; 0x00ff0000) &gt;&gt; 8)  | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint32)(A) &amp; 0x0000ff00) &lt;&lt; 8)  | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint32)(A) &amp; 0x000000ff) &lt;&lt; 24))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ntohs     htons</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ntohl     htohl</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">error</span> <span class=\"meta-string\">&quot;Either BIG_ENDIAN or LITTLE_ENDIAN must be #defined, but not both.&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n","categories":["Study Notes"],"tags":["Computer Architecture","Computer Communications","System Programming","C/C++ Programming"]},{"title":"IPv4 and IPv6 Header Checksum Algorithm Explained","url":"/en/2021/12/26/IPv4-IPv6-checksum/","content":"<p>About the IP packet header checksum algorithm, simply put, it is 16-bit ones' complement of the ones' complement sum of all 16-bit words in the header. However, not many sources show exactly how this is done.<span id=\"more\"></span> The same checksum algorithm is used by TCP segment and UDP datagram, but the data involved in the checksum computing is different from that in the IP header. In addition, the checksum operation of the IPv6 packet is different from that of IPv4. Therefore, it is necessary to make a comprehensive analysis of the checksum algorithm of IP packets.</p>\n<div class=\"note success no-icon\"><p><strong>Nothing in life is to be feared, it is only to be understood.</strong><br> <strong>— <em>Marie Curie</em> (Polish and naturalized-French physicist and chemist, twice Nobel Prize winner)</strong></p>\n</div>\n<h2 id=\"ipv4-header-checksum\">IPv4 Header Checksum</h2>\n<p>IPv4 packet header format can be seen below</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3    </span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  </span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Version|  IHL  |Type of Service|          Total Length         |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|         Identification        |Flags|      Fragment Offset    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|  Time to Live |    Protocol   |        Header Checksum        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                       Source Address                          |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Destination Address                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Options                    |    Padding    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>Here the 16-bit Header Checksum field is used for error-checking of the IPv4 header. While computing the IPv4 header checksum, the sender first clears the checksum field to zero, then calculates the sum of each 16-bit value within the header. The sum is saved in a 32-bit value. If the total number of bytes is odd, the last byte is added separately.</p>\n<p>After all additions, the higher 16 bits saving the carry is added to the lower 16 bits. Repeat this till all higher 16 bits are zeros. Finally, the sender takes the ones' complement of the lower 16 bits of the result and writes it to the IP header checksum field.</p>\n<p>The following demonstrates the entire calculation process using actual captured IPv4 packets.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x0000: 00 60 47 41 11 c9 00 09 6b 7a 5b 3b 08 00 45 00 </span><br><span class=\"line\">0x0010: 00 1c 74 68 00 00 80 11 59 8f c0 a8 64 01 ab 46 </span><br><span class=\"line\">0x0020: 9c e9 0f 3a 04 05 00 08 7f c5 00 00 00 00 00 00 </span><br><span class=\"line\">0x0030: 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure>\n<p>At the beginning of the above 16-bit hex dump is the Ethernet frame header. The IP packet header starts from offset 0x000e, with the first byte 0x45 and the last byte 0xe9. Based on the previous description of the algorithm, we can make the following calculations:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(1) 0x4500 + 0x001c + 0x7468 + 0x0000 + 0x8011 +</span><br><span class=\"line\">    0x0000 + 0xc0a8 + 0x6401 + 0xab46 + 0x9ce9 = 0x3a66d</span><br><span class=\"line\">(2) 0xa66d + 0x3 = 0xa670</span><br><span class=\"line\">(3) 0xffff - 0xa670 = 0x598f</span><br></pre></td></tr></table></figure>\n<p>Notice at step (1) we replace the checksum field with <u>0x0000</u>. As can be seen, the calculated header checksum 0x598f is the same as the value in the captured packet. This calculating process is only used for the sender to generate the initial checksum. In practice, for the intermediate forwarding router and the final receiver, they can just sum up all header fields of the received IP packet by the same algorithm. If the result is <u>0xffff</u>, the checksum verification passes.</p>\n<h2 id=\"c-program-implementation\">C Program Implementation</h2>\n<p>How to program IPv4 header checksum computing? <a href=\"https://tools.ietf.org/html/rfc1071\">RFC 1071</a> (Computing the Internet Checksum) shows a reference \"C\" language implementation:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Compute Internet Checksum for &quot;count&quot; bytes</span></span><br><span class=\"line\"><span class=\"comment\">     * beginning at location &quot;addr&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>( count &gt; <span class=\"number\">1</span> )  &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* This is the inner loop */</span></span><br><span class=\"line\">        sum += * (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> *) addr++;</span><br><span class=\"line\">        count -= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  Add left-over byte, if any */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( count &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">        sum += * (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *) addr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  Fold 32-bit sum to 16 bits */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sum&gt;&gt;<span class=\"number\">16</span>)</span><br><span class=\"line\">        sum = (sum &amp; <span class=\"number\">0xffff</span>) + (sum &gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    checksum = ~sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In a real network connection, the source device can call the above code to generate the initial IPv4 header checksum. This checksum is then updated at each step of the routing hop because the router must decrement the Time To Live (TTL) field. <a href=\"https://tools.ietf.org/html/rfc1141\">RFC 1141</a> (Incremental Updating of the Internet Checksum) gives a reference implementation of fast checksum update：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">ipptr-&gt;ttl--;                  <span class=\"comment\">/* decrement ttl */</span></span><br><span class=\"line\">sum = ipptr-&gt;Checksum + <span class=\"number\">0x100</span>; <span class=\"comment\">/* increment checksum high byte*/</span></span><br><span class=\"line\">ipptr-&gt;Checksum = (sum + (sum&gt;&gt;<span class=\"number\">16</span>)); <span class=\"comment\">/* add carry */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"tcpudp-header-checksum\">TCP/UDP Header Checksum</h2>\n<p>For TCP segment and UDP datagram, both have 16-bit header checksum fields used for error-checking by the destination host. The checksum computing algorithm is the same as the IP header, except for the difference of covered data. Here the checksum is calculated over the whole TCP/UDP header and the payload, plus a pseudo-header that mimics the IPv4 header as shown below:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0      7 8     15 16    23 24    31 </span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|          source address           |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|        destination address        |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|  zero  |protocol| TCP/UDP length  |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br></pre></td></tr></table></figure>\n<p>It consists of the source and destination IP addresses, the protocol number (TCP:6/UDP:17), and the total length of the TCP/UDP header and payload (in bytes). The purpose of including the pseudo-header in the checksum computing is to confirm the packet reaches the expected destination and avoid IP spoofing attacks. Besides, for IPv4 UDP header checksum is optional, it carries all-zeros if unused.</p>\n<h2 id=\"ipv6-difference\">IPv6 Difference</h2>\n<p>IPv6 is IP protocol version 6, and its main design goal was to resolve the problem of IPv4 address exhaustion. Of course, it provides many benefits in other aspects. Although IPv6 usage is growing slowly, the trend is unstoppable. The latest IPv6 standard is published in <a href=\"https://tools.ietf.org/html/rfc8200\">RFC 8200</a>(Internet Protocol, Version 6 (IPv6) Specification).</p>\n<p>IPv6 packet header format can be seen below</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Version| Traffic Class |           Flow Label                  |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|         Payload Length        |  Next Header  |   Hop Limit   |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                         Source Address                        +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                      Destination Address                      +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>Notice that the IPv6 header does not include a checksum field, a significant difference from IPv4. The absence of a checksum in the IPv6 header furthers the end-to-end principle of Internet design, to simplify router processing and speed up the packet transmission. Protection for data integrity can be accomplished by error detection at the link layer or the higher-layer protocols between endpoints (such as TCP/UDP on the transport layer). This is why IPv6 forces the UDP layer to set the header checksum.</p>\n<p>For IPv6 TCP segment and UDP datagram header checksum computing, the pseudo-header that mimics the IPv6 header is shown below</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                         Source Address                        +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                      Destination Address                      +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                   Upper-Layer Packet Length                   |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                      zero                     |  Next Header  |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<h2 id=\"udp-lite-application\">UDP-Lite Application</h2>\n<p>In actual IPv6 network applications, UDP-Lite (Lightweight UDP) can be used to balance error detection and transmission efficiency. UDP-Lite has its own protocol number 136, and its standard is described in <a href=\"https://tools.ietf.org/html/rfc3828\">RFC 3828</a> (The Lightweight User Datagram Protocol (UDP-Lite)).</p>\n<p>Referring to the following header format, UDP-Lite uses the same set of <a href=\"https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml\">port number values assigned by the IANA</a> for use by UDP. But it redefines the Length field in the UDP header to a Checksum Coverage, which allows the application layer to control the length of checksummed data. This is useful for the application that can be tolerant of the potentially lossy transmission of the uncovered portion of the data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0              15 16             31</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|     Source      |   Destination   |</span><br><span class=\"line\">|      Port       |      Port       |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|    Checksum     |                 |</span><br><span class=\"line\">|    Coverage     |    Checksum     |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|                                   |</span><br><span class=\"line\">:              Payload              :</span><br><span class=\"line\">|                                   |</span><br><span class=\"line\">+-----------------------------------+</span><br></pre></td></tr></table></figure>\n<p>UDP-Lite protocol defines the values of \"Checksum Coverage\" (in bytes) as shown in the following table:</p>\n<table>\n<colgroup>\n<col style=\"width: 31%\" />\n<col style=\"width: 36%\" />\n<col style=\"width: 31%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Checksum Coverage</th>\n<th style=\"text-align: center;\">Coverage Area</th>\n<th style=\"text-align: center;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">entire UDP-Lites datagram</td>\n<td style=\"text-align: center;\">Calculation covers IP pseudo-header</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1-7</td>\n<td style=\"text-align: center;\">(invalid)</td>\n<td style=\"text-align: center;\">The receiver has to drop the datagram</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">8</td>\n<td style=\"text-align: center;\">UDP-Lites header</td>\n<td style=\"text-align: center;\">Calculation covers IP pseudo-header</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">&gt; 8</td>\n<td style=\"text-align: center;\">UDP-Lites header + portion of payload data</td>\n<td style=\"text-align: center;\">Calculation covers IP pseudo-header</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">&gt; IP datagram length</td>\n<td style=\"text-align: center;\">(invalid)</td>\n<td style=\"text-align: center;\">The receiver has to drop the datagram</td>\n</tr>\n</tbody>\n</table>\n<p>For multimedia applications running VoIP or streaming video data transmission protocols, it'd better receive data with some degree of corruption than not receiving any data at all. Another example is the <a href=\"https://tools.ietf.org/html/rfc5415\">CAPWAP</a> protocol used to connect Cisco wireless controller and access points. It specifies UDP-Lite as the default transport protocol for the CAPWAP Data channel, while the connection is established over the IPv6 network.</p>\n<p>At last, share a C program snippet to present how to initialize a Berkeley socket to establish an IPv6 UDP-Lite connection:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;net/udplite.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> udplite_conn = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDPLITE);</span><br><span class=\"line\"><span class=\"keyword\">int</span> val = <span class=\"number\">8</span>;    <span class=\"comment\">/* checksum only covers 8-byte UDP-Lite header */</span></span><br><span class=\"line\">(<span class=\"keyword\">void</span>)setsockopt(udplite_conn, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV, &amp;val, <span class=\"keyword\">sizeof</span> val);</span><br><span class=\"line\">(<span class=\"keyword\">void</span>)setsockopt(udplite_conn, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV, &amp;val, <span class=\"keyword\">sizeof</span> val);</span><br></pre></td></tr></table></figure>\n<p>Here <code>IPPROTO_UDPLITE</code> is protocol number 136, which is used together with <code>AF_INET6</code> address family parameter in <code>socket()</code> function call for IPv6 socket creation. The <code>UDPLITE_SEND_CSCOV</code>(10) and <code>UDPLITE_RECV_CSCOV</code>(11) are the control parameters of socket options configuration function <code>setsockopt()</code>, used for setting the Checksum Coverage value in the sender and the receiver respectively. Remember that both the sender and the receiver must set the same value, otherwise, the receiver will not be able to verify the checksum properly.</p>\n","categories":["Study Notes"],"tags":["C/C++ Programming","TCP/IP"]},{"title":"Implement Textbook RSA in Python","url":"/en/2022/01/22/Python-Textbook-RSA/","content":"<p>RSA encryption algorithm is one of the core technologies of modern public-key cryptography and is widely used on the Internet. As a classical algorithm of public-key cryptography, the programming implementation of textbook RSA can help us quickly grasp its mathematical mechanism and design ideas, and accumulate important experience in the software implementation of cryptography. Here is a detailed example of textbook RSA implementation in Python 3.8 programming environment.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>Random numbers should not be generated with a method chosen at random.</strong><br> <strong>— <em>Donald Knuth</em>（American computer scientist, mathematician, and professor emeritus at Stanford University, the 1974 recipient of the ACM Turing Award, often called the \"father of the analysis of algorithms\"）</strong></p>\n</div>\n<h3 id=\"generating-large-primes\">Generating Large Primes</h3>\n<p>The security of the RSA encryption algorithm is built on the mathematical challenge of factoring the product of two large prime numbers. The first step in constructing the RSA encryption system is to generate two large prime numbers <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span>, and calculate the modulus <span class=\"math inline\">\\(N=pq\\)</span>. <span class=\"math inline\">\\(N\\)</span> is the length of the RSA key, the larger the more secure. Nowadays, practical systems require the key length to be no less than 2048 bits, with corresponding <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> about 1024 bits each.</p>\n<p>A general effectiveness method for generating such large random prime numbers is a probability-based randomization algorithm, which proceeds as follows:</p>\n<ol type=\"1\">\n<li>Pre-select random numbers of given bit length</li>\n<li>Do a primality test with small prime numbers (<a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Eratosthenes</a>)\n<ul>\n<li>If it passes, continue to the third step</li>\n<li>If it fails, return to the first step</li>\n</ul></li>\n<li>Perform advanced prime test (<a href=\"https://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test\">Miller-Rabin algorithm</a>)\n<ul>\n<li>If it passes, output the presumed prime numbers</li>\n<li>If it fails, return to the first step</li>\n</ul></li>\n</ol>\n<p>In this software implementation, the first step can generate odd numbers directly. Also for demonstration purposes, the second step uses the first 50 prime numbers greater than 2 for the basic primality test. The whole process is shown in the following flowchart.</p>\n<p><img src=\"finding-prime-en.jpg\" style=\"width:40.0%;height:40.0%\" /></p>\n<p>For the first step, Python function programming requires importing the library function <code>randrange()</code> from the <code>random</code> library. The function uses the input number of bits n in the exponents of 2, which specify the start and end values of <code>randrange()</code>. It also sets the step size to 2 to ensure that only n-bit random odd values are returned.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> randrange</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generate_n_bit_odd</span>(<span class=\"params\">n: <span class=\"built_in\">int</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;Generate a random odd number in the range [2**(n-1)+1, 2**n-1]&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> n &gt; <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> randrange(<span class=\"number\">2</span> ** (n - <span class=\"number\">1</span>) + <span class=\"number\">1</span>, <span class=\"number\">2</span> ** n, <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>The code for the second step is simple. It defines an array with elements of 50 prime numbers after 2, then uses a double loop in the function to implement the basic primality test. The inner <code>for</code> loop runs the test with the elements of the prime array one by one. It aborts back to the outer loop immediately upon failure, from there it calls the function in the first step to generate the next candidate odd number and test again.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_lowlevel_prime</span>(<span class=\"params\">n</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Generate a prime candidate not divisible by first primes&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Obtain a random odd number</span></span><br><span class=\"line\">        c = generate_n_bit_odd(n)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># Test divisibility by pre-generated primes</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> divisor <span class=\"keyword\">in</span> first_50_primes:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> c % divisor == <span class=\"number\">0</span> <span class=\"keyword\">and</span> divisor ** <span class=\"number\">2</span> &lt;= c:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># The for loop did not encounter a break statement,</span></span><br><span class=\"line\">            <span class=\"comment\"># so it passes the low-level primality test.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> c</span><br></pre></td></tr></table></figure>\n<p>The Miller-Rabin primality test<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a> in the third step is a widely used method for testing prime numbers. It uses a probabilistic algorithm to determine whether a given number is a composite or possibly a prime number. Although also based on <a href=\"https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\">Fermat's little theorem</a>, the Miller-Rabin primality test is much more efficient than the Fermat primality test. Before showing the Python implementation of the Miller-Rabin prime test, a brief description of how it works is given here.</p>\n<p>By Fermat's little theorem, for a prime <span class=\"math inline\">\\(n\\)</span>, if the integer <span class=\"math inline\">\\(a\\)</span> is not a multiple of <span class=\"math inline\">\\(n\\)</span>, then we have <span class=\"math inline\">\\(a^{n-1}\\equiv 1\\pmod n\\)</span>. Therefore if <span class=\"math inline\">\\(n&gt;2\\)</span>, <span class=\"math inline\">\\(n-1\\)</span> is an even number and must be expressed in the form <span class=\"math inline\">\\(2^{s}*d\\)</span>, where both <span class=\"math inline\">\\(s\\)</span> and <span class=\"math inline\">\\(d\\)</span> are positive integers and <span class=\"math inline\">\\(d\\)</span> is odd. This yields <span class=\"math display\">\\[a^{2^{s}*d}\\equiv 1\\pmod n\\]</span> If we keep taking the square root of the left side of the above equation and then modulo it, we will always get <span class=\"math inline\">\\(1\\)</span> or <span class=\"math inline\">\\(-1\\)</span><a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a>. If we get <span class=\"math inline\">\\(1\\)</span>, it means that the following equation ② holds; if we never get <span class=\"math inline\">\\(1\\)</span>, then equation ① holds: <span class=\"math display\">\\[a^{d}\\equiv 1{\\pmod {n}}{\\text{ ①}}\\]</span> <span class=\"math display\">\\[a^{2^{r}d}\\equiv -1{\\pmod {n}}{\\text{ ②}}\\]</span> where <span class=\"math inline\">\\(r\\)</span> is some integer that lies in the interval <span class=\"math inline\">\\([0, s-1]\\)</span>. So, if <span class=\"math inline\">\\(n\\)</span> is a prime number greater than <span class=\"math inline\">\\(2\\)</span>, there must be either ① or ② that holds. The <u>conditional statement</u> of this law is also true, i.e.** if we can find a <span class=\"math inline\">\\(\\pmb{a}\\)</span> such that for any <span class=\"math inline\">\\(\\pmb{0\\leq r\\leq s-1}\\)</span> the following two equations are satisfied: <span class=\"math display\">\\[\\pmb{a^{d}\\not \\equiv 1\\pmod n}\\]</span> <span class=\"math display\">\\[\\pmb{a^{2^{r}d}\\not \\equiv -1\\pmod n}\\]</span> Then <span class=\"math inline\">\\(\\pmb{n}\\)</span> must not be a prime number**. This is the mathematical concept of the Miller-Rabin primality test. For the number <span class=\"math inline\">\\(n\\)</span> to be tested, after calculating the values of <span class=\"math inline\">\\(s\\)</span> and <span class=\"math inline\">\\(d\\)</span>, the base <span class=\"math inline\">\\(a\\)</span> is chosen randomly and the above two equations are tested iteratively. If neither holds, <span class=\"math inline\">\\(n\\)</span> is a composite number, otherwise, <span class=\"math inline\">\\(n\\)</span> may be a prime number. Repeating this process, the probability of <span class=\"math inline\">\\(n\\)</span> being a true prime gets larger and larger. Calculations show that after <span class=\"math inline\">\\(k\\)</span> rounds of testing, the maximum error rate of the Miller-Rabin primality test does not exceed <span class=\"math inline\">\\(4^{-k}\\)</span>.</p>\n<p>The Miller-Rabin primality test function implemented in Python is as follows, with the variables <code>n,s,d,k</code> in the code corresponding to the above description.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">miller_rabin_primality_check</span>(<span class=\"params\">n, k=<span class=\"number\">20</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;Miller-Rabin Primality Test with a specified round of test </span></span><br><span class=\"line\"><span class=\"string\">    Input:</span></span><br><span class=\"line\"><span class=\"string\">        n - n &gt; 3, an odd integer to be tested for primality</span></span><br><span class=\"line\"><span class=\"string\">        k - the number of rounds of testing to perform</span></span><br><span class=\"line\"><span class=\"string\">    Output:</span></span><br><span class=\"line\"><span class=\"string\">        True  - passed (n is a strong probable prime)</span></span><br><span class=\"line\"><span class=\"string\">        False - failed (n is a composite)&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># For a given odd integer n &gt; 3, write n as (2^s)*d+1,</span></span><br><span class=\"line\">    <span class=\"comment\"># where s and d are positive integers and d is odd.</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> n &gt; <span class=\"number\">3</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    s, d = <span class=\"number\">0</span>, n - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> d % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        d &gt;&gt;= <span class=\"number\">1</span></span><br><span class=\"line\">        s += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k):</span><br><span class=\"line\">        a = randrange(<span class=\"number\">2</span>, n - <span class=\"number\">1</span>)</span><br><span class=\"line\">        x = <span class=\"built_in\">pow</span>(a, d, n)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> x == <span class=\"number\">1</span> <span class=\"keyword\">or</span> x == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(s):</span><br><span class=\"line\">            x = <span class=\"built_in\">pow</span>(x, <span class=\"number\">2</span>, n)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x == n - <span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># The for loop did not encounter a break statement,</span></span><br><span class=\"line\">            <span class=\"comment\"># so it fails the test, it must be a composite</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Passed the test, it is a strong probable prime</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<p>Putting all of the above together, the whole process can be wrapped into the following function, where the input of the function is the number of bits and the output is a presumed random large prime number.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_random_prime</span>(<span class=\"params\">num_bits</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        pp = get_lowlevel_prime(num_bits)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> miller_rabin_primality_check(pp):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pp</span><br></pre></td></tr></table></figure>\n<h3 id=\"utility-functions\">Utility Functions</h3>\n<ol type=\"1\">\n<li><p><strong>Greatest Common Divisor (GCD) <code>gcd(a,b)</code> and Least Common Multiple <code>lcm(a,b)</code>:</strong><br />\nThe RSA encryption algorithm needs to calculate the Carmichael function <span class=\"math inline\">\\(\\lambda(N)\\)</span> of modulus <span class=\"math inline\">\\(N\\)</span>, with the formula <span class=\"math inline\">\\(\\lambda(pq)= \\operatorname{lcm}(p - 1, q - 1)\\)</span>, where the least common multiple function is used. The relationship between the least common multiple and the greatest common divisor is: <span class=\"math display\">\\[\\operatorname{lcm}(a,b)={\\frac{(a\\cdot b)}{\\gcd(a,b)}}\\]</span> There is an efficient Euclidean algorithm for finding the greatest common divisor, which is based on the principle that the greatest common divisor of two integers is equal to the greatest common divisor of the smaller number and the remainder of the division of the two numbers. The specific implementation of Euclid's algorithm can be done iteratively or recursively. The iterative implementation of the maximum convention function is applied here, and the Python code for the two functions is as follows:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gcd</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;&#x27;&#x27;Computes the Great Common Divisor using the Euclid&#x27;s algorithm&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> b:</span><br><span class=\"line\">        a, b = b, a % b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lcm</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Computes the Lowest Common Multiple using the GCD method.&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> a // gcd(a, b) * b</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>Extended Euclidean Algorithm <code>exgcd(a,b)</code> and Modular Multiplicative Inverse <code>invmod(e,m)</code>:</strong><br />\nThe RSA key pair satisfies the equation <span class=\"math inline\">\\((d⋅e)\\bmod \\lambda(N)=1\\)</span>, i.e., the two are mutually modular multiplicative inverses with respect to the modulus <span class=\"math inline\">\\(\\lambda(N)\\)</span>. The extended Euclidean algorithm can be applied to solve the modular multiplicative inverse <span class=\"math inline\">\\(d\\)</span> of the public key exponent <span class=\"math inline\">\\(e\\)</span> quickly. The principle of the algorithm is that given integers <span class=\"math inline\">\\(a,b\\)</span>, it is possible to find integers <span class=\"math inline\">\\(x,y\\)</span> (one of which is likely to be negative) while finding the greatest common divisor of <span class=\"math inline\">\\(a,b\\)</span> such that they satisfy Bézout's identity: <span class=\"math display\">\\[a⋅x+b⋅y=\\gcd(a, b)\\]</span> substituted into the parameters <span class=\"math inline\">\\(a=e\\)</span> and <span class=\"math inline\">\\(b=m=\\lambda(N)\\)</span> of the RSA encryption algorithm, and since <span class=\"math inline\">\\(e\\)</span> and <span class=\"math inline\">\\(\\lambda(N)\\)</span> are coprime, we can get: <span class=\"math display\">\\[e⋅x+m⋅y=1\\]</span> the solved <span class=\"math inline\">\\(x\\)</span> is the modulo multiplicative inverse <span class=\"math inline\">\\(d\\)</span> of <span class=\"math inline\">\\(e\\)</span>. The Python implementations of these two functions are given below:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exgcd</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Extended Euclidean Algorithm that can give back all gcd, s, t </span></span><br><span class=\"line\"><span class=\"string\">    such that they can make Bézout&#x27;s identity: gcd(a,b) = a*s + b*t</span></span><br><span class=\"line\"><span class=\"string\">    Return: (gcd, s, t) as tuple&quot;&quot;&quot;</span></span><br><span class=\"line\">    old_s, s = <span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">    old_t, t = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> b:</span><br><span class=\"line\">        q = a // b</span><br><span class=\"line\">        s, old_s = old_s - q * s, s</span><br><span class=\"line\">        t, old_t = old_t - q * t, t</span><br><span class=\"line\">        a, b = b, a % b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a, old_s, old_t</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">invmod</span>(<span class=\"params\">e, m</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Find out the modular multiplicative inverse x of the input integer</span></span><br><span class=\"line\"><span class=\"string\">    e with respect to the modulus m. Return the minimum positive x&quot;&quot;&quot;</span></span><br><span class=\"line\">    g, x, y = exgcd(e, m)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> g == <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Now we have e*x + m*y = g = 1, so e*x ≡ 1 (mod m).</span></span><br><span class=\"line\">    <span class=\"comment\"># The modular multiplicative inverse of e is x.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        x += m</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br></pre></td></tr></table></figure> Similarly, an iterative approach is applied here to implement the extended Euclidean algorithm, with the modular inverse multiplicative function calling the former.</p></li>\n</ol>\n<h3 id=\"implementing-rsa-class\">Implementing RSA Class</h3>\n<div class=\"note danger\"><p><strong>Note:</strong> Textbook RSA has inherent security vulnerabilities. The reference implementation in the Python language given here is for learning and demonstration purposes only, by no means to be used in actual applications. Otherwise, it may cause serious information security incidents. Keep this in mind!</p>\n</div>\n<p>Based on the object-oriented programming idea, it can be designed to encapsulate the RSA keys and all corresponding operations into a Python class. The decryption and signature generation of the RSA class are each implemented in two ways, regular and fast. The fast method is based on the <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\">Chinese Remainder Theorem</a> and Fermat's Little Theorem. The following describes the implementation details of the RSA class.</p>\n<ol type=\"1\">\n<li><p><strong>Object Initialization Method</strong><br />\nInitialization method <code>__init__()</code> has the user-defined paramaters with default values shown as below：</p>\n<ul>\n<li>Key bit-length (<span class=\"math inline\">\\(N\\)</span>)：2048</li>\n<li>Public exponent (<span class=\"math inline\">\\(e\\)</span>)：65537</li>\n<li>Fast decryption or signature generation：False</li>\n</ul>\n<p>This method internally calls the <code>get_random_prime()</code> function to generate two large random prime numbers <span class=\"math inline\">\\(p\\)</span> and <span class=\"math inline\">\\(q\\)</span> that are about half the bit-length of the key. It then calculates their Carmichael function and verifies that the result and <span class=\"math inline\">\\(e\\)</span> are coprime. If not, it repeats the process till found. Thereafter it computes the modulus <span class=\"math inline\">\\(N\\)</span> and uses the modular multiplicative inverse function <code>invmod()</code> to determine the private exponent <span class=\"math inline\">\\(d\\)</span>. If a fast decryption or signature generation function is required, three additional values are computed as follows: <span class=\"math display\">\\[\\begin{align}\nd_P&amp;=d\\bmod (p-1)\\\\\nd_Q&amp;=d\\bmod (q-1)\\\\\nq_{\\text{inv}}&amp;=q^{-1}\\pmod {p}\n\\end{align}\\]</span></p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">RSA_DEFAULT_EXPONENT = <span class=\"number\">65537</span></span><br><span class=\"line\">RSA_DEFAULT_MODULUS_LEN = <span class=\"number\">2048</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RSA</span>:</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Implements the RSA public key encryption/decryption with default</span></span><br><span class=\"line\"><span class=\"string\">    exponent 65537 and default key size 2048&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, key_length=RSA_DEFAULT_MODULUS_LEN,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                 exponent=RSA_DEFAULT_EXPONENT, fast_decrypt=<span class=\"literal\">False</span></span>):</span></span><br><span class=\"line\">        self.e = exponent</span><br><span class=\"line\">        self.fast = fast_decrypt</span><br><span class=\"line\">        t = <span class=\"number\">0</span></span><br><span class=\"line\">        p = q = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> gcd(self.e, t) != <span class=\"number\">1</span>:</span><br><span class=\"line\">            p = get_random_prime(key_length // <span class=\"number\">2</span>)</span><br><span class=\"line\">            q = get_random_prime(key_length // <span class=\"number\">2</span>)</span><br><span class=\"line\">            t = lcm(p - <span class=\"number\">1</span>, q - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.n = p * q</span><br><span class=\"line\">        self.d = invmod(self.e, t)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fast_decrypt):</span><br><span class=\"line\">            self.p, self.q = p, q</span><br><span class=\"line\">            self.d_P = self.d % (p - <span class=\"number\">1</span>)</span><br><span class=\"line\">            self.d_Q = self.d % (q - <span class=\"number\">1</span>)</span><br><span class=\"line\">            self.q_Inv = invmod(q, p)</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>Encryption and Decryption Methods</strong><br />\nRSA encryption and regular decryption formulas are <span class=\"math display\">\\[\\begin{align}\nc\\equiv m^e\\pmod N\\\\\nm\\equiv c^d\\pmod N\n\\end{align}\\]</span> Python built-in <code>pow()</code> function supports modular exponentiation. The above two can be achieved by simply doing the corresponding integer to byte sequence conversions and then calling pow() with the public or private key exponent:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span>(<span class=\"params\">self, binary_data: <span class=\"built_in\">bytes</span></span>):</span></span><br><span class=\"line\">    int_data = uint_from_bytes(binary_data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(int_data, self.e, self.n)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span>(<span class=\"params\">self, encrypted_int_data: <span class=\"built_in\">int</span></span>):</span></span><br><span class=\"line\">    int_data = <span class=\"built_in\">pow</span>(encrypted_int_data, self.d, self.n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uint_to_bytes(int_data)</span><br></pre></td></tr></table></figure> For fast descryption, a few extra steps are needed: <span class=\"math display\">\\[\\begin{align}\nm_1&amp;=c^{d_P}\\pmod {p}\\tag{1}\\label{eq1}\\\\\nm_2&amp;=c^{d_Q}\\pmod {q}\\tag{2}\\label{eq2}\\\\\nh&amp;=q_{\\text{inv}}(m_1-m_2)\\pmod {p}\\tag{3}\\label{eq3}\\\\\nm&amp;=m_{2}+hq\\pmod {pq}\\tag{4}\\label{eq4}\n\\end{align}\\]</span> In practice, if <span class=\"math inline\">\\(m_1-m_2&lt;0\\)</span> in the step <span class=\"math inline\">\\((3)\\)</span>, <span class=\"math inline\">\\(p\\)</span> needs to be added to adjust to a positive number. It can also be seen that the acceleration ratio would theoretically be close to <span class=\"math inline\">\\(4\\)</span> because the fast decryption method decreases the modulus and exponent by roughly half the order. Considering the additional computational steps, the actual speedup ratio estimate is subtracted by a correction <span class=\"math inline\">\\(\\varepsilon\\)</span>, noted as <span class=\"math inline\">\\(4-\\varepsilon\\)</span>. The code of the fast decryption function is as follows:</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt_fast</span>(<span class=\"params\">self, encrypted_int_data: <span class=\"built_in\">int</span></span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># Use Chinese Remaider Theorem + Fermat&#x27;s Little Theorem to</span></span><br><span class=\"line\">    <span class=\"comment\"># do fast RSA description</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> self.fast == <span class=\"literal\">True</span></span><br><span class=\"line\">    m1 = <span class=\"built_in\">pow</span>(encrypted_int_data, self.d_P, self.p)</span><br><span class=\"line\">    m2 = <span class=\"built_in\">pow</span>(encrypted_int_data, self.d_Q, self.q)</span><br><span class=\"line\">    t = m1 - m2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> t &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        t += self.p</span><br><span class=\"line\">    h = (self.q_Inv * t) % self.p</span><br><span class=\"line\">    m = (m2 + h * self.q) % self.n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uint_to_bytes(m)</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>Signature Generation and Verification Methods</strong><br />\nThe RSA digital signature generation and verification methods are very similar to encryption and regular decryption functions, except that the public and private exponents are used in reverse. The signature generation uses the private exponent, while the verification method uses the public key exponent. The implementation of fast signature generation is the same as the fast decryption steps, but the input and output data are converted and adjusted accordingly. The specific implementations are presented below：</p>\n<p><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generate_signature</span>(<span class=\"params\">self, encoded_msg_digest: <span class=\"built_in\">bytes</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Use RSA private key to generate Digital Signature for given</span></span><br><span class=\"line\"><span class=\"string\">    encoded message digest&quot;&quot;&quot;</span></span><br><span class=\"line\">    int_data = uint_from_bytes(encoded_msg_digest)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">pow</span>(int_data, self.d, self.n)</span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generate_signature_fast</span>(<span class=\"params\">self, encoded_msg_digest: <span class=\"built_in\">bytes</span></span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># Use Chinese Remaider Theorem + Fermat&#x27;s Little Theorem to</span></span><br><span class=\"line\">    <span class=\"comment\"># do fast RSA signature generation</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> self.fast == <span class=\"literal\">True</span></span><br><span class=\"line\">    int_data = uint_from_bytes(encoded_msg_digest)</span><br><span class=\"line\">    s1 = <span class=\"built_in\">pow</span>(int_data, self.d_P, self.p)</span><br><span class=\"line\">    s2 = <span class=\"built_in\">pow</span>(int_data, self.d_Q, self.q)</span><br><span class=\"line\">    t = s1 - s2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> t &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        t += self.p</span><br><span class=\"line\">    h = (self.q_Inv * t) % self.p</span><br><span class=\"line\">    s = (s2 + h * self.q) % self.n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">verify_signature</span>(<span class=\"params\">self, digital_signature: <span class=\"built_in\">int</span></span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Use RSA public key to decrypt given Digital Signature&quot;&quot;&quot;</span></span><br><span class=\"line\">    int_data = <span class=\"built_in\">pow</span>(digital_signature, self.e, self.n)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> uint_to_bytes(int_data)</span><br></pre></td></tr></table></figure></p></li>\n</ol>\n<h3 id=\"functional-tests\">Functional Tests</h3>\n<p>Once the RSA class is completed, it is ready for testing. To test the basic encryption and decryption functions, first initialize an RSA object with the following parameters</p>\n<ul>\n<li>Key length (modulo <span class=\"math inline\">\\(N\\)</span>): 512 bits</li>\n<li>Public exponent (<span class=\"math inline\">\\(e\\)</span>): 3</li>\n<li>Fast decryption or signature generation: True</li>\n</ul>\n<p>Next, we can call the encryption method <code>encrypt()</code> of the RSA object instance to encrypt the input message, and then feed the ciphertext to the decryption method <code>decrypt()</code> and the fast decryption method <code>decrypt_fast()</code> respectively. We use the <code>assert</code> statement to compare the result with the original message. The code snippet is as follows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ---- Test RSA class ----</span></span><br><span class=\"line\">alice = RSA(<span class=\"number\">512</span>, <span class=\"number\">3</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\">msg = <span class=\"string\">b&#x27;Textbook RSA in Python&#x27;</span></span><br><span class=\"line\">ctxt = alice.encrypt(msg)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> alice.decrypt(ctxt) == msg</span><br><span class=\"line\"><span class=\"keyword\">assert</span> alice.decrypt_fast(ctxt) == msg</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;RSA message encryption/decryption test passes!&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>Likewise, we can also test the signature methods. In this case, we need to add the following <code>import</code> statement to the beginning of the file</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> sha1</span><br></pre></td></tr></table></figure>\n<p>This allows us to generate the message digest with the library function <code>sha1()</code> and then call the <code>generate_signature()</code> and <code>generate_signature_fast()</code> methods of the RSA object instance to generate the signature, respectively. Both signatures are fed to the verify_signature()` function and the result should be consistent with the original message digest. This test code is shown below.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">mdg = sha1(msg).digest()</span><br><span class=\"line\">sign1 = alice.generate_signature(mdg)</span><br><span class=\"line\">sign2 = alice.generate_signature_fast(mdg)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> alice.verify_signature(sign1) == mdg</span><br><span class=\"line\"><span class=\"keyword\">assert</span> alice.verify_signature(sign2) == mdg</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;RSA signature generation/verification test passes!&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>If no <code>AssertionError</code> is seen, we would get the following output, indicating that both the encryption and signature tests passed.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">RSA message encryption/decryption <span class=\"built_in\">test</span> passes!</span><br><span class=\"line\">RSA signature generation/verification <span class=\"built_in\">test</span> passes!</span><br></pre></td></tr></table></figure>\n<h3 id=\"performance-tests\">Performance Tests</h3>\n<p>Once the functional tests are passed, it is time to see how the performance of fast decryption is. We are interested in what speedup ratio we can achieve, which requires timing the execution of the code. For time measurements in Python programming, we have to import the functions <code>urandom()</code> and <code>timeit()</code> from the Python built-in libraries <code>os</code> and <code>timeit</code>, respectively:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> os <span class=\"keyword\">import</span> urandom</span><br><span class=\"line\"><span class=\"keyword\">from</span> timeit <span class=\"keyword\">import</span> timeit</span><br></pre></td></tr></table></figure>\n<p><code>urandom()</code> is for generaring random bype sequence, while <code>timeit()</code> can time the execution of a given code segment. For the sake of convenience, the RSA decryption methods to be timed are first packed into two functions:</p>\n<ul>\n<li><code>decrypt_norm()</code> - Regular decryption method</li>\n<li><code>decrypt_fast()</code> - Fast descryption method</li>\n</ul>\n<p>Both use the <code>assert</code> statement to check the result, as shown in the code below:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt_norm</span>(<span class=\"params\">tester, ctxt: <span class=\"built_in\">bytes</span>, msg: <span class=\"built_in\">bytes</span></span>):</span></span><br><span class=\"line\">    ptxt = tester.decrypt(ctxt)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> ptxt == msg</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt_fast</span>(<span class=\"params\">tester, ctxt: <span class=\"built_in\">bytes</span>, msg: <span class=\"built_in\">bytes</span></span>):</span></span><br><span class=\"line\">    ptxt = tester.decrypt_fast(ctxt)</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> ptxt == msg</span><br></pre></td></tr></table></figure>\n<p>The time code sets up two nested <code>for</code> loops:</p>\n<ul>\n<li><p>The outer loop iterates over different key lengths <code>klen</code>, from 512 bits to 4096 bits in 5 levels, and the corresponding RSA object <code>obj</code> is initialized with:</p>\n<ul>\n<li>Key length (modular <span class=\"math inline\">\\(N\\)</span>): <code>klen</code></li>\n<li>Public exponent (<span class=\"math inline\">\\(e\\)</span>): 65537</li>\n<li>Fast decryption or signature generation: True</li>\n</ul>\n<p>The variable <code>rpt</code> is also set in the outer loop to be the square root of the key length, and the timing variables <code>t_n</code> and <code>t_f</code> are cleared to zeros.</p></li>\n<li><p>The inner layer also loops 5 times, each time executing the following operations:</p>\n<ul>\n<li>Call <code>urandom()</code> to generate a random sequence of bytes <code>mg</code> with bits half the length of the key</li>\n<li>Call <code>obj.encrypt()</code> to generate the ciphertext <code>ct</code></li>\n<li>call <code>timeit()</code> and enter the packing functions <code>decrypt_norm()</code> and <code>decrypt_fast()</code> with the decryption-related parameters <code>obj</code>, <code>ct</code> and <code>mg</code>, respectively, and set the number of executions to <code>rpt</code></li>\n<li>The return values of the <code>timeit()</code> function are stored cumulatively in <code>t_n</code> and <code>t_f</code></li>\n</ul></li>\n</ul>\n<p>At the end of each inner loop, the current key length, the mean value of the timing statistics, and the calculated speedup ratio <code>t_n/t_f</code> are printed. The actual program segment is printed below:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Start RSA fast decryption profiling...&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> klen <span class=\"keyword\">in</span> [<span class=\"number\">512</span>, <span class=\"number\">1024</span>, <span class=\"number\">2048</span>, <span class=\"number\">3072</span>, <span class=\"number\">4096</span>]:</span><br><span class=\"line\">    rpt = <span class=\"built_in\">int</span>(klen ** <span class=\"number\">0.5</span>)</span><br><span class=\"line\">    obj = RSA(klen, <span class=\"number\">65537</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\">    t_n = t_f = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        mg = urandom(<span class=\"built_in\">int</span>(klen/<span class=\"number\">16</span>))</span><br><span class=\"line\">        ct = obj.encrypt(mg)</span><br><span class=\"line\">        t_n += timeit(<span class=\"keyword\">lambda</span>: decrypt_norm(obj, ct, mg), number=rpt)</span><br><span class=\"line\">        t_f += timeit(<span class=\"keyword\">lambda</span>: decrypt_fast(obj, ct, mg), number=rpt)      </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Key size %4d =&gt; norm %.4fs, fast %.4fs\\tSpeedup: %.2f&quot;</span></span><br><span class=\"line\">          % (klen, t_n/<span class=\"number\">5</span>/rpt, t_f/<span class=\"number\">5</span>/rpt, t_n/t_f))</span><br></pre></td></tr></table></figure>\n<p>Here are the results on a Macbook Pro laptop:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Start RSA fast decryption profiling...</span><br><span class=\"line\">Key size  512 =&gt; norm 0.0008s, fast 0.0003s  Speedup: 2.43</span><br><span class=\"line\">Key size 1024 =&gt; norm 0.0043s, fast 0.0015s  Speedup: 2.88</span><br><span class=\"line\">Key size 2048 =&gt; norm 0.0273s, fast 0.0085s  Speedup: 3.19</span><br><span class=\"line\">Key size 3072 =&gt; norm 0.0835s, fast 0.0240s  Speedup: 3.48</span><br><span class=\"line\">Key size 4096 =&gt; norm 0.1919s, fast 0.0543s  Speedup: 3.53</span><br></pre></td></tr></table></figure>\n<p>The test results confirm the effectiveness of the fast decryption method. As the key length increases, the computational intensity gradually increases and the running timeshare of the core decryption operation becomes more prominent, so the speedup ratio grows correspondingly. However, the final speedup ratio tends to a stable value of about 3.5, which is consistent with the upper bound of the theoretical estimate (<span class=\"math inline\">\\(4-\\varepsilon\\)</span>).</p>\n<p>The Python code implementation of the textbook RSA helps reinforce the basic number theory knowledge we have learned and also benefits us with an in-depth understanding of the RSA encryption algorithm. On this basis, we can also extend to experiment some RSA elementary attack and defense techniques to further master this key technology of public-key cryptography. For the complete program click here to download: <a href=\"textbook-rsa.py.gz\">textbook-rsa.py.gz</a></p>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>Gary Lee Miller, a professor of computer science at Carnegie Mellon University, first proposed a deterministic algorithm based on the unproven generalized Riemann hypothesis. Later Professor Michael O. Rabin of the Hebrew University of Jerusalem, Israel, modified it to obtain an unconditional probabilistic algorithm.<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p>This is because it follows from <span class=\"math inline\">\\(x^2\\equiv 1\\pmod n\\)</span> that <span class=\"math inline\">\\((x-1)(x+1)=x^{2}-1\\equiv 0\\pmod n\\)</span>. Since <span class=\"math inline\">\\(n\\)</span> is a prime number, by <a href=\"https://en.wikipedia.org/wiki/Euclid%27s_lemma\">Euclid's Lemma</a>, it must divide either <span class=\"math inline\">\\(x- 1\\)</span> or <span class=\"math inline\">\\(x+1\\)</span>, so <span class=\"math inline\">\\(x\\bmod n\\)</span> must be <span class=\"math inline\">\\(1\\)</span> or <span class=\"math inline\">\\(-1\\)</span>.<a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","categories":["Technology Knowhow"],"tags":["Python Programming","Cryptography"]},{"title":"IPv6 Dynamic Address Allocation Mechanism Illustrated","url":"/en/2022/03/13/IPv6-Addressing/","content":"<p>IPv6 supports multiple addresses, making address assignments more flexible and convenient. Unlike IPv4, which relied solely on the DHCP protocol for address assignment, IPv6 incorporates a native <a href=\"https://tools.ietf.org/html/rfc4862\">Stateless Address AutoConfiguration</a> SLAAC) protocol. SLAAC can either work alone to provide IPv6 addresses to hosts, or it can work with <a href=\"https://tools.ietf.org/html/rfc8415\">DHCPv6</a> to generate new assignment schemes. Here is a comprehensive analysis of the dynamic address allocation mechanism for IPv6. <span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>Who the hell knew how much address space we needed?</strong><br> <strong>— <em>Vint Cerf</em> (American Internet pioneer and one of \"the fathers of the Internet\")</strong></p>\n</div>\n<h2 id=\"ipv6-address-overview\">IPv6 Address Overview</h2>\n<h3 id=\"address-formats\">Address Formats</h3>\n<p>The most significant difference between IPv6 and IPv4 is its large address space. IPv4 has 32 bits (4 bytes) and allows for approximately 4.29 (2<sup>32</sup>) billion addresses. IPv6, on the other hand, defines 128 bits (16 bytes) and supports approximately 340 x 10<sup>36</sup> addresses. This is a pretty impressive number, and there will be no address depletion for the foreseeable future. A typical IPv6 address can be divided into two parts. As shown in the figure below, the first 64 bits are used to represent the network, and the next 64 bits are used as the interface identifier. <img src=\"ipv6-addr-format.png\" /></p>\n<p>The interface identifier can be generated in several ways:</p>\n<ul>\n<li>Static manual setting</li>\n<li><a href=\"https://en.wikipedia.org/wiki/IPv6_address#Modified_EUI-64\">Converted from the interface's MAC address using the modified EUI-64 format</a></li>\n<li>Obtained from a DHCPv6 server</li>\n<li>Automatically established randomly or cryptographically</li>\n</ul>\n<p>IETF recommends a canonical textual representation format for ease of writing. It includes leading zeros suppression and compression of consecutive all-zero fields. With the network prefix length at the end, the above address can be shortened to 2001:db8:130f<strong>::</strong>7000:<strong>0</strong>:140b/<strong>64</strong>.</p>\n<h3 id=\"address-types\">Address Types</h3>\n<p><a href=\"https://tools.ietf.org/html/rfc4291\">RFC 4291</a> defines three types of addresses:</p>\n<ol type=\"1\">\n<li>Unicast: A network address corresponds to a single network node, point-to-point connection.</li>\n<li>Anycast: The target address corresponds to a group of receiving nodes, but only the \"nearest\" one receives.</li>\n<li>Multicast: The target address corresponds to a group of nodes that can receive replicated messages.</li>\n</ol>\n<p>Note that there are no broadcast addresses in IPv6, their function being superseded by multicast addresses. Anycast addresses are syntactically indistinguishable from unicast addresses and have very limited applications. A typical application for anycast is to set up a DNS root server to allow hosts to look up domain names in close proximity. For unicast and multicast addresses, they can be identified by different network prefixes:</p>\n<table style=\"width:100%;\">\n<colgroup>\n<col style=\"width: 25%\" />\n<col style=\"width: 25%\" />\n<col style=\"width: 25%\" />\n<col style=\"width: 22%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Address Type</th>\n<th style=\"text-align: left;\">Binary Form</th>\n<th style=\"text-align: left;\">Hexadecimal Form</th>\n<th style=\"text-align: left;\">Application</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Link-local address (unicast)</td>\n<td style=\"text-align: left;\">1111 1110 10</td>\n<td style=\"text-align: left;\">fe80::/10</td>\n<td style=\"text-align: left;\">Use on a single link, non-routable</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Unique local address (unicast)</td>\n<td style=\"text-align: left;\">1111 1101</td>\n<td style=\"text-align: left;\">fd00::/8</td>\n<td style=\"text-align: left;\">Analogous to IPv4 private network addressing</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">Global unicast address</td>\n<td style=\"text-align: left;\">001</td>\n<td style=\"text-align: left;\">2000::/3</td>\n<td style=\"text-align: left;\">Internet communications</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">Multicast address</td>\n<td style=\"text-align: left;\">1111 1111</td>\n<td style=\"text-align: left;\">ff00::/8</td>\n<td style=\"text-align: left;\">Group communications, video streaming</td>\n</tr>\n</tbody>\n</table>\n<p>Each interface of a host must have a link-local address. Additionally, it can be manually or dynamically autoconfigured to obtain a unique local address and a global unicast address. Thus, IPv6 interfaces naturally have multiple unicast addresses. Unique local addresses are managed by the local network administrator, while the global unicast addresses are allocated by the IANA-designated regional registry. Referring to the following diagram, all current global unicast addresses are assigned from the 2000::/3 address block, with the first 48 bits of the address identifying the service provider's global routing network and the next 16 bits identifying the enterprise or campus internal subnet: <img src=\"ipv6-addr-alloc.png\" /> Because an IPv6 multicast address can only be used as a destination address, its bit definition is different from that of unicast. Referring to RFC 4291, a multicast address containing 4 bits of the feature flags, 4 bits of the group scope, and the last 112 bits of the group identifier: <img src=\"ipv6-multicast-addr.png\" /> Furthermore the same protocol specifies a few <a href=\"https://tools.ietf.org/html/rfc4291#page-15\">pre-defined IPv6 multicast addresses</a>, the most important of which are</p>\n<ul>\n<li>All Nodes Addresses on the local link — ff02::1</li>\n<li>All Routers Addresses on the local link — ff02::2</li>\n<li>Solicited-Node Address on local link — ff02::1:ffxx:xxxx</li>\n</ul>\n<h2 id=\"dynamic-allocation-schemes\">Dynamic Allocation Schemes</h2>\n<h3 id=\"ndp-protocol\">NDP Protocol</h3>\n<p>IPv6 dynamic address assignment depends on <a href=\"https://tools.ietf.org/html/rfc4861\">Neighbor Discovery Protocol</a> (NDP). NDP acts at the data link layer and is responsible for discovering other nodes and corresponding IPv6 addresses on the link and determining available routes and maintaining information reachability to other active nodes. It provides the IPv6 network with the equivalent of the Address Resolution Protocol (ARP) and ICMP router discovery and redirection protocols in IPv4 networks. However, NDP adds many improvements and new features. NDP defines five <a href=\"https://tools.ietf.org/html/rfc4443\">ICMPv6</a> message types:</p>\n<ol type=\"1\">\n<li>Router Solicitation (RS)</li>\n<li>Router Advertisement (RA)</li>\n<li>Neighbor Solicitation (NS)</li>\n<li>Neighbor Advertisement (NA)</li>\n<li>Redirect</li>\n</ol>\n<p>The first two message types here, RS and RA, are the keys to implementing dynamic IPv6 address assignment. The host sends an RS message to the multicast address ff02::2 of all routers in the local network segment to request routing information. When the router receives the RS from the network node, it sends an immediate RA in response. The message format of the RA is as follows</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0                   1                   2                   3</span><br><span class=\"line\"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|     Type      |     Code      |          Checksum             |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">| Cur Hop Limit |M|O|  Reserved |       Router Lifetime         |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                         Reachable Time                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                          Retrans Timer                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|   Options ...</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-</span><br></pre></td></tr></table></figure>\n<p>It defines two special bits, M and O, with the following meaning:</p>\n<ul>\n<li>M — \"Managed address configuration\" flag, set to 1 when the address is obtained from DHCPv6.</li>\n<li>O — \"Other configuration\" flag, set to 1 to indicate that other configuration information is available via DHCPv6</li>\n</ul>\n<p>The RA message ends with the Options section, which originally had three possible options: Source Link-Layer Address, MTU, and Prefix Information. Later, <a href=\"https://tools.ietf.org/html/rfc8106\">RFC 8106</a> (which replaced RFC 6106) added the Recursive DNS Server (RDNSS) and DNS Search List (DNSSL) options. The Prefix Information option directly provide hosts with on-link prefixes and prefixes for Address Autoconfiguration, and it has the following format</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0                   1                   2                   3</span><br><span class=\"line\"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|     Type      |    Length     | Prefix Length |L|A| Reserved1 |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                         Valid Lifetime                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                       Preferred Lifetime                      |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                           Reserved2                           |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                            Prefix                             +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>Here the Prefix Length and the Prefix jointly determine the network prefix of the IPv6 address. In addition, the Prefix Information option also defines two special bits, L and A:</p>\n<ul>\n<li>L — on-link flag. When set, indicates that this prefix can be used for on-link determination.</li>\n<li>A — autonomous address-configuration flag. When set, indicates that this prefix can be used for SLAAC.</li>\n</ul>\n<p>Similar to the IPv4 subnet mask feature, the purpose of the \"on-link\" determination is to allow the host to determine which networks an interface can access. By default, the host only considers the network where the link-local address is located as \"on-link\". If the \"on-link\" status of a destination address cannot be determined, the host forwards the IPv6 datagram to the default gateway (or default router) by default. When the host receives an RA message, if the \"on-link\" flag for a prefix information option is set to 1 and the Valid Lifetime is also a non-zero value, the host creates a new prefix network entry for it in the prefix list. All unexpired prefix network entries are \"on-link\".</p>\n<h3 id=\"message-sequence\">Message Sequence</h3>\n<p>After understanding the NDP protocol and the information conveyed by the RA messages, let's see how they guide the network nodes to achieve dynamic address assignment.</p>\n<p>Routers in the network periodically send RA messages to the multicast addresses (ff02::1) of all nodes in the local subnet. However, to avoid latency, the host sends one or more RS messages to all routers in the local subnet as soon as it has finished booting. The protocol requires the routers to respond to the RA messages within 0.5 seconds. Then, based on the values of the M/O/A bits in the received RA messages, the host decides how to dynamically configure the unique local and global unicast addresses of the interface and how to obtain other configuration information. With certain combinations of bit fetch values, the host needs to run DHCPv6 client software to connect to the server to obtain address assignment and/or other configuration information. The entire process is shown in the following message sequence diagram.</p>\n<pre class=\"mermaid\">\nsequenceDiagram\n\nparticipant R as Router\nparticipant H as Host\nparticipant S as DHCPv6 Server\nNote over R,H: Router Request\nrect rgb(239, 252, 202)\nH-&gt;&gt;R: Router Solicitation\nR--&gt;&gt;H: Router Advertisement\nend\nNote over H,S: Address Request\nrect rgb(230, 250, 255)\nH-&gt;&gt;S: DHCPv6 Solicit\nS--&gt;&gt;H: DHCPv6 Advertise\nH-&gt;&gt;S: DHCPv6 Request\nS--&gt;&gt;H: DHCPv6 Reply\nend\nNote over H,S: Other Information Request\nrect rgb(230, 250, 255)\nH-&gt;&gt;S: DHCPv6 Information-request\nS--&gt;&gt;H: DHCPv6 Reply\nend\n\n</pre>\n<div class=\"note warning\"><p><strong>Note:</strong> Unlike the IPv4 DHCP protocol, DHCPv6 clients use UDP port 546 and servers use UDP port 547.</p>\n</div>\n<p>Next explain in detail three dynamic allocation schemes determined by the combination of the M/O/A-bit values:</p>\n<ul>\n<li>SLAAC</li>\n<li>SLAAC + Stateless DHCPv6</li>\n<li>Stateful DHCPv6</li>\n</ul>\n<h3 id=\"slaac\">SLAAC</h3>\n<p>SLAAC is the simplest automatic IPv6 address assignment scheme and does not require any server. It works by sending an RS message request after the host starts up and the router sends back RA messages to all nodes in the local network segment. If the RA message contains the following configuration</p>\n<ul>\n<li><strong><mark>M-bit and O-bit all clear</mark> in the message header</strong></li>\n<li><strong><mark>L-bit and A-bit all set</mark> in Prefix Information option</strong></li>\n</ul>\n<p>Then the host receives this RA message and performs the following operations to implement SLAAC:</p>\n<ol type=\"1\">\n<li>Combine the network prefix with the local interface identifier to generate a unique local address or global unicast address.</li>\n<li>Install the default gateway (or default route) to point to the router address (source address of the RA message).</li>\n<li>Set this interface as the \"on-link\" corresponding to the network prefix, which is also the next-hop interface of the default gateway above.</li>\n<li>If the RDNSS and/or DNSSL options are included, install the name servers and domain name suffixes.</li>\n</ol>\n<p>This way, the host gets one or more IPv6 unique local addresses or global unicast addresses, plus the default gateway and domain name service information to complete various Internet connections.</p>\n<p>The following is an example of the SLAAC configuration on a Cisco Catalyst 9300 Multilayer Access Switch:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipv6 unicast-routing</span><br><span class=\"line\">interface Vlan10</span><br><span class=\"line\">    ipv6 enable</span><br><span class=\"line\">    ipv6 address 2001:ABCD:1000::1/64</span><br><span class=\"line\">    ipv6 nd ra dns server 2001:4860:4860::8888 infinite</span><br><span class=\"line\">    ipv6 nd ra dns search-list example.com</span><br></pre></td></tr></table></figure>\n<p>The Layer 3 interface of the Cisco Multilayer Switch provides routing functionality. As you can see, when IPv6 is activated on the Layer 3 interface in VLAN 10, its default address auto-assignment scheme is SLAAC. the control bits of RA messages from this interface are all set according to the SLAAC scheme, and the network prefixes for each IPv6 address it configures are automatically added to the RA prefix information options list. Of course, the network administrator can also exclude certain network prefixes with a separate interface configuration command. The last two lines of the example configuration command specify RDNSS and DNSSL, which are also added to the RA message options.</p>\n<p>If a host connects to a port in VLAN 10, it immediately gets a global unicast address with the network prefix of 2001:ABCD:1000::/64, and its default gateway address is set to 2001:ABCD:1000::1. Open a browser and enter a URL, and it will send a message to the specified domain name server 2001:4860:4860::8888 (Google's public name server address) to obtain the IPv6 address of the destination URL to establish a connection.</p>\n<h3 id=\"slaac-stateless-dhcpv6\">SLAAC + Stateless DHCPv6</h3>\n<p>SLAAC automatic address assignment is fast and easy, providing a plug-and-play IPv6 deployment solution for small and medium-sized network deployments. However, if a network node needs access to additional configuration information, such as NTP/SNTP server, TFTP server, and SIP server addresses, or if its functionality relies on certain Vendor-specific Information Options, it must choose <u>SLAAC + stateless DHCPv6</u> scheme.</p>\n<p>This scenario still uses SLAAC automatic address assignment, but the router instructs the host to connect to a DHCPv6 server for additional configuration information. At this point, the RA message sent back by the router has</p>\n<ul>\n<li><strong><mark>M-bit clear and O-bit set</mark> in the message header</strong></li>\n<li><strong><mark>L-bit and A-bit all set</mark> in Prefix Information option</strong></li>\n</ul>\n<p>After receiving this RA message, the host performs the following actions:</p>\n<ol type=\"1\">\n<li>Combine the network prefix with the local interface identifier to generate a unique local address or global unicast address.</li>\n<li>Install a default gateway (or default route) pointing to the router address (source address of the RA message).</li>\n<li>Set this interface as the \"on-link\" corresponding to the network prefix, which is also the next-hop interface of the default gateway above.</li>\n<li>If the RDNSS and/or DNSSL options are included, install the name servers and domain name suffixes.</li>\n<li><mark>Start the DHCPv6 client and connect to the DHCPv6 server to request additional configuration information</mark>.</li>\n<li><mark>Save the additional configuration information replied by the DHCPv6 server</mark>.</li>\n</ol>\n<p>As you can see, <u>SLAAC + stateless DHCPv6</u> is not different from SLAAC in terms of address assignment. DHCPv6 only provides additional configuration information and does not assign IPv6 addresses. So the DHCPv6 server does not track the address assignment status of network nodes, which is what \"stateless\" means.</p>\n<p>The corresponding configuration commands on the Catalyst 9300 switch are as follows.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipv6 unicast-routing</span><br><span class=\"line\">ipv6 dhcp pool vlan-10-clients</span><br><span class=\"line\">    dns-server 2001:4860:4860::8888</span><br><span class=\"line\">    domain-name example.com</span><br><span class=\"line\">    sntp address 2001:DB8:2000:2000::33</span><br><span class=\"line\">interface Vlan10</span><br><span class=\"line\">    ipv6 enable</span><br><span class=\"line\">    ipv6 address 2001:ABCD:1000::1/64</span><br><span class=\"line\">    ipv6 nd other-config-flag</span><br><span class=\"line\">    ipv6 dhcp server vlan-10-clients</span><br><span class=\"line\">    # ipv6 dhcp relay destination 2001:9:6:40::1</span><br></pre></td></tr></table></figure>\n<p>The difference with the SLAAC example is that the VLAN 10 interface configuration command <code>ipv6 nd other-config-flag</code> explicitly specifies to set the O-bit of the RA message. Its next command, <code>ipv6 dhcp server vlan-10-clients</code>, activates the DHCPv6 server response feature of the interface, corresponding to the server's pool name of <code>vlan-10-clients</code>. The DHCPv6 server is configured above the interface configuration, starting at <code>ipv6 dhcp pool vlan-10-clients</code>, and contains the DNS server address, DNS domain name, and SNTP server address.</p>\n<p>If you are using a separate DHCPv6 server located on a network segment, you can remove the <code>ipv6 dhcp server</code> command and enable the <code>ipv6 dhcp relay destination</code> command on the next line of the example to specify the address to forward DHCPv6 requests to the external server.</p>\n<h3 id=\"stateful-dhcpv6\">Stateful DHCPv6</h3>\n<p>Many large enterprises use DHCP to manage the IPv4 addresses of their devices, so deploying DHCPv6 to centrally assign and manage IPv6 addresses is a natural preference. This is where <u>Stateful DHCPv6</u> comes into play. This scenario also requires RA messages sent by the router but does not rely solely on network prefixes for automatic address assignment. The control bits of the RA messages are configured to</p>\n<ul>\n<li><strong><mark>M-bit set</mark> in the message header, O-bit does not matter</strong></li>\n<li><strong>L-bit and A-bit can be set or clear as desired in Prefix Information option</strong></li>\n</ul>\n<p>Upon receiving this RA message, the host performs the following actions:</p>\n<ol type=\"1\">\n<li>Generate a unique local address or a global unicast address if there is a Prefix Information option with the A-bit set.</li>\n<li>Install a default gateway (or default route) pointing to the router address (source address of the RA message).</li>\n<li>If there is a Prefix Information option with the L-bit set, set this interface to \"on-link\" with the corresponding network prefix.</li>\n<li>If the RDNSS and/or DNSSL options are included, install the name servers and domain suffixes.</li>\n<li><mark>Start the DHCPv6 client and connect to the server to request addresses and other configuration information</mark>.</li>\n<li><mark>Set the address assigned by the DHCPv6 server to this interface</mark>.</li>\n<li><mark>Save additional configuration information from the DHCPv6 server response</mark>.</li>\n</ol>\n<p>An example of the <u>Stateful DHCPv6</u> configuration command on a Catalyst 9300 switch is as follows.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ipv6 unicast-routing</span><br><span class=\"line\">ipv6 dhcp pool vlan-10-clients</span><br><span class=\"line\">    address prefix FD09:9:5:90::/64</span><br><span class=\"line\">    address prefix 2001:9:5:90::/64</span><br><span class=\"line\">    dns-server 2001:9:5:90::115</span><br><span class=\"line\">    domain-name test.com</span><br><span class=\"line\">interface Vlan10</span><br><span class=\"line\">    ipv6 enable</span><br><span class=\"line\">    ipv6 address 2001:ABCD:1:1::1/64</span><br><span class=\"line\">    ipv6 nd prefix 2001:ABCD:1:1::/64 no-advertise</span><br><span class=\"line\">    ipv6 nd managed-config-flag</span><br><span class=\"line\">    ipv6 dhcp server vlan-10-clients</span><br></pre></td></tr></table></figure>\n<p>Compared to <u>SLAAC + Stateless DHCPv6</u>, the interface configuration here removes the <code>ipv6 nd other-config-flag</code> and replaces it with the <code>ipv6 nd managed-config-flag</code> command. This corresponds to setting the M-bit of the RA message header. The DHCPv6 server configuration adds two <code>address prefix</code> commands to set the network prefix. Also, the <code>ipv6 nd prefix 2001:ABCD:1:1::/64 no-advertise</code> configured for the interface specifies that the router does not include the 2001:ABCD:1:1::/64 prefix information option into the RA. So, this example host interface will not generate SLAAC addresses, but only two addresses from DHPCv6: a unique local address with the network prefix FD09:9:5:90::/64, and a global unicast address with the network prefix 2001:9:5:90::/64. The interface identifier for each of these two addresses is also specified by DHPCv6.</p>\n<p>How to distinguish the source of dynamically assigned addresses for host interfaces? The method is simple. One thing to remember is that DHPCv6 does not send the network prefix length to the requestor, so the network prefix length of the addresses received from DHPCv6 is 128, while the network prefix length of the addresses generated by SLAAC will not be 128. See the following example of the wired0 interface on a Linux host:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ifconfig wired0</span><br><span class=\"line\">wired0    Link encap:Ethernet  HWaddr A0:EC:F9:6C:D9:30  </span><br><span class=\"line\">          inet6 addr: 2001:20::53c7:1364:a4d8:fd91/128 Scope:Global</span><br><span class=\"line\">          inet6 addr: 2001:20::a2ec:f9ff:fe6c:d930/64 Scope:Global</span><br><span class=\"line\">          inet6 addr: fe80::a2ec:f9ff:fe6c:d930/64 Scope:Link</span><br><span class=\"line\">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class=\"line\">          RX packets:510 errors:0 dropped:0 overruns:0 frame:0</span><br><span class=\"line\">          TX packets:1213 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class=\"line\">          collisions:0 txqueuelen:0 </span><br><span class=\"line\">          RX bytes:93670 (91.4 KiB)  TX bytes:271979 (265.6 KiB)</span><br></pre></td></tr></table></figure>\n<p>We can immediately determine that the interface is using <u>Stateful DHCPv6</u> address assignment, but also generates the SLAAC address with the same network prefix 2001:20::/64 received.</p>\n<ul>\n<li>2001:20::53c7:1364:a4d8:fd91/128 — DHCPv6 address, random interface identifer</li>\n<li>2001:20::a2ec:f9ff:fe6c:d930/64 — SLAAC addeess, interface identifer is MAC in EUI-64 format</li>\n<li>fe80::a2ec:f9ff:fe6c:d930/64 — Link-local address, interface identifer is MAC in EUI-64 format</li>\n</ul>\n<div class=\"note warning\"><p><strong>Note:</strong> DHPCv6 server also does not provide any IPv6 default gateway information. The host needs to be informed of the dynamic default gateway from the RA message.</p>\n</div>\n<h3 id=\"summary-and-comparison\">Summary and Comparison</h3>\n<p>The following table shows the control bit combinations of RA messages concerning different address allocation and other configuration acquisition methods.</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">M-bit</th>\n<th style=\"text-align: center;\">O-bit</th>\n<th style=\"text-align: center;\">A-bit</th>\n<th style=\"text-align: center;\">Host Address</th>\n<th style=\"text-align: center;\">Other Configuration</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">Static Settings</td>\n<td style=\"text-align: center;\">Manual Configuration</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Prefix specified by RA, automatically generated</td>\n<td style=\"text-align: center;\">manually configured</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">Static Settings</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Prefix specified by RA, automatically generated</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">Stateful DHCPv6</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Stateful DHCPv6 and/or automatically generated</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">Stateful DHCPv6</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">1</td>\n<td style=\"text-align: center;\">Stateful DHCPv6 and/or automatically generated</td>\n<td style=\"text-align: center;\">DHCPv6</td>\n</tr>\n</tbody>\n</table>\n<p>Summarize three dynamic allocation schemes:</p>\n<table>\n<colgroup>\n<col style=\"width: 34%\" />\n<col style=\"width: 34%\" />\n<col style=\"width: 30%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Allocation Scheme</th>\n<th style=\"text-align: center;\">Features</th>\n<th style=\"text-align: center;\">Appiccation Scenarios</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">SLAAC</td>\n<td style=\"text-align: center;\">Simple and practical, fast deployment</td>\n<td style=\"text-align: center;\">SMB, Consumer Product Networking, Internet of Things (IoT)</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">SLAAC + Stateless DHCPv6</td>\n<td style=\"text-align: center;\">Auto Configuration, Extended Services</td>\n<td style=\"text-align: center;\">SMBs need additional network services</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Stateful DHCPv6</td>\n<td style=\"text-align: center;\">Centralized management and control</td>\n<td style=\"text-align: center;\">Large enterprises, institutions, and campus networks</td>\n</tr>\n</tbody>\n</table>\n<div class=\"note warning\"><p><strong>Note:</strong> Since IPv6 network interfaces can have multiple addresses (a link-local address, plus one or more unique local addresses and/or global unicast addresses), it becomes important how the source address is selected when establishing an external connection. <a href=\"https://tools.ietf.org/html/rfc6724\">RFC 6724</a> gives detailed IPv6 source address selection rules. In the development of embedded systems, the control plane and the data plane connected to the same remote device are often implemented by different functional components. For example, the control plane directly calls a Linux userspace socket to establish the connection, and the IPv6 source address used for the connection is selected by the TCP/IP stack, while the data plane directly implements data encapsulation processing and transmission in kernel space. In this case, the IPv6 source address selected by the control plane has to be synchronized to the data plane in time, otherwise, the user data might not be delivered to the same destination.</p>\n</div>\n<h2 id=\"troubleshooting-guide\">Troubleshooting Guide</h2>\n<p>The common IPv6 dynamic address assignment debugging and troubleshooting commands on Cisco routers and switches are listed in the following table.</p>\n<table>\n<colgroup>\n<col style=\"width: 50%\" />\n<col style=\"width: 50%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Command</th>\n<th style=\"text-align: left;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\"><code>show ipv6 interface brief</code></td>\n<td style=\"text-align: left;\">Displays a short summary of IPv6 status and configuration for each interface</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"><code>show ipv6 interface [type] [num]</code></td>\n<td style=\"text-align: left;\">Displays IPv6 and NDP usability status information for single interface</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\"><code>show ipv6 interface [type] [num] prefix</code></td>\n<td style=\"text-align: left;\">Displays IPv6 network prefix information for single interface</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"><code>show ipv6 dhcp pool</code></td>\n<td style=\"text-align: left;\">Display DHCPv6 configuration pool information</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\"><code>show ipv6 dhcp binding</code></td>\n<td style=\"text-align: left;\">Displays all automatic client bindings from the DHCPv6 server binding table</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"><code>show ipv6 dhcp interface [type] [num]</code></td>\n<td style=\"text-align: left;\">Display DHCPv6 interface information</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\"><code>debug ipv6 nd</code></td>\n<td style=\"text-align: left;\">Debug IPv6 NDP protocol</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\"><code>debug ipv6 dhcp</code></td>\n<td style=\"text-align: left;\">Debug DHCPv6 server</td>\n</tr>\n</tbody>\n</table>\n<p>The following console NDP protocol debug log shows that the router received an RS message from host FE80::5850:6D61:1FB:EF3A and responded with an RA message to the multicast address FF02::1 of all nodes in this network:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Router# debug ipv6 nd</span><br><span class=\"line\">  ICMP Neighbor Discovery events debugging is on</span><br><span class=\"line\">Router# show logging | include RS</span><br><span class=\"line\">  ICMPv6-ND: Received RS on GigabitEthernet0/0/0 from FE80::5850:6D61:1FB:EF3A</span><br><span class=\"line\">Router# show logging | include RA</span><br><span class=\"line\"> ICMPv6-ND: Sending solicited RA on GigabitEthernet0/0/0</span><br><span class=\"line\"> ICMPv6-ND: Request to send RA for FE80::C801:EFFF:FE5A:8</span><br><span class=\"line\"> ICMPv6-ND: Setup RA from FE80::C801:EFFF:FE5A:8 to FF02::1 on GigabitEthernet0/0/0</span><br></pre></td></tr></table></figure>\n<p>And the next log shows an example of <u>Stateless DHCPv6</u> observed after entering the <code>debug ipv6 dhcp</code> debug command. Host FE80::5850:6D61:1FB:EF3A sends an INFORMATION-REQUEST message to the DHCPv6 server, which selects the source address FE80::C801:B9FF:FEF0:8 and sends a response message.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Router#debug ipv6 dhcp</span><br><span class=\"line\">   IPv6 DHCP debugging is on</span><br><span class=\"line\"></span><br><span class=\"line\">IPv6 DHCP: Received INFORMATION-REQUEST from FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br><span class=\"line\">IPv6 DHCP: Option VENDOR-CLASS(16) is not processed</span><br><span class=\"line\">IPv6 DHCP: Using interface pool LAN_POOL</span><br><span class=\"line\">IPv6 DHCP: Source Address from SAS FE80::C801:B9FF:FEF0:8</span><br><span class=\"line\">IPv6 DHCP: Sending REPLY to FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br></pre></td></tr></table></figure>\n<p>The following debug log of <u>Stateful DHCPv6</u> shows the complete process of two message exchanges (SOLICIT/ADVERTISE, REQUEST/REPLY) on lines 1, 15, 16, and 26.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">IPv6 DHCP: Received SOLICIT from FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br><span class=\"line\">IPv6 DHCP: Option UNKNOWN(39) is not processed</span><br><span class=\"line\">IPv6 DHCP: Option VENDOR-CLASS(16) is not processed</span><br><span class=\"line\">IPv6 DHCP: Using interface pool LAN_POOL</span><br><span class=\"line\">IPv6 DHCP: Creating binding for FE80::5850:6D61:1FB:EF3A in pool LAN_POOL</span><br><span class=\"line\">IPv6 DHCP: Binding for IA_NA 0E000C29 not found</span><br><span class=\"line\">IPv6 DHCP: Allocating IA_NA 0E000C29 in binding for FE80::5850:6D61:1FB:EF3A</span><br><span class=\"line\">IPv6 DHCP: Looking up pool 2001:ABCD::/64 entry with username &#x27;000100011F3E8772000C29806CCC0E000C29&#x27;</span><br><span class=\"line\">IPv6 DHCP: Poolentry for the user not found</span><br><span class=\"line\">IPv6 DHCP: Allocated new address 2001:ABCD::D9F7:61C:D803:DCF1</span><br><span class=\"line\">IPv6 DHCP: Allocating address 2001:ABCD::D9F7:61C:D803:DCF1 in binding for FE80::5850:6D61:1FB:EF3A, IAID 0E000C29</span><br><span class=\"line\">IPv6 DHCP: Updating binding address entry for address 2001:ABCD::D9F7:61C:D803:DCF1</span><br><span class=\"line\">IPv6 DHCP: Setting timer on 2001:ABCD::D9F7:61C:D803:DCF1 for 60 seconds</span><br><span class=\"line\">IPv6 DHCP: Source Address from SAS FE80::C801:B9FF:FEF0:8</span><br><span class=\"line\">IPv6 DHCP: Sending ADVERTISE to FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br><span class=\"line\">IPv6 DHCP: Received REQUEST from FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br><span class=\"line\">IPv6 DHCP: Option UNKNOWN(39) is not processed</span><br><span class=\"line\">IPv6 DHCP: Option VENDOR-CLASS(16) is not processed</span><br><span class=\"line\">IPv6 DHCP: Using interface pool LAN_POOL</span><br><span class=\"line\">IPv6 DHCP: Looking up pool 2001:ABCD::/64 entry with username &#x27;000100011F3E8772000C29806CCC0E000C29&#x27;</span><br><span class=\"line\">IPv6 DHCP: Poolentry for user found</span><br><span class=\"line\">IPv6 DHCP: Found address 2001:ABCD::D9F7:61C:D803:DCF1 in binding for FE80::5850:6D61:1FB:EF3A, IAID 0E000C29</span><br><span class=\"line\">IPv6 DHCP: Updating binding address entry for address 2001:ABCD::D9F7:61C:D803:DCF1</span><br><span class=\"line\">IPv6 DHCP: Setting timer on 2001:ABCD::D9F7:61C:D803:DCF1 for 172800 seconds</span><br><span class=\"line\">IPv6 DHCP: Source Address from SAS FE80::C801:B9FF:FEF0:8</span><br><span class=\"line\">IPv6 DHCP: Sending REPLY to FE80::5850:6D61:1FB:EF3A on FastEthernet0/0</span><br></pre></td></tr></table></figure>\n<p>For complex cases where it is difficult to identify whether the problem is with the host, router, or DHCPv6 server, we recommend using the free open-source network packet analysis software <a href=\"https://www.wireshark.org\">Wireshark</a> to capture packets of the entire process for analysis. While analyzing packets with Wireshark, you can apply the keyword filtering function.</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">Filter String</th>\n<th style=\"text-align: left;\">Only Show</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">icmpv6.type=133</td>\n<td style=\"text-align: left;\">ICMPv6 RS</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: left;\">icmpv6.nd.ra.flag</td>\n<td style=\"text-align: left;\">ICMPv6 RA</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">dhcpv6</td>\n<td style=\"text-align: left;\">DHCPv6 packets</td>\n</tr>\n</tbody>\n</table>\n<p>We can either run Wireshark directly on the host side, or we can use the Switched Port Analyzer (SPAN) provided with the switch. Running on the network side, SPAN can collectively redirect packets from a given port to the monitor port running Wireshark for capturing. Cisco Catalyst 9300 Series switches also directly <a href=\"https://www.cisco.com/c/en/us/td/docs/switches/lan/catalyst9300/software/release/17-4/configuration_guide/nmgmt/b_174_nmgmt_9300_cg/configuring_packet_capture.html\">integrate with Wireshark software</a> to intercept and analyze filtered packets online, making it very easy to use.</p>\n<p>Sample packet capture files for three allocation scheme are available here for download and study: <a href=\"slaac.pcap\">slaac.pcap</a>，<a href=\"stateless-dhcpv6.pcap\">stateless-dhcpv6.pcap</a>，<a href=\"stateful-dhcpv6.pcap\">stateful-dhcpv6.pcap</a></p>\n<h2 id=\"references\">References</h2>\n<h3 id=\"ipv6-product-certification-test\">IPv6 Product Certification Test</h3>\n<p>Accurate and effective testing of IPv6 products is key to ensuring high interoperability, security, and reliability of IPv6 infrastructure deployments. The <strong>IPv6 Ready</strong> logo is an IPv6 testing and certification program created by the <a href=\"https://www.ipv6forum.com\">IPv6 Forum</a>. Its goals are to define IPv6 conformance and interoperability test specifications, provide a self-testing toolset, establish <a href=\"https://www.ipv6ready.org/faq.html#head4\">Global IPv6 Test Centers</a> and provide product validation services, and finally, issue IPv6 Ready logo.</p>\n<p>In May 2020, <a href=\"https://www.ipv6ready.org\">IPv6 Ready Logo Program</a> published new <a href=\"https://www.ipv6ready.org/resources.html\">version 5.0 test specifications</a>：</p>\n<ul>\n<li>IPv6 Core Protocols Test Specification (Conformance)</li>\n<li>IPv6 Core Protocols Interoperability Test Specification (Interoperability)</li>\n</ul>\n<p>Along with these two new test specifications, the project team also affirmed two permanent changes:</p>\n<ol type=\"1\">\n<li>Testing must be done in an IPv6-only environment, without any IPv4 being used for the device to function.</li>\n<li>The device under test must have IPv6 on and enabled on all IP interfaces by default.</li>\n</ol>\n<p>Not surprisingly, the new version 5.0 core protocols test specification has a section dedicated to defining SLAAC test cases to validate this core IPv6 protocol.</p>\n<h3 id=\"ipv6-core-protocol-rfc-list\">IPv6 Core Protocol RFC List</h3>\n<p>In the list below, the RFCs shown in bold are directly covered by the IPv6 Ready Version 5.0 Core Protocol Test Specification:</p>\n<ul>\n<li>RFC 4191 Default Router Preferences and More-Specific Routes</li>\n<li>RFC 4193 Unique Local IPv6 Unicast Addresses</li>\n<li><strong>RFC 4291 IP Version 6 Addressing Architecture</strong></li>\n<li><strong>RFC 4443 Internet Control Message Protocol (ICMPv6) for the Internet Protocol Version 6 (IPv6) Specification</strong></li>\n<li><strong>RFC 4861 Neighbor Discovery for IP version 6 (IPv6)</strong></li>\n<li><strong>RFC 4862 IPv6 Stateless Address Autoconfiguration</strong></li>\n<li>RFC 4941 Privacy Extensions for Stateless Address Autoconfiguration in IPv6</li>\n<li>RFC 5095 Deprecation of Type 0 Routing Headers in IPv6</li>\n<li>RFC 6724 Default Address Selection for Internet Protocol Version 6 (IPv6)</li>\n<li>RFC 6980 Security Implications of IPv6 Fragmentation with IPv6 Neighbor Discovery</li>\n<li>RFC 7217 A Method for Generating Semantically Opaque Interface Identifiers with IPv6 Stateless Address Autoconfiguration (SLAAC)</li>\n<li>RFC 8064 Recommendation on Stable IPv6 Interface Identifiers</li>\n<li>RFC 8106 IPv6 Router Advertisement Options for DNS Configuration</li>\n<li><strong>RFC 8200 Internet Protocol, Version 6 (IPv6) Specification</strong></li>\n<li><strong>RFC 8201 Path MTU Discovery for IP version 6</strong></li>\n<li>RFC 8415 Dynamic Host Configuration Protocol for IPv6 (DHCPv6)</li>\n</ul>\n","categories":["Study Notes"],"tags":["TCP/IP","Cisco Technology"]},{"title":"Build an Awesome Raspberry Pi NAS for Home Media Streaming","url":"/en/2021/12/29/RPi-NAS-Plex/","content":"<p>Network Attached Storage (NAS) provides data access to a heterogeneous group of clients over computer networks. As hard drive prices continue to drop, NAS devices have made their way into the homes of the masses. Leading brands in the SMB and home NAS market, such as Synology, have their products range in price from as low as $300 to $700 for the high models. But if you are a Raspberry Pi player, you can build a very nice home NAS and streaming service for only about half the cost of the lowest price.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>Knowledge obtained on the papers always feels shallow, must know this thing to practice.</strong><br> <strong>— <em>LU You</em> (Chinese historian and poet of the Southern Song Dynasty)</strong></p>\n</div>\n<p>This blog records the whole process of building a Raspberry Pi NAS and home media server, including project planning, system implementation, and performance review. It also covers some important experiences and lessons that could hopefully benefit anyone interested in this DIY project.</p>\n<h2 id=\"project-planning\">Project Planning</h2>\n<p><strong><a href=\"https://www.raspberrypi.com/products/raspberry-pi-4-model-b/\">Raspberry Pi 4B</a></strong> features an upgraded 1.8GHz Broadcom BCM2711（quad-core Cortex-A72）processor and onboard RAM up to 8GB. It includes two new USB 3.0 ports and a full-speed Gigabit Ethernet interface. The power supply is also updated to a USB-C connector. All these greatly improve system throughput and overall comprehensive performance, and we can use them to create a full-featured home NAS. <img src=\"RPi-4B.png\" style=\"width:65.0%;height:65.0%\" /></p>\n<p>For NAS system software, <strong><a href=\"https://www.openmediavault.org\">OpenMediaVault</a></strong> (OMV) is a complete NAS solution based on Debian Linux. It is a Linux rewrite of the well-known free and open-source NAS server system FreeNAS (based on FreeBSD). The salient features of OMV are</p>\n<ul>\n<li>Simple and easy to use out-of-the-box solution, no need for expert-level knowledge of computer networking and storage systems</li>\n<li>Available for x86-64 and ARM platforms with a full Web Administration interface</li>\n<li>Supports a variety of different protocols (SFTP、SMB/CIFS, NFS, etc.) for file storage access</li>\n<li>Can be controlled via SSH (if enabled), and provides Access Right Management for users and groups</li>\n</ul>\n<p>While primarily designed for home environments or small home offices, OMV's use is not limited to those scenarios. The system is built on a modular design. It can be easily extended with available plugins right after the installation of the base system. OMV is the NAS server system software we are looking for.</p>\n<p>The NAS system with media playback services provides an excellent audio/video-on-demand experience in a home network environment. <strong><a href=\"https://support.plex.tv/articles/categories/plex-media-server/\">Plex Media Server</a></strong> software integrates Internet media services (YouTube, Vimeo, TED, etc.) and local multimedia libraries to provide streaming media playback on users' various devices. The features of Plex for managing local libraries are</p>\n<ul>\n<li>Centralized management and easy sharing of a single library</li>\n<li>Web interface with media resource navigation, streaming playback</li>\n<li>Real-time saving and resuming of playback progress</li>\n<li>Multi-user support and hierarchical playback rights settings</li>\n</ul>\n<p>The Plex Media Server software itself is free and supports a wide range of operating systems, making it ideal for integration with home NAS.</p>\n<p>These cover all the software needed for our NAS project, but they are not enough for a complete NAS system. We also need a preferred case, otherwise, the Raspberry Pi NAS will only run bare metal. Although there are many cases available in the market for Raspberry Pi 4B, as a NAS system we need a case kit that can accommodate at least 1-2 internal SSD/HDD and must also have a good heat dissipation design.</p>\n<p>After some review and comparison, we chose Geekworm's <a href=\"https://wiki.geekworm.com/NASPi\"><strong>NASPi Raspberry Pi 4B NAS storage kit</strong></a>. NASPi is a NUC (Next Unit of Computing) style NAS storage kit designed for the latest Raspberry Pi 4B. It consists of three components:</p>\n<ol type=\"1\">\n<li>X823 shield board, which provides storage function for 2.5-inch SDD/HDD</li>\n<li>X-C1 adapter board, which adjusts all Raspberry Pi 4B interfaces to the back of the case and provides power management and safe shutdown function</li>\n<li>Temperature-controlled PWM (Pulse-Width Modulation) fan as the cooling system</li>\n</ol>\n<p>All these components are packed into a case made of aluminum alloy with an anodized surface.</p>\n<p>Thereon our NAS project can be planned with the following subsystems:</p>\n<ul>\n<li>Hardware System:\n<ul>\n<li>Raspberry Pi 4B 8GB RAM</li>\n<li>32GB microSD for OS storage</li>\n<li>NASPi NAS storage kit</li>\n<li>15-20W USB-C power adaptor</li>\n<li>500GB internal SSD（USB 3.0）</li>\n<li>2TB external HDD（USB 3.0）</li>\n</ul></li>\n<li>Software System:\n<ul>\n<li>Raspberry Pi OS Lite（with no desktop environment）</li>\n<li>OMV for NAS file server</li>\n<li>Plex media server providing streaming service</li>\n</ul></li>\n</ul>\n<p>It is important to note that NAS servers are generally headless systems without a keyboard, mouse, or monitor. This poses some challenges for the installation, configuration, and tuning of hardware and software systems. In practice, as described in the next section, we run an SSH terminal connection to complete the basic project implementation process.</p>\n<h2 id=\"system-implementation\">System Implementation</h2>\n<p>The execution of this project was divided into four stages, which are described in detail as follows.</p>\n<h3 id=\"prepare-respberry-pi-4b\">Prepare Respberry Pi 4B</h3>\n<p>In the first stage, we need to prepare the Raspberry Pi OS and do some basic unit tests. This is important, if we delay the OS test until the entire NSAPi kit is assembled, it will be troublesome to find problems with the Raspberry Pi then.</p>\n<h4 id=\"bake-raspberry-pi-os\">Bake Raspberry Pi OS</h4>\n<p>First, insert the microSD card into the USB adapter and connect it to the macOS computer, then go to the Raspberry Pi website and download the <a href=\"https://www.raspberrypi.org/software/\">Raspberry Pi Imager</a> software to run. From the application screen, click <strong>CHOOSE OS &gt; Raspberry Pi OS (other) &gt; Raspberry Pi OS Lite (32-bit)</strong> step by step. This selects the lightweight Raspberry Pi OS that does not require a desktop environment, and then click <strong>CHOOSE STORAGE</strong> to pick the microSD card.</p>\n<p>Next is a trick - hit <code>ctrl-shift-x</code> key combination and the following advanced options dialog box will pop up <img src=\"RPi-Imager-advopt.png\" style=\"width:70.0%;height:70.0%\" /> Here is exactly the option we need to enable SSH on boot up - <strong>Enable SSH</strong>. It also allows the user to pre-set a password for the default username <code>pi</code> (default is raspberry). Once set up, click <strong>SAVE</strong> to return to the main page and then click <strong>WRITE</strong> to start formatting the microSD card and writing OS to it. When finished, remove the microSD card and insert it into the Raspberry Pi, connect the Ethernet cable then power it up.</p>\n<h4 id=\"probe-ip-address\">Probe IP Address</h4>\n<p>At this point we encountered a problem: since the installed system does not have a desktop environment, it cannot connect to the keyboard, mouse, and monitor, so how do we find its IP address? There are two ways:</p>\n<ol type=\"1\">\n<li>connect to the home router's management WebUI and find the address for the hostname 'raspberry'.</li>\n<li>run the Nmap tool to scan the target subnet and check the changes before and after the Raspberry Pi boots up</li>\n</ol>\n<p>The log of the Nmap tool run can be seen below. Notice that a new IP address 192.168.2.4 is showing up in the scan report. Rerunning Nmap against this address alone, we saw that TCP port 22 was open. We could roughly determine that this might be our newly online Raspberry Pi:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ nmap -sn 192.168.2.0/24</span><br><span class=\"line\">Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-28 21:07 PST</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> router.sx.com (192.168.2.1)</span><br><span class=\"line\">Host is up (0.0050s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 192.168.2.3</span><br><span class=\"line\">Host is up (0.0048s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 192.168.2.4 <span class=\"comment\">## New IP after Raspberry Pi boots up</span></span><br><span class=\"line\">Host is up (0.0057s latency).</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (3 hosts up) scanned <span class=\"keyword\">in</span> 15.31 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">❯ nmap 192.168.2.4</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 192.168.2.4</span><br><span class=\"line\">Host is up (0.0066s latency).</span><br><span class=\"line\">Not shown: 999 closed tcp ports (conn-refused)</span><br><span class=\"line\">PORT   STATE SERVICE</span><br><span class=\"line\">22/tcp open  ssh</span><br></pre></td></tr></table></figure>\n<h4 id=\"system-update-and-upgrade\">System Update and Upgrade</h4>\n<p>Next, try SSH connection</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ ssh pi@192.168.2.4</span><br><span class=\"line\">pi@192.168.2.4<span class=\"string\">&#x27;s password:</span></span><br><span class=\"line\"><span class=\"string\">Linux raspberrypi 5.10.63-v7l+ #1488 SMP Thu Nov 18 16:15:28 GMT 2021 armv7l</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The programs included with the Debian GNU/Linux system are free software;</span></span><br><span class=\"line\"><span class=\"string\">the exact distribution terms for each program are described in the</span></span><br><span class=\"line\"><span class=\"string\">individual files in /usr/share/doc/*/copyright.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span></span><br><span class=\"line\"><span class=\"string\">permitted by applicable law.</span></span><br><span class=\"line\"><span class=\"string\">Last login: Fri Dec 24 19:46:15 2021 from 192.168.2.3</span></span><br><span class=\"line\"><span class=\"string\">pi@raspberrypi:~ $</span></span><br></pre></td></tr></table></figure>\n<p>Once confirmed, we executed the following commands in the Raspberry Pi to update and upgrade the system:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure>\n<h4 id=\"network-connectivity-test\">Network Connectivity Test</h4>\n<p>This stage concluded with the stability test of the Raspberry Pi 4B system Ethernet connection. The test was executed on a macOS computer using the simple ping command, setting the <code>-i 0.05</code> option to specify 20 packets per second, and the <code>-t 3600</code> option for one hour run</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ sudo ping -i 0.05 192.168.2.4 -t 3600</span><br></pre></td></tr></table></figure>\n<p>There should be no more than 1% packet loss or timeout on a subnet with no wireless connectivity, otherwise, it should be checked for troubleshooting. As a matter of fact, in our test, it was happening that nearly 10% of ping packets got lost and SSH connection dropped intermittently. Searching the Internet, we found that there have been quite a few reports of similar issues with the Raspberry Pi 4B Ethernet connection. The analysis and suggestions given by people on the relevant forums focus on the followings</p>\n<ol type=\"1\">\n<li>Unstable power supply accounts for packet loss, needs to be replaced with a reliable USB-C power adapter of 15W or more.</li>\n<li>Energy-efficient Ethernet (Energy-Efficient Ethernet) malfunction, can be fixed by disabling it.</li>\n<li>The full-speed Gigabit Ethernet connection function is faulty and has to be downgraded to 100Mbit/s for stable use.</li>\n</ol>\n<p>Practically, we tried all of the above with little success. Later, we found that the home router connected to the Raspberry Pi 4B was a Belkin N750 DB made in 2011. Although it provides Wi-Fi dual-band 802.11n and 4 Gigabit Ethernet ports, the manufacturing date is too long ago, which makes people doubt its interoperability. Also points 2 and 3 of the above report are essentially interoperability issues. Thinking of these, we immediately ordered the TP-Link TL-SG105 5-port Gigabit Ethernet switch. After receiving it, we extended the Gigabit Ethernet port of N750 with TL-SG105, connected Raspberry Pi 4B to TL-SG105, and retested it. Sure enough this time the ping packet loss rate was less than 0.1% and the SSH connection became solid.</p>\n<p>The conclusion is that the Raspberry Pi 4B Gigabit Ethernet interface may have compatibility issues with some older devices, which can be solved by inserting a desktop switch with good interoperability between the two.</p>\n<h3 id=\"nsapi-kit-assembly\">NSAPi Kit Assembly</h3>\n<p>At the second stage, we assembled the NSAPi storage kit, intending to finish all hardware installation and complete the standalone NAS body.</p>\n<h4 id=\"prepare-internal-ssd\">Prepare Internal SSD</h4>\n<p>The NSAPi supports either an internal SSD or HDD. The project picked a Samsung 870 EVO 500GB internal SSD, here we ought to first make sure the SSD works properly on its own, otherwise, we would have to disassemble the NASPi to replace it. The SSD can be hooked up to Windows for file systems and basic read/write operation checks. In the case of a newly purchased SSD, the following steps can be done on Windows to quickly format it:</p>\n<ol type=\"1\">\n<li>Click on <strong>Start</strong> or the Windows button, select <strong>Control Panel &gt; System and Security</strong></li>\n<li>Select <strong>Administrative Tools &gt; Computer Management &gt; Disk management</strong></li>\n<li>Choose the disk to be formatted, right-click then select <strong>Format</strong></li>\n<li>Check the following in the Dialog box pop up\n<ul>\n<li><strong>File System → NTFS</strong></li>\n<li><strong>Allocation Unit Size → Default</strong></li>\n<li><strong>Volume Label → (enter volume name)</strong></li>\n<li><strong>Perform a quick format</strong></li>\n</ul></li>\n<li>Click the OK button to start a fast format for the SSD</li>\n</ol>\n<p>⚠️Note: Here the chosen file system is NTFS. OMV supports NTFS mounting and reads/writes.</p>\n<h4 id=\"pwm-fan-control\">PWM Fan Control</h4>\n<p>Before the actual hardware assembly, a special software provided by Geekworm - PWM fan control script - must be installed. PWM fan speed adjustment to temperature change is a major feature that lets NASPi stand out from other hardware solutions. So this step is critical.</p>\n<p>Referring to Geekworm's <a href=\"https://wiki.geekworm.com/X-C1_Software\">X-C1 software wiki page</a>, the installation command sequence on SSH session connected to the Raspberry Pi 4B system is as follows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y git pigpio </span><br><span class=\"line\">sudo apt-get install -y python3-pigpio</span><br><span class=\"line\">sudo apt-get install -y python3-smbus</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/geekworm-com/x-c1.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> x-c1</span><br><span class=\"line\">sudo chmod +x *.sh</span><br><span class=\"line\">sudo bash install.sh</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;alias xoff=&#x27;sudo /usr/local/bin/x-c1-softsd.sh&#x27;&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>If you can't do <code>git clone</code> directly on Raspberry Pi 4B, you can first download the X-C1 software on the SSH client, then transfer it to Raspberry Pi 4B using scp. After that, continue to execute the subsequent commands</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ scp -r x-c1 pi@192.168.2.4:/home/pi/</span><br></pre></td></tr></table></figure>\n<details class=\"note primary\"><summary><p><strong>How does X-C1 software control PWM fan?</strong></p>\n</summary>\n<p>The core of X-C1 software is a Python script named fan.py, which is presented below</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pigpio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">servo = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">pwm = pigpio.pi()</span><br><span class=\"line\">pwm.set_mode(servo, pigpio.OUTPUT)</span><br><span class=\"line\">pwm.set_PWM_frequency( servo, <span class=\"number\">25000</span> )</span><br><span class=\"line\">pwm.set_PWM_range(servo, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">     <span class=\"comment\">#get CPU temp</span></span><br><span class=\"line\">     file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/sys/class/thermal/thermal_zone0/temp&quot;</span>)</span><br><span class=\"line\">     temp = <span class=\"built_in\">float</span>(file.read()) / <span class=\"number\">1000.00</span></span><br><span class=\"line\">     temp = <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;%.2f&#x27;</span> % temp)</span><br><span class=\"line\">     file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">30</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">50</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">60</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">70</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">70</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">80</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">75</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &lt; <span class=\"number\">30</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">0</span>)</span><br><span class=\"line\">     time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>Its logic is quite simple. With the pigpio module imported, it first initializes a PWM control object and then starts a while loop with a 1-second sleep cycle inside. The CPU temperature is read at each cycle, and the duty cycle of PWM is set according to the temperature level to control the fan speed. The duty cycle is 0 when it is lower than 30℃, and the fan stops; when it is higher than 75℃, the duty cycle is 100, and the fan spins at full speed. Users can modify the temperature threshold and duty cycle parameters in the program to customize the PWM fan control.</p>\n\n</details>\n<p>In addition, the following pi-temp.sh script, which reads out the GPU and CPU temperatures, is also useful</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ cat ./pi-temp.sh</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Script: pi-temp.sh</span></span><br><span class=\"line\"><span class=\"comment\"># Purpose: Display the ARM CPU and GPU  temperature of Raspberry Pi</span></span><br><span class=\"line\"><span class=\"comment\"># -------------------------------------------------------</span></span><br><span class=\"line\">cpu=$(&lt;/sys/class/thermal/thermal_zone0/temp)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(date)</span> @ <span class=\"subst\">$(hostname)</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;-------------------------------------------&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;GPU =&gt; <span class=\"subst\">$(vcgencmd measure_temp)</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;CPU =&gt; temp=<span class=\"subst\">$((cpu/1000)</span>)’C&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pi@raspberrypi:~ $ ./pi-temp.sh</span><br><span class=\"line\">Mon 29 Nov 06:59:17 GMT 2021 @ raspberrypi</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">GPU =&gt; temp=33.1<span class=\"string\">&#x27;C</span></span><br><span class=\"line\"><span class=\"string\">CPU =&gt; temp=32’C</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"hardware-assembly-process\">Hardware Assembly Process</h4>\n<p>Below is a snapshot of the Geekwork NASPi parts out of the box (except for the Raspberry Pi 4B on the far right of the second row and the screwdriver in the lower right corner)</p>\n<p><img src=\"NASPi-unbox.jpg\" style=\"width:80.0%;height:80.0%\" /> The three key components in the second row, from left to right, are</p>\n<ul>\n<li>X-C1 V1.3 adapter board provides power management, interface adaptation, and security shutdown functions</li>\n<li>X823 V1.5 shield board provides 2.5-inch SSD/HDD storage function (UASP supported)</li>\n<li>4010 PWM fan and metal fan bracket</li>\n</ul>\n<p>The assembly process was done step-by-step mainly by referring to <a href=\"https://youtu.be/ithz2Mg5Vrc\">NASPi installation video</a> on Youtube, and the steps are generalized as follows.</p>\n<ol type=\"1\">\n<li>Insert the SSD into the SATA III connector of X823, flip it to the other side, and fix it with screws.</li>\n<li>Install the Raspberry Pi 4B after fixing the spacers on this side, and place the 7-pin cable between the two</li>\n<li>Install the PWM fan on top of the Raspberry Pi 4B with the additional spacers</li>\n<li>Connect X-C1 and Raspberry Pi 4B, insert 7-pin connector right to X-C1 GPIO port and 3-pin connector to X-C1 FAN port</li>\n<li>Align and insert the 2x7-pin daughterboard to the GPIO port of the Raspberry Pi 4B and fix it with screws</li>\n<li>Plug in the USB 3.0 connector to connect the X823 USB 3.0 port to the corresponding Raspberry Pi 4B USB 3.0</li>\n</ol>\n<p>Now the installation of the internal accessories has been completed, we got the view like this</p>\n<p><img src=\"NASPi-internal.jpg\" style=\"width:60.0%;height:60.0%\" /></p>\n<p>At this point, we added the USB-C power and press the front button to start the system, we could see the PWM fan started to spin. It was also observed that the fan spin rate was not constant, which demonstrated that the temperature controller PWM fan was working properly.</p>\n<p>The front button switch with embedded blue LED decides the whole system on/off state and can be tested as below</p>\n<ul>\n<li>Press the switch after power on, the system starts</li>\n<li>Press and hold the switch for 1-2 seconds while running, the system restarts</li>\n<li>Press and hold the switch for 3 seconds during operation to shut down the system safely.</li>\n<li>Press and hold the switch for 7-8 seconds during operation to force shutdown</li>\n</ul>\n<p>Running the <code>off</code> command on the SSH connection can also trigger a safe shutdown. Be cautious that we should not use Linux <code>shutdown</code> command, as that would not power down the X-C1 board.</p>\n<p>After the button switch test, we now unplugged the USB 3.0 connector and inserted the entire module into the case. Next was to add the back panel and tighten the screws, then re-insert the USB 3.0 connector. This completed the whole NASPi storage kit assembly process. Below are the front and rear views of the final system provided by Geekworm (all interfaces and vents are marked).</p>\n<p><img src=\"NASPi-outside.jpg\" style=\"width:60.0%;height:60.0%\" /></p>\n<h3 id=\"omv-installation-and-configuration\">OMV Installation and Configuration</h3>\n<p>The third stage is for installing and configuring the key software package of the NAS system - PMV. The goal is to bring up the basic network file access service. Before restarting the NAS, we plugged a Seagate 2TB external HDD into the remaining USB 3.0 port. After booting, connected SSH to NASPi from macOS and performed the following process.</p>\n<h4 id=\"install-omv-package\">Install OMV Package</h4>\n<p>Installing OMV is as simple as running the following command line directly from a terminal with an SSH connection.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O - https://raw.githubusercontent.com/OpenMediaVault-Plugin-Developers/installScript/master/install | sudo bash</span><br></pre></td></tr></table></figure>\n<p>Due to the large size of the entire OMV package, this installation process can take a long time. After the installation, the IP address of the system may change and you will need to reconnect to SSH at this time.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(Reading database ... 51781 files and directories currently installed.)</span><br><span class=\"line\">Purging configuration files <span class=\"keyword\">for</span> dhcpcd5 (1:8.1.2-1+rpt3) ...</span><br><span class=\"line\">Purging configuration files <span class=\"keyword\">for</span> raspberrypi-net-mods (1.3.2) ...</span><br><span class=\"line\">Enable and start systemd-resolved ...</span><br><span class=\"line\">Unblocking wifi with rfkill ...</span><br><span class=\"line\">Adding eth0 to openmedivault database ...</span><br><span class=\"line\">IP address may change and you could lose connection <span class=\"keyword\">if</span> running this script via ssh.</span><br><span class=\"line\">client_loop: send disconnect: Broken pipe\t</span><br></pre></td></tr></table></figure>\n<p>After reconnecting, you can use <code>dpkg</code> to view the OMV packages. As you can see, the latest version of OMV installed here is 6.0.5.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ dpkg -l | grep openme</span><br><span class=\"line\">ii  openmediavault                       6.0.5-1                          all          openmediavault - The open network attached storage solution</span><br><span class=\"line\">ii  openmediavault-flashmemory           6.0.2                            all          folder2ram plugin <span class=\"keyword\">for</span> openmediavault</span><br><span class=\"line\">ii  openmediavault-keyring               1.0                              all          GnuPG archive keys of the OpenMediaVault archive</span><br><span class=\"line\">ii  openmediavault-omvextrasorg          6.0.4                            all          OMV-Extras.org Package Repositories <span class=\"keyword\">for</span> OpenMediaVault</span><br></pre></td></tr></table></figure>\n<h4 id=\"omv-management-ui\">OMV Management UI</h4>\n<p>At this point OMV's workbench is live. Launching a browser on a macOS computer and typing in the IP address will open the beautiful login screen (click on the 🌍 icon in the upper right corner to select the user interface language): <img src=\"OMV-login-default.png\" style=\"width:70.0%;height:70.0%\" /> After logging in with the default username and password shown above, you will see the Workbench screen. The first thing you should do at this point is to click the ⚙️ icon in the top right corner to bring up the settings menu and click \"Change Password\". You can also change the language here <img src=\"OMV-start-en.png\" style=\"width:80.0%;height:80.0%\" /> Clicking on \"Dashboard\" in the settings menu allows you to select the relevant components to be enabled. The menu on the left side provides task navigation for administrators and can be hidden when not needed. The complete OMV administration manual can be found in the <a href=\"https://openmediavault.readthedocs.io/en/latest/index.html\">online documentation</a></p>\n<h4 id=\"configure-file-services\">Configure File Services</h4>\n<p>Next is the key process for configuring the NAS, which consists of the following 5 steps.</p>\n<ol type=\"1\">\n<li><p><strong>Scan for mounted disk drives</strong></p>\n<p>Click <strong>Storage &gt; Disks</strong> from the sidebar menu to enter the hard drive management page. If there is an external USB storage device just plugged in, you can click 🔍 here to scan it out. The scan results for this system are as follows. The internal Samsung 500GB SSD and external Seagate 2TB HDD are detected, and the 32GB microSD that contains the entire software system is listed at the top: <img src=\"OMV-Storage-Disks-en.png\" style=\"width:80.0%;height:80.0%\" /></p>\n<p>On the SSH terminal, we could see the information for the same set of mounted drivers</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ df -h | grep disk</span><br><span class=\"line\">/dev/sdb2       466G   13G  454G   3% /srv/dev-disk-by-uuid-D0604B68604B547E</span><br><span class=\"line\">/dev/sda1       1.9T  131G  1.7T   7% /srv/dev-disk-by-uuid-DEB2474FB2472B7B</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>Mount disk drive file systems</strong></p>\n<p>Click <strong>Storage &gt; File Systems</strong> from the sidebar menu to enter the file system management page. If the storage device does not have a file system yet, click ⨁ to Create or Mount file system. OMV can create/mount ext4, ext3, JFS, xfs file systems, but only mounts are supported for the NTFS file system. The following figure shows that OMV correctly mounts NTFS file systems for SSDs and HDDs: <img src=\"OMV-Storage-FS-en.png\" style=\"width:80.0%;height:80.0%\" /></p></li>\n<li><p><strong>Set Shared Folders</strong></p>\n<p>From the sidebar menu, click <strong>Storage &gt; File Systems</strong> to access the shared folder management page. Here, click ⨁ to create a shared folder. When creating it, specify the name, corresponding file system, and relative path, and you can also add comments. Select the created folder and click the pencil icon again to edit the related information. This system sets the relative paths of shared folders Zixi-Primary and Zixi-Secondary for SSD and HDD respectively <img src=\"OMV-Storage-SharedFolders-en.png\" style=\"width:80.0%;height:80.0%\" /> Notice the orange alert at the top of the figure above, which alerts the administrator that the configurations have changed and must click on the ✔️ icon to take effect.</p></li>\n<li><p><strong>Add shared folder access users</strong></p>\n<p>Click <strong>User Management &gt; Users</strong> from the sidebar menu to enter the user management page. The system's default user pi has root privileges and cannot be used for file sharing access due to security concerns. So you need to add a new user separately. On this page, click ⨁ to Create or Import user, only user name and password are required when creating a new user, others are optional. Once created, select this user and click the third folder+key icon (prompting \"Shared folder privileges\") to enter the following privileges settings page <img src=\"OMV-User-authorize-en.png\" style=\"width:80.0%;height:80.0%\" /> As shown in the figure, for this new user zixi, the administrator can set the read and write access permissions for each shared folder.</p></li>\n<li><p><strong>Start file share services</strong></p>\n<p>If you expand the \"Services\" item in the navigation menu, you can see that OMV manages five services: FTP, NFS, Rsync, SMB/CIFS, and SSH. SSH is enabled at the beginning of the system OS image preparation. NFS and SMB/CIFS are the most common network file sharing protocols, and both are supported by macOS. Take SMB/CIFS as the example here. Click <strong>Services &gt; SMB/CIFS</strong> from the sidebar menu to enter the management page. The page contains two buttons: Settings and Shares. Click \"Settings\" first to activate the SMB/CIFS service and configure the workgroup name on the new page, other options can be left as default. After saving, it returns to the SMB/CIFS administration page. Then enter \"Shares\", click ⨁ to Create shared folders Zixi-Primary and Zixi-Secondary on the new page then save. After that, click the ✔️ icon in the orange warning bar to make all configuration updates take effect, and you will end up with the following result <img src=\"OMV-SMB-Shares-en.png\" style=\"width:80.0%;height:80.0%\" /></p></li>\n</ol>\n<p>Now our Raspberry Pi NAS system is ready for file sharing and the SMB/CIFS service is started. After checking the relevant components to turn on, our dashboard live monitoring looks like this <img src=\"OMV-Dashboard-en.png\" style=\"width:85.0%;height:85.0%\" /></p>\n<h4 id=\"set-up-client-device\">Set Up Client Device</h4>\n<p>Once the server-side is ready, we need to add the network share folder on the client-side as follows.</p>\n<ul>\n<li>Windows PC client\n<ul>\n<li>Open File Explore, click “This PC”</li>\n<li>Right click on the blank area at the right pane, select \"Add a network location” on the popup menu</li>\n<li>Enter “\\\\&lt;IP-address&gt;\\<shared-folder>” in the “Internet or network address\" input box</li>\n<li>Enter username and password when prompted</li>\n</ul></li>\n<li>MacBook client (screenshot below)\n<ul>\n<li>Open Finder, click menu item Go</li>\n<li>Click “Connect to Server...”</li>\n<li>Enter URL “smb://&lt;IP-address&gt;/<shared-folder>”, then click Connect</li>\n<li>Enter username and password when prompted<br />\n<img src=\"macOS-SMB.png\" style=\"width:80.0%;height:80.0%\" /></li>\n</ul></li>\n</ul>\n<p>Once the client-side is set up, users can perform various operations on the network share folder as if it were a local directory, such as previewing, creating new, opening or copying files, creating new subdirectories, or deleting existing subdirectories.</p>\n<h3 id=\"plex-installation-and-configuration\">Plex Installation and Configuration</h3>\n<p>The last stage is to install and configure the Plex Media Server, then start a network streaming service.</p>\n<h4 id=\"install-media-server\">Install Media Server</h4>\n<p>The process of installing Plex Media Server requires HTTPS transport support, so we must first install the https-transport package. SSH to our Raspberry Pi NAS and execute the install command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install apt-transport-https</span><br></pre></td></tr></table></figure>\n<p>Next add the Plex repository to the system, which requires downloading the Plex sign key first. Here are the related commands and run logs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class=\"line\">  Warning: apt-key is deprecated. Manage keyring files <span class=\"keyword\">in</span> trusted.gpg.d instead (see apt-key(8)).</span><br><span class=\"line\">100  3072  100  3072    0     0  10039      0 --:--:-- --:--:-- --:--:-- 10039</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>Use the same <code>apt-key</code> command to check the newly added Plex sign key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ apt-key list</span><br><span class=\"line\">Warning: apt-key is deprecated. Manage keyring files <span class=\"keyword\">in</span> trusted.gpg.d instead (see apt-key(8)).</span><br><span class=\"line\">/etc/apt/trusted.gpg</span><br><span class=\"line\">...</span><br><span class=\"line\">pub   rsa4096 2015-03-22 [SC]</span><br><span class=\"line\">      CD66 5CBA 0E2F 88B7 373F  7CB9 9720 3C7B 3ADC A79D</span><br><span class=\"line\">uid           [ unknown] Plex Inc.</span><br><span class=\"line\">sub   rsa4096 2015-03-22 [E]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>You can see that Plex uses 4096-bit RSA keys. For the warning message \"apt-key is deprecated...\" in the above log, you can ignore it for now. Go to read <a href=\"https://askubuntu.com/questions/1286545/what-commands-exactly-should-replace-the-deprecated-apt-key?newreg=20085e604ada43c2a3466bb51eb4349a\">some discussion on the askubuntu forum</a> if you are interested.</p>\n<p>The next step is to add Plex repository to system repository list, then update packages <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure> Now we can start the actual Plex Media Server installation with the following installation commands</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ sudo apt install plexmediaserver</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree... Done</span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">The following NEW packages will be installed:</span><br><span class=\"line\">  plexmediaserver</span><br><span class=\"line\">0 upgraded, 1 newly installed, 0 to remove and 20 not upgraded.</span><br><span class=\"line\">Need to get 66.1 MB of archives.</span><br><span class=\"line\">After this operation, 146 MB of additional disk space will be used.</span><br><span class=\"line\">Get:1 https://downloads.plex.tv/repo/deb public/main armhf plexmediaserver armhf 1.25.0.5282-2edd3c44d [66.1 MB]</span><br><span class=\"line\">Fetched 66.1 MB <span class=\"keyword\">in</span> 28s (2392 kB/s)</span><br><span class=\"line\">Selecting previously unselected package plexmediaserver.</span><br><span class=\"line\">(Reading database ... 51783 files and directories currently installed.)</span><br><span class=\"line\">Preparing to unpack .../plexmediaserver_1.25.0.5282-2edd3c44d_armhf.deb ...</span><br><span class=\"line\">PlexMediaServer install: Pre-installation Validation.</span><br><span class=\"line\">PlexMediaServer install: Pre-installation Validation complete.</span><br><span class=\"line\">Unpacking plexmediaserver (1.25.0.5282-2edd3c44d) ...</span><br><span class=\"line\">Setting up plexmediaserver (1.25.0.5282-2edd3c44d) ...</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration file <span class=\"string\">&#x27;/etc/apt/sources.list.d/plexmediaserver.list&#x27;</span></span><br><span class=\"line\"> ==&gt; File on system created by you or by a script.</span><br><span class=\"line\"> ==&gt; File also <span class=\"keyword\">in</span> package provided by package maintainer.</span><br><span class=\"line\">   What would you like to <span class=\"keyword\">do</span> about it ?  Your options are:</span><br><span class=\"line\">    Y or I  : install the package maintainer<span class=\"string\">&#x27;s version</span></span><br><span class=\"line\"><span class=\"string\">    N or O  : keep your currently-installed version</span></span><br><span class=\"line\"><span class=\"string\">      D     : show the differences between the versions</span></span><br><span class=\"line\"><span class=\"string\">      Z     : start a shell to examine the situation</span></span><br><span class=\"line\"><span class=\"string\"> The default action is to keep your current version.</span></span><br><span class=\"line\"><span class=\"string\">*** plexmediaserver.list (Y/I/N/O/D/Z) [default=N] ?</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: PlexMediaServer-1.25.0.5282-2edd3c44d - Installation starting.</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: Now installing based on:</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Installation Type:   New</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Process Control:     systemd</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Plex User:           plex</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Plex Group:          plex</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Video Group:         video</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Metadata Dir:        /var/lib/plexmediaserver/Library/Application Support</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Temp Directory:      /tmp</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Lang Encoding:       en_US.UTF-8</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Nvidia GPU card:     Not Found</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: Completing final configuration.</span></span><br><span class=\"line\"><span class=\"string\">Created symlink /etc/systemd/system/multi-user.target.wants/plexmediaserver.service → /lib/systemd/system/plexmediaserver.service.</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: PlexMediaServer-1.25.0.5282-2edd3c44d - Installation successful.  Errors: 0, Warnings: 0</span></span><br></pre></td></tr></table></figure>\n<p>The log shows a question is asked about the Plex media server list (plexmediaserver.list), just choose the default N. When we see \"Installation successful\", we know that the installation was successful. At this point, the Plex streaming service is up and running. Invoking the Nmap scan again from the macOS side, we find that TCP port 32400 for Plex service is open.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ nmap -p1-65535 192.168.2.4 | grep open</span><br><span class=\"line\">22/tcp    open     ssh</span><br><span class=\"line\">80/tcp    open     http</span><br><span class=\"line\">111/tcp   open     rpcbind</span><br><span class=\"line\">139/tcp   open     netbios-ssn</span><br><span class=\"line\">445/tcp   open     microsoft-ds</span><br><span class=\"line\">2049/tcp  open     nfs</span><br><span class=\"line\">5357/tcp  open     wsdapi</span><br><span class=\"line\">32400/tcp open     plex</span><br></pre></td></tr></table></figure>\n<h4 id=\"configure-media-server\">Configure Media Server</h4>\n<p>The configuration of the Plex Media Server has been done on the web GUI. Launch a browser on the macOS computer and type in the URL <strong>http://&lt;IP-address&gt;:32400/web</strong>, now we can see the following page if no surprise <img src=\"Plex-notice.png\" style=\"width:80.0%;height:80.0%\" /> We can sign in with a Google, Facebook, or Apple account, or we can enter an email to create a new account. Follow the instructions on the page step by step, no need for any payment, soon we reach the <strong>Server Setup</strong> page. Here we can configure the server name and add libraries. Normally we don't need to access our home media server from outside, so remember to uncheck the \"Allow me to access my media outside my home\" box in this step. To add a library, first select the type of library (movies, TV episodes, music, photos, etc.), then click the \"BROWSE FOR MEDIA FOLDER\" button to browse and select the corresponding folder. Once the library is added, the included media files will immediately appear in the local service directory, as shown in the screenshot below <img src=\"Plex-movie-en.png\" style=\"width:90.0%;height:90.0%\" /> Here we have a local server named ZIXI-RPI-NAS for our Raspberry Pi NAS, the movie directory in the library shows The Matrix trilogy and is playing the first one <em>The Matrix</em>. Move your mouse over the server name and ➕ icon will appear to the right, click on it to continue adding new media libraries.</p>\n<p>Once the Plex Media Server is configured, we can open a browser from any device on our home network to do streaming on-demand, without the need to download additional applications. The whole experience is just like our own proprietary home Netflix service. This is awesome!</p>\n<h2 id=\"performance-review\">Performance Review</h2>\n<p>By connecting a macOS laptop to one of the remaining ports of the TL-SG105, we could perform some simple same-subnet tests to fully evaluate the performance of this NAS system.</p>\n<h3 id=\"system-stress-test\">System Stress Test</h3>\n<p>Referring to Geekworm <a href=\"https://wiki.geekworm.com/Naspi_stress_test\">NASPi Stress Test Wiki page</a>, we executed the following command over SSH connection, which cloned test script from GitHub and run the stress test:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/geekworm-com/rpi-cpu-stress</span><br><span class=\"line\"><span class=\"built_in\">cd</span> rpi-cpu-stress</span><br><span class=\"line\">chmod +x stress.sh</span><br><span class=\"line\">sudo ./stress.sh</span><br></pre></td></tr></table></figure>\n<p>Simultaneously we established a second SSH session and run <code>htop</code> to monitor system status. The screenshot below was taken while close to the 5-minute mark (left is the htop real-time display, right is the stress test output)<img src=\"RPi-stress-test.png\" style=\"width:80.0%;height:80.0%\" /> Dividing the <code>temp</code> value on the right side by 1000 gave the CPU temperature. All 4 CPU cores reached 100% full load during the test, while the maximum temperature did not exceed 70°C. At this moment, there was no obvious heat sensation when touching the case. Typing <code>ctrl-c</code> to stop the stress test, and then executing the temperature measurement script again</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ ./pi-temp.sh</span><br><span class=\"line\">Fri Dec 24 15:59:21 PST 2021 @ raspberrypi</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">GPU =&gt; temp=39.9<span class=\"string\">&#x27;C</span></span><br><span class=\"line\"><span class=\"string\">CPU =&gt; temp=40&#x27;</span>C</span><br></pre></td></tr></table></figure>\n<p>The system temperature returned to a low range value. This test result assures the system meets the design goal.</p>\n<h3 id=\"file-transfer-speed-test\">File Transfer Speed Test</h3>\n<p>The file transfer speed can be roughly measured with the secure remote copy tool SCP. First, create a 1GB size file by running the <code>mkfile</code> command on the macOS client, then copy it to the user directory of the remote NAS system with the <code>scp</code> command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ mkfile 1G test-nas.dmg</span><br><span class=\"line\">❯ ls -al test-nas.dmg</span><br><span class=\"line\">rw-------    1 sxiao  staff  1073741824 Dec 19 20:53 test-nas.dmg</span><br><span class=\"line\">❯ scp test-nas.dmg pi@192.168.2.4:/home/pi/</span><br><span class=\"line\">pi@192.168.2.4<span class=\"string\">&#x27;s password:</span></span><br><span class=\"line\"><span class=\"string\">test-nas.dmg                        100% 1024MB  19.2MB/s   00:53</span></span><br></pre></td></tr></table></figure>\n<p>After the copy was done, it would print the time spent and the deduced speed. Running the command with the source and the destination reversed would give us the speed of receiving a file from the NAS system.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ scp pi@192.168.2.4:/home/pi/test-nas.dmg test-nas-rx.dmg</span><br><span class=\"line\">pi@192.168.2.4<span class=\"string\">&#x27;s password:</span></span><br><span class=\"line\"><span class=\"string\">test-nas.dmg                        100% 1024MB  65.7MB/s   00:15</span></span><br></pre></td></tr></table></figure>\n<p>Repeated 3 times and got the results listed as below</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Transfor Type</th>\n<th style=\"text-align: center;\">Server Operation</th>\n<th style=\"text-align: center;\">Time (s)</th>\n<th style=\"text-align: center;\">Speed (MB/s)</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Send</td>\n<td style=\"text-align: center;\">Write</td>\n<td style=\"text-align: center;\">53</td>\n<td style=\"text-align: center;\">19.2</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Send</td>\n<td style=\"text-align: center;\">Write</td>\n<td style=\"text-align: center;\">45</td>\n<td style=\"text-align: center;\">22.5</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Send</td>\n<td style=\"text-align: center;\">Write</td>\n<td style=\"text-align: center;\">50</td>\n<td style=\"text-align: center;\">20.4</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Receive</td>\n<td style=\"text-align: center;\">Read</td>\n<td style=\"text-align: center;\">15</td>\n<td style=\"text-align: center;\">65.7</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Receive</td>\n<td style=\"text-align: center;\">Read</td>\n<td style=\"text-align: center;\">16</td>\n<td style=\"text-align: center;\">60.3</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Receive</td>\n<td style=\"text-align: center;\">Read</td>\n<td style=\"text-align: center;\">15</td>\n<td style=\"text-align: center;\">66.3</td>\n</tr>\n</tbody>\n</table>\n<p>As can be seen, the speed of remote write is around 20MB/s, while the speed of remote file read can reach over 60MB/s. Considering that scp-related encryption and decryption are implemented in software on general-purpose Raspberry Pi systems, this result should be considered passable.</p>\n<h3 id=\"disk-access-speed-test\">Disk Access Speed Test</h3>\n<p>The real test of the NAS's performance is the network drive read/write speed test. For this, we downloaded the AmorphousDiskMark app from Apple's App Store. This is an easy and efficient drive speed test that measures the read/write performance of a storage device in terms of MB/s and IOPS (input/output operations per second). It has four types of tests:</p>\n<ol type=\"1\">\n<li>sequential read/write, 1MB block, queue depth 8</li>\n<li>sequential read/write, 1MB block, queue depth 1</li>\n<li>random read/write, 4KB block, queue depth 64</li>\n<li>random read/write, 4KB block, queue depth 1</li>\n</ol>\n<p>The above queue depths are the default values, but other values are also available. In addition, users can also modify the test file size and duration.</p>\n<p>Run the application on the macOS client and select the remote SMB folders Zixi-Primary (Samsung SSD) and Zixi-Secondary (Seagate HDD) respectively at the top, then click the <code>All</code> button in the upper left corner to start the NAS drive speed test process. A side-by-side comparison of the two test results is shown below</p>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"ADM-SSD.png\" /></div><div class=\"group-picture-column\"><img src=\"ADM-HDD.png\" /></div></div></div>\n<p>This gives a few observations:</p>\n<ul>\n<li>Reads are fast than writes for NAS drives, and the difference under random access is huge.</li>\n<li>SSD outperforms HDD for both sequential and random accesses.</li>\n<li>Large queue depth speeds up reads, especially for random accesses, but there is little impact on writes.</li>\n<li>For both SSDs and HDDs, sequential reads/writes are significantly more efficient than random reads/writes.</li>\n<li>For both SSDs and HDDs, sequential reads/writes reach their highest speeds at large queue depths.</li>\n</ul>\n<p>These are not surprising and are consistent with the test results on macOS laptops with direct external SSDs and HDDs, only with the lower numbers. With this NAS system, both the SSD and HDD are connected via the USB 3.0 interface. USB 3.0 supports transfer speeds of up to 5Gbit/s, so the performance bottleneck of the system is the network interface bandwidth and processor power.</p>\n<p>That being said, for both SSDs and HDDs, the transfer speeds have been more than 900Mbit/s at 1MB sequential read and queue depth 8, close to the upper bandwidth limit of the Gigabit Ethernet interface. This read speed can support a single 1080p60 video stream at a frame rate of 60fps or 2 parallel 1080i50 video streams at a frame rate of 25fps, which is sufficient for home streaming services. In another media service test, the NAS system performs satisfactorily with three computers playing HD video on demand and one phone playing MP3 music without any lag.</p>\n<h2 id=\"project-summary\">Project Summary</h2>\n<p>This completes our Raspberry Pi home NAS project. Now we can move our NAS to a more permanent location to provide network file and streaming services for the whole family.</p>\n<p><img src=\"NASPi-final.jpg\" style=\"width:80.0%;height:80.0%\" /></p>\n<p>Economically, our home NAS has the cost summarized in the table below (excluding SSD/HDD)</p>\n<table>\n<colgroup>\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Devices</th>\n<th style=\"text-align: center;\">Functions</th>\n<th style=\"text-align: center;\">Cost（$）</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Raspberry Pi 4B 2/4/8GB RAM</td>\n<td style=\"text-align: center;\">Primary hardware system</td>\n<td style=\"text-align: center;\">45/55/75</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Samsung 32GB EVO+ Class-10 Micro SDHC</td>\n<td style=\"text-align: center;\">OS storage</td>\n<td style=\"text-align: center;\">10</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Geekworm NASPi Raspberry Pi 4B NAS Storage Kit</td>\n<td style=\"text-align: center;\">Case, extending board and PWM fan</td>\n<td style=\"text-align: center;\">60</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Geekworm 20W 5V 4A USB-C Power Adaptor</td>\n<td style=\"text-align: center;\">Power supply</td>\n<td style=\"text-align: center;\">15</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">TP-Link TL-SG105 5-Port Gigabit Ethernet Switch</td>\n<td style=\"text-align: center;\">Desktop switch</td>\n<td style=\"text-align: center;\">15</td>\n</tr>\n</tbody>\n</table>\n<p>Even with the choice of 8GB RAM Raspberry Pi 4B, the whole cost is only $175, a little more than half of the price of the low-end brand NAS sold in the market. Unless there are a lot of client devices that need streaming services, the memory consumption is usually under 2GB, so the 2GB Raspberry Pi 4B should be able to work in most home scenarios. That cuts the cost down to $145, less than half the MSRP.</p>\n<p>On the other hand, this DIY project was a very good exercise of hands-on practice, helping us gain valuable intuitive experience in building network connections, configuring system hardware and software, and tuning and testing application layer services. To sum up, the home NAS system built with Raspberry Pi 4B and OMV, combined with a Plex media server, provides a cost-effective solution for file backup and streaming media services in the home network.</p>\n<p>Appendix: List of related devices and Amazon links</p>\n<blockquote>\n<p><strong><em>Disclosure</em></strong>: <em>This blog site is reader-supported. When you buy through the affiliate links below, we may earn a tiny commission. Thank you.</em></p>\n<p><strong>CanaKit Raspberry Pi 4B 8GB RAM + 128GB MicroSD Extrem Kit</strong> <a href=\"https://amzn.to/3DUeDfm\">https://amzn.to/3DUeDfm</a><br />\n<strong>Samsung 32GB EVO+ Class 10 Micro SDHC with Adapter</strong> <a href=\"https://amzn.to/3FLkTb7\">https://amzn.to/3FLkTb7</a><br />\n<strong>Geekworm NASPi 2.5\" SATA HDD/SSD Raspberry Pi 4B NAS Storage Kit</strong> <a href=\"https://amzn.to/3m5djAi\">https://amzn.to/3m5djAi</a><br />\n<strong>Geekworm Raspberry Pi 4 20W 5V 4A USB-C Power Adaptor</strong> <a href=\"https://amzn.to/3m1EXOf\">https://amzn.to/3m1EXOf</a><br />\n<strong>TP-Link TL-SG105 5-Port Gigabit Ethernet Switch</strong> <a href=\"https://amzn.to/3pRkBsi\">https://amzn.to/3pRkBsi</a><br />\n<strong>Samsung 870 EVO 500GB 2.5\" SATA III Internal SSD</strong> <a href=\"https://amzn.to/3DPKnCl\">https://amzn.to/3DPKnCl</a><br />\n<strong>Seagate Portable 2TB USB 3.0 External HDD</strong> <a href=\"https://amzn.to/3EYegl4\">https://amzn.to/3EYegl4</a><br />\n<strong>Synology 2-Bay 2GB NAS DiskStation DS220+</strong> <a href=\"https://amzn.to/3Jp5qjd\">https://amzn.to/3Jp5qjd</a><br />\n<strong>Synology 5-Bay 8GB NAS DiskStation DS1520+</strong> <a href=\"https://amzn.to/3qniQDm\">https://amzn.to/3qniQDm</a></p>\n</blockquote>\n","categories":["DIY Projects"],"tags":["Raspberry Pi","NAS"]}]