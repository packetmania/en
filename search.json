[{"title":"Understand Endianness","url":"/en/2021/12/24/Endianness/","content":"<p>The problem of Endianness is essentially a question about how computers store large numbers. <span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>I do not fear computers. I fear lack of them.</strong><br> <strong>— <em>Isaac Asimov</em> (American writer and professor of biochemistry, best known for his hard science fiction)</strong></p>\n</div>\n<p>We know that one basic memory unit can hold one byte, and each memory unit has its own address. For an integer larger than decimal 255 (0xff in hexadecimal), more than one memory unit is required. For example, 4660 is 0x1234 in hexadecimal and requires two bytes. Different computer systems use different methods to store these two bytes. In our common PC, the least-significant byte 0x34 is stored in the low address memory unit and the most-significant byte 0x12 is stored in the high address memory unit. While in Sun workstations, the opposite is true, with 0x34 in the high address memory unit and 0x12 in the low address memory unit. The former is called <code>Little Endian</code> and the latter is <code>Big Endian</code>.</p>\n<p>How can I remember these two data storing modes? It is actually quite simple. First remember that the addresses of the memory units we are talking about are always arranged from low to high. For a multi-byte number, if the first byte in the low address you see is the least-significant byte, the system is <code>Little Endian</code>, where Little matchs <code>low</code>. On the contrary is <code>Big Endian</code>, where Big corresponds to \"high\".</p>\n<h2 id=\"program-example\">Program Example</h2>\n<p>To deepen our understanding of Endianness, let's look at the following example of a C program:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> a = <span class=\"number\">1</span>; \t \t \t </span><br><span class=\"line\"><span class=\"keyword\">char</span> b = <span class=\"number\">2</span>;                       </span><br><span class=\"line\"><span class=\"keyword\">short</span> c = <span class=\"number\">255</span>;\t<span class=\"comment\">/* 0x00ff */</span></span><br><span class=\"line\"><span class=\"keyword\">long</span> d = <span class=\"number\">0x44332211</span>;</span><br></pre></td></tr></table></figure>\n<p>On Intel 80x86 based systems, the memory content corresponding to variables a, b, c, and d are shown in the following table：</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th>Address Offset</th>\n<th>Memory Content</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>0x0000</td>\n<td>01 02 FF 00</td>\n</tr>\n<tr class=\"even\">\n<td>0x0004</td>\n<td>11 22 33 44</td>\n</tr>\n</tbody>\n</table>\n<p>Obviously we can immediately tell that this system is <code>Little Endian</code>. For a 16-bit integer <code>short c</code>, we see the least-significant byte 0xff first, and the next one is 0x00. Similarly for a 32-bit integer <code>long d</code>, the least-significant byte 0x11 is stored at the lowest address 0x0004. If this is in a <code>Big Endian</code> computer, memory content would be: <em>01 02 00 FF 44 33 22 11</em>.</p>\n<p>At run time all computer processors must choose between these two Endians. The following is a short list of processor types with supported Endian modes:</p>\n<ul>\n<li>Pure<code>Big Endian</code>: Sun SPARC, Motorola 68000，Java Virtual Machine</li>\n<li>Bi-Endian running <code>Big Endian</code> mode: MIPS with IRIX, PA-RISC, most Power and PowerPC systems</li>\n<li>Bi-Endian running <code>Little Endian</code> mode: ARM, MIPS with Ultrix, most DEC Alpha, IA-64 with Linux</li>\n<li><code>Little Endian</code>: Intel x86, AMD64, DEC VAX</li>\n</ul>\n<p>How to detect the Endianess of local system in the program? The following function can be called for a quick check. If the return value is 1, it is <code>Little Endian</code>, else <code>Big Endian</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">test_endian</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *((<span class=\"keyword\">char</span> *)&amp;x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"network-order\">Network Order</h2>\n<p>Endianness is also important for computer communications. Imagining that when a <code>Little Endian</code> system communicates with a <code>Big Endian</code> system, the receiver and sender will interpret the data completely differently if not handled properly. For example, for the variable d in the C program segment above, the <code>Little Endian</code> sender sends <em>11 22 33 44</em> four bytes, which the <code>Big Endian</code> receiver converts to the value 0x11223344. This is very different from the original value. To solve this problem, the TCP/IP protocol specifies a special \"network byte order\" (referred to as \"network order\"), which means that regardless of the Endian supported by the computer system, the most-significant byte is always sent first while transmitting data. From the definition, we can see that the network order actually corresponds to the <code>Big Endian</code>.</p>\n<p>In order to avoid communication problems caused by Endianness and to facilitate software developers to write portable programs, some C preprocessing macros are defined for conversion between network bytes and local byte order. <code>htons()</code> and <code>htonl()</code> are used to convert local byte order to network byte order, the former works with 16-bit unsigned numbers and the latter for 32-bit unsigned numbers. <code>ntohs()</code> and <code>ntohl()</code> implement the conversion in the opposite direction. The prototype definitions of these four macros can be found as follows (available in the <code>netinet/in.h</code> file on Linux systems).</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(BIG_ENDIAN) &amp;&amp; !defined(LITTLE_ENDIAN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> htons(A)  (A)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> htonl(A)  (A)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ntohs(A)  (A)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ntohl(A)  (A)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">elif</span> defined(LITTLE_ENDIAN) &amp;&amp; !defined(BIG_ENDIAN)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> htons(A)  ((((uint16)(A) &amp; 0xff00) &gt;&gt; 8) | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint16)(A) &amp; 0x00ff) &lt;&lt; 8))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> htonl(A)  ((((uint32)(A) &amp; 0xff000000) &gt;&gt; 24) | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint32)(A) &amp; 0x00ff0000) &gt;&gt; 8)  | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint32)(A) &amp; 0x0000ff00) &lt;&lt; 8)  | \\</span></span><br><span class=\"line\"><span class=\"meta\">                   (((uint32)(A) &amp; 0x000000ff) &lt;&lt; 24))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ntohs     htons</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ntohl     htohl</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">error</span> <span class=\"meta-string\">&quot;Either BIG_ENDIAN or LITTLE_ENDIAN must be #defined, but not both.&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n","categories":["Study Notes"],"tags":["Computer Architecture","Computer Communications","System Programming","C/C++ Programming"]},{"title":"IPv4 and IPv6 Header Checksum Algorithm Explained","url":"/en/2021/12/26/IPv4-IPv6-checksum/","content":"<p>About IP packet header checksum algorithm, simply put, it is 16-bit ones' complement of the ones' complement sum of all 16-bit words in the header. However, not many sources show exactly how this is done.<span id=\"more\"></span> The same checksum algorithm is used by TCP segment and UDP datagram, but the data involved in the checksum computing is different from that in the IP header. In addition, the checksum operation of IPv6 packet is different from that of IPv4. Therefore, it is necessary to make a comprehensive analysis of the checksum algorithm of IP packets.</p>\n<div class=\"note success no-icon\"><p><strong>Nothing in life is to be feared, it is only to be understood.</strong><br> <strong>— <em>Marie Curie</em> (Polish and naturalized-French physicist and chemist, twice Nobel Prize winner)</strong></p>\n</div>\n<h2 id=\"ipv4-header-checksum\">IPv4 Header Checksum</h2>\n<p>IPv4 packet header format can be seen below</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0                   1                   2                   3    </span><br><span class=\"line\">0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1  </span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Version|  IHL  |Type of Service|          Total Length         |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|         Identification        |Flags|      Fragment Offset    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|  Time to Live |    Protocol   |        Header Checksum        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                       Source Address                          |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Destination Address                        |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                    Options                    |    Padding    |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>Here the 16-bit Header Checksum field is used for error-checking of the. While computing the IPv4 header checksum, the sender first clears the checksum field to zero, then calculates the sum of each 16-bit value within the header. The sum is saved in a 32-bit value. If the total number of bytes is odd, the last byte is added separately.</p>\n<p>After all additions, the higher 16 bits saving the carry is added to the lower 16 bits. Repeat this till all higher 16 bits are zeros. Finally the sender takes the ones' complement of the lower 16 bits of the result and writes it to IP header checuksum field.</p>\n<p>The following demonstrates the entire calculation process using actual captured IPv4 packets.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x0000: 00 60 47 41 11 c9 00 09 6b 7a 5b 3b 08 00 45 00 </span><br><span class=\"line\">0x0010: 00 1c 74 68 00 00 80 11 59 8f c0 a8 64 01 ab 46 </span><br><span class=\"line\">0x0020: 9c e9 0f 3a 04 05 00 08 7f c5 00 00 00 00 00 00 </span><br><span class=\"line\">0x0030: 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure>\n<p>At the beginning of the above 16-bit hex dump is the Ethernet frame header. The IP packet header start from offset 0x000e, with the first byte 0x45 and the last byte 0xe9. Based on the previous description of the algorithm, we can make the following calculations:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(1) 0x4500 + 0x001c + 0x7468 + 0x0000 + 0x8011 +</span><br><span class=\"line\">    0x0000 + 0xc0a8 + 0x6401 + 0xab46 + 0x9ce9 = 0x3a66d</span><br><span class=\"line\">(2) 0xa66d + 0x3 = 0xa670</span><br><span class=\"line\">(3) 0xffff - 0xa670 = 0x598f</span><br></pre></td></tr></table></figure>\n<p>Notice at step (1) we replace the checksum field with <u>0x0000</u>. As can be seen, the calculated header checksum 0x598f is exactly the same as the value in the captured packet. This calculating process is only used for the sender to generate the initial checksum. In practice, for the intermediate forwarding router and the final receiver, they can just sum up all header fields of the receive IP packet by the same algorithm. If the result is <u>0xffff</u>, the checksum verification passes.</p>\n<h2 id=\"c-program-implementation\">C Program Implementation</h2>\n<p>How to program IPv4 header checksum computing? <a href=\"https://tools.ietf.org/html/rfc1071\">RFC 1071</a> (Computing the Internet Checksum) shows a reference \"C\" language implementation:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Compute Internet Checksum for &quot;count&quot; bytes</span></span><br><span class=\"line\"><span class=\"comment\">     * beginning at location &quot;addr&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>( count &gt; <span class=\"number\">1</span> )  &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* This is the inner loop */</span></span><br><span class=\"line\">        sum += * (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> *) addr++;</span><br><span class=\"line\">        count -= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  Add left-over byte, if any */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( count &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">        sum += * (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *) addr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*  Fold 32-bit sum to 16 bits */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (sum&gt;&gt;<span class=\"number\">16</span>)</span><br><span class=\"line\">        sum = (sum &amp; <span class=\"number\">0xffff</span>) + (sum &gt;&gt; <span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    checksum = ~sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>In a real network connection, the source device can call the above code to generate the initial IPv4 header checksum. This checksum is then updated at each step of the routing hop because the router must decrement the Time To Live (TTL) field. <a href=\"https://tools.ietf.org/html/rfc1141\">RFC 1141</a> (Incremental Updating of the Internet Checksum) gives a reference implemenatation of fast checksum update：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">ipptr-&gt;ttl--;                  <span class=\"comment\">/* decrement ttl */</span></span><br><span class=\"line\">sum = ipptr-&gt;Checksum + <span class=\"number\">0x100</span>; <span class=\"comment\">/* increment checksum high byte*/</span></span><br><span class=\"line\">ipptr-&gt;Checksum = (sum + (sum&gt;&gt;<span class=\"number\">16</span>)); <span class=\"comment\">/* add carry */</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"tcpudp-header-checksum\">TCP/UDP Header Checksum</h2>\n<p>For TCP segment and UDP datagram, they both have 16-bit header checkum fields used for error-checking by the destination host. The checksum computing algorithm is the same as IP header, except the difference of covered data. Here the checksum in calculated over the whole TCP/UDP header and the payload, plus a pseudo-header that mimics the IPv4 header as shown below:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0      7 8     15 16    23 24    31 </span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|          source address           |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|        destination address        |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|  zero  |protocol| TCP/UDP length  |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br></pre></td></tr></table></figure>\n<p>It consists of the source and destination IP addresses, the protocol number (TCP:6/UDP:17), and the total length of the TCP/UDP header and payload (in bytes). The purpose of including the pseudo-header in the checksum computing is to confirm the packet reachs the expected destination and avoid IP spoofing attack. Besides, for IPv4 UDP header checksum is optional, it carries all-zeros if unused.</p>\n<h2 id=\"ipv6-difference\">IPv6 Difference</h2>\n<p>IPv6 is IP protocol version 6, and its main design goal was to resolve the problem of IPv4 address exhaustion. Of course it provides many benefits in other aspects. Although the IPv6 usage is growing slowly, the trend is unstoppable. The latest IPv6 standard is published in <a href=\"https://tools.ietf.org/html/rfc8200\">RFC 8200</a>(Internet Protocol, Version 6 (IPv6) Specification).</p>\n<p>IPv6 packet header format can be seen below</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|Version| Traffic Class |           Flow Label                  |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|         Payload Length        |  Next Header  |   Hop Limit   |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                         Source Address                        +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                      Destination Address                      +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<p>Notice that the IPv6 header does not include a checksum field, a significant difference from IPv4. The absence of a checksum in the IPv6 header furthers the end-to-end principle of Internet design, to simplify router processing and speed up the packet transmission. Protection for the data integrity can be accomplished by error detection at the link layer or the higher-layer protocols between endpoints (such as TCP/UDP on the transport layer). This is why IPv6 forces the UDP layer to set the header checksum.</p>\n<p>For IPv6 TCP segment and UDP datagram header checksum computing, the pseudo-header that mimics the IPv6 header is shown below</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                         Source Address                        +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                      Destination Address                      +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+                                                               +</span><br><span class=\"line\">|                                                               |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                   Upper-Layer Packet Length                   |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class=\"line\">|                      zero                     |  Next Header  |</span><br><span class=\"line\">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure>\n<h2 id=\"udp-lite-application\">UDP-Lite Application</h2>\n<p>In actual IPv6 network applications, UDP-Lite (Lightweight UDP) can be used to balance error detection and transmission efficiency. UDP-Lite has its own protocol number 136, and its standard is described in <a href=\"https://tools.ietf.org/html/rfc8200\">RFC 3828</a> (The Lightweight User Datagram Protocol (UDP-Lite)).</p>\n<p>Referring to the following header format, UDP-Lite uses the same set of <a href=\"https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml\">port number values assigned by the IANA</a> for use by UDP. But it redefines \"length\" field in UDP header to \"Checksum Coverage\", which allows the application layer to control the length of checksummed data. This is usful for the application that can be tolerant of the potentially lossy transmission of the uncovered portion of the data.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> 0              15 16             31</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|     Source      |   Destination   |</span><br><span class=\"line\">|      Port       |      Port       |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|    Checksum     |                 |</span><br><span class=\"line\">|    Coverage     |    Checksum     |</span><br><span class=\"line\">+--------+--------+--------+--------+</span><br><span class=\"line\">|                                   |</span><br><span class=\"line\">:              Payload              :</span><br><span class=\"line\">|                                   |</span><br><span class=\"line\">+-----------------------------------+</span><br></pre></td></tr></table></figure>\n<p>UDP-Lite protocol defines the values of \"Checksum Coverage\" (in bytes) as shown in the following table:</p>\n<table>\n<colgroup>\n<col style=\"width: 31%\" />\n<col style=\"width: 36%\" />\n<col style=\"width: 31%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Checksum Coverage</th>\n<th style=\"text-align: center;\">Coverage Area</th>\n<th style=\"text-align: center;\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">0</td>\n<td style=\"text-align: center;\">entire UDP-Lites datagram</td>\n<td style=\"text-align: center;\">Calculation covers IP pseudo-header</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">1-7</td>\n<td style=\"text-align: center;\">(invalid)</td>\n<td style=\"text-align: center;\">The receiver has to drop the datagram</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">8</td>\n<td style=\"text-align: center;\">UDP-Lites header</td>\n<td style=\"text-align: center;\">Calculation covers IP pseudo-header</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">&gt; 8</td>\n<td style=\"text-align: center;\">UDP-Lites header + portion of payload data</td>\n<td style=\"text-align: center;\">Calculation covers IP pseudo-header</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">&gt; IP datagram length</td>\n<td style=\"text-align: center;\">(invalid)</td>\n<td style=\"text-align: center;\">The receiver has to drop the datagram</td>\n</tr>\n</tbody>\n</table>\n<p>For multimedia applications running VoIP or streaming video data transmission protocols, it'd better receive data with some degree of corruption than not receiving any data at all. Another example is the <a href=\"https://tools.ietf.org/html/rfc5415\">CAPWAP</a> protocol used to connect Cisco wireless controller and access points. It specifies UDP-Lite as the default transport protocol for the CAPWAP Data channel, while the connection is established over IPv6 network.</p>\n<p>At last, share a C program snippet to present how to initialize a Berkeley socket to establish an IPv6 UDP-Lite connection:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;net/udplite.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> udplite_conn = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDPLITE);</span><br><span class=\"line\"><span class=\"keyword\">int</span> val = <span class=\"number\">8</span>;    <span class=\"comment\">/* checksum only covers 8-byte UDP-Lite header */</span></span><br><span class=\"line\">(<span class=\"keyword\">void</span>)setsockopt(udplite_conn, IPPROTO_UDPLITE, UDPLITE_SEND_CSCOV, &amp;val, <span class=\"keyword\">sizeof</span> val);</span><br><span class=\"line\">(<span class=\"keyword\">void</span>)setsockopt(udplite_conn, IPPROTO_UDPLITE, UDPLITE_RECV_CSCOV, &amp;val, <span class=\"keyword\">sizeof</span> val);</span><br></pre></td></tr></table></figure>\n<p>Here <code>IPPROTO_UDPLITE</code> is protocol number 136, which is used together with <code>AF_INET6</code> address family paramater in <code>socket()</code> funtion call for IPv6 socket creation. The <code>UDPLITE_SEND_CSCOV</code>(10) and <code>UDPLITE_RECV_CSCOV</code>(11) are the control parameters of socket option configuration function <code>setsockopt()</code>, used for setting the Checksum Coverage value in the sender and the receiver respectively. Remember that both the sender and the receiver must set the same value, otherwise the receiver will not be able to verify the checksum properly.</p>\n","categories":["Study Notes"],"tags":["C/C++ Programming","TCP/IP"]},{"title":"Build an Awesome Raspberry Pi NAS for Home Media Streaming","url":"/en/2021/12/29/RPi-NAS-Plex/","content":"<p>Network Attached Storage (NAS) provides data access to a heterogeneous group of clients over computer networks. As hard drive prices continue to drop, NAS devices have made their way into the homes of the masses. Leading brands in the SMB and home NAS market, such as Synology, have their products range in price from as low as $300 to $700 for the high models. But if you are a Raspberry Pi player, you can build a very nice home NAS and streaming service for only about half the cost of the lowest price.<span id=\"more\"></span></p>\n<div class=\"note success no-icon\"><p><strong>Knowledges obtained on the papers always feel shallow, must know this thing to practice.</strong><br> <strong>— <em>LU You</em> (Chinese historian and poet of the Southern Song Dynasty)</strong></p>\n</div>\n<p>This blog records the whole process of building a Raspberry Pi NAS and home media server, including project planning, system implementation, and performance review. It also covers some important experience and lessons that could hopefully benefit anyone interested in this DIY project.</p>\n<h2 id=\"project-planning\">Project Planning</h2>\n<p><strong><a href=\"https://www.raspberrypi.com/products/raspberry-pi-4-model-b/\">Raspberry Pi 4B</a></strong> features a upgraded 1.8GHz Broadcom BCM2711（quad-core Cortex-A72）processor and onboard RAM up to 8GB. It includes two new USB 3.0 ports and a full speed Gigabit Ethernet interface. The power supply is also updated to USB-C connector. All these greatly improve system throughput and overall comprehensive performance, and we can use it to create a full-featured home NAS. <img src=\"RPi-4B.png\" style=\"width:65.0%;height:65.0%\" /></p>\n<p>For NAS system software, <strong><a href=\"https://www.openmediavault.org\">OpenMediaVault</a></strong> (OMV) is a complete NAS solution based on Debian Linux. It is a Linux rewrite of the well-known free and open source NAS server system FreeNAS (based on FreeBSD). The salient features of OMV are</p>\n<ul>\n<li>Simple and easy to use out-of-the-box solution, no need for expert level knowledge of computer networking and storage systems</li>\n<li>Available for x86-64 and ARM platforms with a full Web Administration interface</li>\n<li>Supports a variety of different protocols (SFTP、SMB/CIFS, NFS, etc.) for file storge access</li>\n<li>Can be controlled via SSH (if enabled), and provides Access Right Management for users and groups</li>\n</ul>\n<p>While primarily designed for home environments or small home offices, OMV's use is not limited to those scenarios. The system is built on a modular design. It can be easily extended with available plugins right after installation of the base system. Obviously, OMV is the NAS server system software we are looking for.</p>\n<p>The NAS system with media playback services provides an excellent audio/video on-demand experience in a home network environment. <strong><a href=\"https://support.plex.tv/articles/categories/plex-media-server/\">Plex Media Server</a></strong> software integrates Internet media services (YouTube, Vimeo, TED, etc.) and local multimedia libraries to provide streaming media playback on users' various devices. The features of Plex for managing local libraries are</p>\n<ul>\n<li>Centralized management and easy sharing of a single library</li>\n<li>Web interface with media resource navigation, streaming playback</li>\n<li>Real-time saving and resuming of playback progress</li>\n<li>Multi-user support and hierarchical playback rights settings</li>\n</ul>\n<p>The Plex Media Server software itself is free and supports a wide range of operating systems, making it ideal for integration with home NAS.</p>\n<p>These cover all the software needed for our NAS project, but they are not enough for a complete NAS system. We also need a preferred case, otherwise the Raspberry Pi NAS will only run bare metal. Although there are many cases available in the market for Raspberry Pi 4B, as a NAS system we need a case kit that can accommodate at least 1-2 internal SSD/HDD and must also have a good heat dissipation design.</p>\n<p>After some review and comparison, we chose Geekworm's <a href=\"https://wiki.geekworm.com/NASPi\"><strong>NASPi Raspberry Pi 4B NAS storage kit</strong></a>. NASPi is a NUC (Next Unit of Computing) style NAS storage kit designed for the latest Raspberry Pi 4B. It consists of three components:</p>\n<ol type=\"1\">\n<li>X823 shield board, which provides storage function for 2.5-inch SDD/HDD</li>\n<li>X-C1 adapter board, which adjusts all Raspberry Pi 4B interfaces to the back of the case and provides power management and safe shutdown function</li>\n<li>Temperature-controlled PWM (Pulse-Width Modulation) fan as the cooling system</li>\n</ol>\n<p>All these components are packed into a case made of aluminum alloy with an anodized surface.</p>\n<p>Thereon our NAS project can be planned with the following subsystems:</p>\n<ul>\n<li>Hardware System:\n<ul>\n<li>Raspberry Pi 4B 8GB RAM</li>\n<li>32GB microSD for OS storage</li>\n<li>NASPi NAS storage kit</li>\n<li>15-20W USB-C power adaptor</li>\n<li>500GB internal SSD（USB 3.0）</li>\n<li>2TB external HDD（USB 3.0）</li>\n</ul></li>\n<li>Software System:\n<ul>\n<li>Raspberry Pi OS Lite（with no desktop environment）</li>\n<li>OMV for NAS file server</li>\n<li>Plex media server providing streaming service</li>\n</ul></li>\n</ul>\n<p>It is important to note that NAS servers are generally headless systems without a keyboard, mouse and monitor. This poses some challenges for the installation, configuration and tuning of hardware and software systems. In practice, as described in the next section, we run SSH terminal connection to complete the basic project implementation process.</p>\n<h2 id=\"system-implementation\">System Implementation</h2>\n<p>The execution of this project was divided into four stages, which are described in detail as follows.</p>\n<h3 id=\"prepare-respberry-pi-4b\">Prepare Respberry Pi 4B</h3>\n<p>In the first stage we need to prepare the Raspberry Pi OS and do some basic unit tests. This is important, if we delay the OS test until the entire NSAPi kit is assembled, it will be troublesome to find problems with the Raspberry Pi then.</p>\n<h4 id=\"bake-respberry-pi-os\">Bake Respberry Pi OS</h4>\n<p>First, insert the microSD card into the USB adapter and connect it to the macOS computer, then go to the Raspberry Pi website and download the <a href=\"https://www.raspberrypi.org/software/\">Raspberry Pi Imager</a> software to run. From the application screen, click <strong>CHOOSE OS &gt; Raspberry Pi OS (other) &gt; Raspberry Pi OS Lite (32-bit)</strong> step by step. This selects the lightweight Raspberry Pi OS that does not require a desktop environment, and then click <strong>CHOOSE STORAGE</strong> to pick the microSD card.</p>\n<p>Next is a trick - hit <code>ctrl-shift-x</code> key combination and the following advanced options dialog box will pop up <img src=\"RPi-Imager-advopt.png\" style=\"width:70.0%;height:70.0%\" /> Here is exactly the option we need to enable SSH on boot up - <strong>Enable SSH</strong>. It also allows the user to preset password for the default username <code>pi</code> (default is raspberry). Once set up, click <strong>SAVE</strong> to return to the main page and then click <strong>WRITE</strong> to start formatting the microSD card and writing OS to it. When finished, remove the microSD card and insert it into the Raspberry Pi, connect Ethernet cable then power it up.</p>\n<h4 id=\"probe-ip-address\">Probe IP Address</h4>\n<p>At this point we encountered a problem: since the installed system does not have a desktop environment, it cannot connect to the keyboard, mouse and monitor, so how do we find its IP address? There are two ways:</p>\n<ol type=\"1\">\n<li>connect to the home router's management WebUI and find the address for the host name 'raspberry'.</li>\n<li>run the nmap tool to scan the target subnet and check the changes before and after the Raspberry Pi boots up</li>\n</ol>\n<p>The log of nmap tool run can be seen below. Notice that a new IP address 192.168.2.4 is showing up in the scan report. Rerunning nmap against this address alone, we saw that TCP port 22 was open. We could roughly determine that this might be our newly online Raspberry Pi:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ nmap -sn 192.168.2.0/24</span><br><span class=\"line\">Starting Nmap 7.92 ( https://nmap.org ) at 2021-11-28 21:07 PST</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> router.sx.com (192.168.2.1)</span><br><span class=\"line\">Host is up (0.0050s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 192.168.2.3</span><br><span class=\"line\">Host is up (0.0048s latency).</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 192.168.2.4 <span class=\"comment\">## New IP after Raspberry Pi boots up</span></span><br><span class=\"line\">Host is up (0.0057s latency).</span><br><span class=\"line\">Nmap <span class=\"keyword\">done</span>: 256 IP addresses (3 hosts up) scanned <span class=\"keyword\">in</span> 15.31 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">❯ nmap 192.168.2.4</span><br><span class=\"line\">Nmap scan report <span class=\"keyword\">for</span> 192.168.2.4</span><br><span class=\"line\">Host is up (0.0066s latency).</span><br><span class=\"line\">Not shown: 999 closed tcp ports (conn-refused)</span><br><span class=\"line\">PORT   STATE SERVICE</span><br><span class=\"line\">22/tcp open  ssh</span><br></pre></td></tr></table></figure>\n<h4 id=\"system-update-and-upgrade\">System Update and Upgrade</h4>\n<p>Next trying SSH connection</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ ssh pi@192.168.2.4</span><br><span class=\"line\">pi@192.168.2.4<span class=\"string\">&#x27;s password:</span></span><br><span class=\"line\"><span class=\"string\">Linux raspberrypi 5.10.63-v7l+ #1488 SMP Thu Nov 18 16:15:28 GMT 2021 armv7l</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">The programs included with the Debian GNU/Linux system are free software;</span></span><br><span class=\"line\"><span class=\"string\">the exact distribution terms for each program are described in the</span></span><br><span class=\"line\"><span class=\"string\">individual files in /usr/share/doc/*/copyright.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span></span><br><span class=\"line\"><span class=\"string\">permitted by applicable law.</span></span><br><span class=\"line\"><span class=\"string\">Last login: Fri Dec 24 19:46:15 2021 from 192.168.2.3</span></span><br><span class=\"line\"><span class=\"string\">pi@raspberrypi:~ $</span></span><br></pre></td></tr></table></figure>\n<p>Once confirmed, we executed the following commands in the Raspberry Pi to update and upgrade the system:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure>\n<h4 id=\"network-connectivity-test\">Network Connectivity Test</h4>\n<p>This stage concluded with the stability test of the Raspberry Pi 4B system Ethernet connection. The test was executed on a macOS computer using the simple ping command, setting the <code>-i 0.05</code> option to specify 20 packets per second, and the <code>-t 3600</code> option for 1 hour run</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ sudo ping -i 0.05 192.168.2.4 -t 3600</span><br></pre></td></tr></table></figure>\n<p>There should be no more than 1% packet loss or timeout on a subnet with no wireless connectivity, otherwise it should be checked for troubleshooting. As a matter of fact, in our test it was really happening that nearly 10% ping packet got lost and SSH connection dropped intermittently. Searching the Internet, we found that there have been quite a few reports of similar issues with the Raspberry Pi 4B Ethernet connection. The analysis and suggestions given by people on the relevant forums focus on the followings</p>\n<ol type=\"1\">\n<li>Unstable power supply accouts for packet loss, need to be replaced with a reliable USB-C power adapter of 15W or more.</li>\n<li>Energy-efficient Ethernet (Energy-Efficient Ethernet) malfunction, can be fixed by disabling it.</li>\n<li>The full-speed Gigabit Ethernet connection function being faulty and have to be downgraded to 100Mbit/s for stable use.</li>\n</ol>\n<p>Practically, we tried all of the above with little success. Later, we found that the home router connected to the Raspberry Pi 4B was a Belkin N750 DB made in 2011. Although it provides Wi-Fi dual-band 802.11n and 4 Gigabit Ethernet ports, the manufactoring date is too long ago, which makes people doubt its interoperability. Also points 2 and 3 of the above report are essentially interoperability issues. Thinking of these, we immediately ordered the TP-Link TL-SG105 5-port Gigabit Ethernet switch. After receiving it, we extended the Gigabit Ethernet port of N750 with TL-SG105, connected Raspberry Pi 4B to TL-SG105, and retested. Sure enough this time the ping packet loss rate was less than 0.1% and the SSH connection became solid.</p>\n<p>The conclusion is that the Raspberry Pi 4B Gigabit Ethernet interface may have compatibility issues with some older devices, which can be solved by inserting a desktop switch with good interoperability between the two.</p>\n<h3 id=\"nsapi-kit-assembly\">NSAPi Kit Assembly</h3>\n<p>At the second stage we assembled the NSAPi storage kit, with the goal of finishing all hardware installation and completing the standalone NAS body.</p>\n<h4 id=\"prepare-internal-ssd\">Prepare Internal SSD</h4>\n<p>The NSAPi supports either an internal SSD or HDD. The project picked a Samsung 870 EVO 500GB internal SSD, here we ought to first make sure the SSD works properly on its own, otherwise we would have to disassemble the NASPi to replace it. The SSD can be hooked up to Windows for file system and basic read/write operation checks. In the case of a newly purchased SSD, the following steps can be done on Windows to quickly format it:</p>\n<ol type=\"1\">\n<li>Click on <strong>Start</strong> or the Windows button, select <strong>Control Panel &gt; System and Security</strong></li>\n<li>Select <strong>Administrative Tools &gt; Computer Management &gt; Disk management</strong></li>\n<li>Choose the disk to be formatted, right click then select <strong>Format</strong></li>\n<li>Check the followings in the Dialog box pop up\n<ul>\n<li><strong>File System → NTFS</strong></li>\n<li><strong>Allocation Unit Size → Default</strong></li>\n<li><strong>Volume Label → (enter volume name)</strong></li>\n<li><strong>Perform a quick format</strong></li>\n</ul></li>\n<li>Click OK button to start a fast format for the SSD</li>\n</ol>\n<p>⚠️Note: Here the chosen file system is NTFS. OMV supports NTFS mounting and reads/writes.</p>\n<h4 id=\"pwm-fan-control\">PWM Fan Control</h4>\n<p>Before the actual hardware assembly, a special software provided by Geekworm - PWM fan control script - must be installed. PWM fan speed adjustments to temperature changes is a major feature that lets NASPi stand out from other hardware solutions. So this step is critical.</p>\n<p>Referring to Geekworm's <a href=\"https://wiki.geekworm.com/X-C1_Software\">X-C1 software wiki page</a>, the installation command sequence on SSH session connected to the Raspberry Pi 4B system is as follows</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y git pigpio </span><br><span class=\"line\">sudo apt-get install -y python3-pigpio</span><br><span class=\"line\">sudo apt-get install -y python3-smbus</span><br><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/geekworm-com/x-c1.git</span><br><span class=\"line\"><span class=\"built_in\">cd</span> x-c1</span><br><span class=\"line\">sudo chmod +x *.sh</span><br><span class=\"line\">sudo bash install.sh</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;alias xoff=&#x27;sudo /usr/local/bin/x-c1-softsd.sh&#x27;&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>\n<p>If you can't do <code>git clone</code> directly on Raspberry Pi 4B, you can first download the X-C1 software on the SSH client, then transfer it to Raspberry Pi 4B using scp. After that, continue to execute the subsequent commands</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ scp -r x-c1 pi@192.168.2.4:/home/pi/</span><br></pre></td></tr></table></figure>\n<details class=\"note primary\"><summary><p><strong>How does X-C1 software control PWM fan?</strong></p>\n</summary>\n<p>The core of X-C1 software is a Python script named fan.py, which is presented below</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pigpio</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\">servo = <span class=\"number\">18</span></span><br><span class=\"line\"></span><br><span class=\"line\">pwm = pigpio.pi()</span><br><span class=\"line\">pwm.set_mode(servo, pigpio.OUTPUT)</span><br><span class=\"line\">pwm.set_PWM_frequency( servo, <span class=\"number\">25000</span> )</span><br><span class=\"line\">pwm.set_PWM_range(servo, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>):</span><br><span class=\"line\">     <span class=\"comment\">#get CPU temp</span></span><br><span class=\"line\">     file = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/sys/class/thermal/thermal_zone0/temp&quot;</span>)</span><br><span class=\"line\">     temp = <span class=\"built_in\">float</span>(file.read()) / <span class=\"number\">1000.00</span></span><br><span class=\"line\">     temp = <span class=\"built_in\">float</span>(<span class=\"string\">&#x27;%.2f&#x27;</span> % temp)</span><br><span class=\"line\">     file.close()</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">30</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">50</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">60</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">70</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">70</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">80</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &gt; <span class=\"number\">75</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span>(temp &lt; <span class=\"number\">30</span>):</span><br><span class=\"line\">          pwm.set_PWM_dutycycle(servo, <span class=\"number\">0</span>)</span><br><span class=\"line\">     time.sleep(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>Its logic is actually quite simple. With the pigpio module imported, it first initializes a PWM control object and then starts a while loop with 1 second sleep cycle inside. The CPU temperature is read at each cycle, and the duty cycle of PWM is set according to the temperature level to control the fan speed. The duty cycle is 0 when it is lower than 30℃, and the fan stops; when it is higher than 75℃, the duty cycle is 100, and the fan spins at full speed. Users can modify the temperature threshold and duty cycle parameters in the program to customize the PWM fan control.</p>\n\n</details>\n<p>In addition, the following pi-temp.sh script, which reads out the GPU and CPU temperatures, is also useful</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ cat ./pi-temp.sh</span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\"># Script: pi-temp.sh</span></span><br><span class=\"line\"><span class=\"comment\"># Purpose: Display the ARM CPU and GPU  temperature of Raspberry Pi</span></span><br><span class=\"line\"><span class=\"comment\"># -------------------------------------------------------</span></span><br><span class=\"line\">cpu=$(&lt;/sys/class/thermal/thermal_zone0/temp)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;<span class=\"subst\">$(date)</span> @ <span class=\"subst\">$(hostname)</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;-------------------------------------------&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;GPU =&gt; <span class=\"subst\">$(vcgencmd measure_temp)</span>&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;CPU =&gt; temp=<span class=\"subst\">$((cpu/1000)</span>)’C&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pi@raspberrypi:~ $ ./pi-temp.sh</span><br><span class=\"line\">Mon 29 Nov 06:59:17 GMT 2021 @ raspberrypi</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">GPU =&gt; temp=33.1<span class=\"string\">&#x27;C</span></span><br><span class=\"line\"><span class=\"string\">CPU =&gt; temp=32’C</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"hardware-assembly-process\">Hardware Assembly Process</h4>\n<p>Below is a snapshot of the Geekwork NASPi parts out of the box (except for the Raspberry Pi 4B on the far right of the second row and the screwdriver in the lower right corner)</p>\n<p><img src=\"NASPi-unbox.jpg\" style=\"width:80.0%;height:80.0%\" /> The three key components in the second row, from left to right, are</p>\n<ul>\n<li>X-C1 V1.3 adapter board provides power management, interface adaptation and security shutdown functions</li>\n<li>X823 V1.5 shield board provides 2.5-inch SSD/HDD storage function (UASP supported)</li>\n<li>4010 PWM fan and metal fan bracket</li>\n</ul>\n<p>The assembly process was done step-by-step mainly by referring to <a href=\"https://youtu.be/ithz2Mg5Vrc\">NASPi installation video</a> on Youtube, and the steps are generalized as follows.</p>\n<ol type=\"1\">\n<li>Insert the SSD into the SATA III connector of X823, flip it to the other side and fix it with screws.</li>\n<li>Install the Raspberry Pi 4B after fixing the spacers on this side, and place the 7-pin cable between the two</li>\n<li>Install the PWM fan on top of the Raspberry Pi 4B with the additional spacers</li>\n<li>Connect X-C1 and Raspberry Pi 4B, insert 7-pin connector right to X-C1 GPIO port and 3-pin connector to X-C1 FAN port</li>\n<li>Align and insert the 2x7-pin daughter board to the GPIO port of the Raspberry Pi 4B and fix it with screws</li>\n<li>Plug in the USB 3.0 connector to connect the X823 USB 3.0 port to the corresponding Raspberry Pi 4B USB 3.0</li>\n</ol>\n<p>Now the installation of the internal accessories has been completed, we got the view like this</p>\n<p><img src=\"NASPi-internal.jpg\" style=\"width:60.0%;height:60.0%\" /></p>\n<p>At this point, we added the USB-C power and press the front button to start the system, we could see the PWM fan started to spin. It was also observed that the fan spin rate was not constant, which demonstrated that the temperature controller PWM fan was working properly.</p>\n<p>The front button switch with embedded blue LED decides the whole system on/off state and can be tested as below</p>\n<ul>\n<li>Press the switch after power on, the system starts</li>\n<li>Press and hold the switch for 1-2 seconds while running, the system restarts</li>\n<li>Press and hold the switch for 3 seconds during operation to shut down the system safely.</li>\n<li>Press and hold the switch for 7-8 seconds during operation to force shutdown</li>\n</ul>\n<p>Running the <code>off</code> command on SSH connection can also trigger safe shutdown. Be cautious that we should not use Linux <code>shutdown</code> command, as that would not power down X-C1 board.</p>\n<p>After the button switch test, we now unplugged the USB 3.0 connector and inserted the entire module into the case. Next was to add the back panel and tighten the screws, then re-insert the USB 3.0 connector. This completed the whole NASPi storage kit assembly process. Below are the front and rear views of the final system provided by Geekworm (all interfaces and vents are marked).</p>\n<p><img src=\"NASPi-outside.jpg\" style=\"width:60.0%;height:60.0%\" /></p>\n<h3 id=\"omv-installation-and-configuration\">OMV Installation and Configuration</h3>\n<p>The third stage is for installing and configuring the key software package of NAS system - PMV. The goal is to bring up the basic network file access service. Before restarting the NAS, we plugged a Seagate 2TB external HDD to the remaining USB 3.0 port. After booting, connected SSH to NASPi from macOS and performed the following process.</p>\n<h4 id=\"install-omv-package\">Install OMV Package</h4>\n<p>Installing OMV is as simple as running the following command line directly from a terminal with an SSH connection.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -O - https://raw.githubusercontent.com/OpenMediaVault-Plugin-Developers/installScript/master/install | sudo bash</span><br></pre></td></tr></table></figure>\n<p>Due to the large size of the entire OMV package, this installation process can take a long time. After the installation, the IP address of the system may change and you will need to reconnect to SSH at this time:.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">(Reading database ... 51781 files and directories currently installed.)</span><br><span class=\"line\">Purging configuration files <span class=\"keyword\">for</span> dhcpcd5 (1:8.1.2-1+rpt3) ...</span><br><span class=\"line\">Purging configuration files <span class=\"keyword\">for</span> raspberrypi-net-mods (1.3.2) ...</span><br><span class=\"line\">Enable and start systemd-resolved ...</span><br><span class=\"line\">Unblocking wifi with rfkill ...</span><br><span class=\"line\">Adding eth0 to openmedivault database ...</span><br><span class=\"line\">IP address may change and you could lose connection <span class=\"keyword\">if</span> running this script via ssh.</span><br><span class=\"line\">client_loop: send disconnect: Broken pipe\t</span><br></pre></td></tr></table></figure>\n<p>After reconnecting, you can use <code>dpkg</code> to view the OMV packages. As you can see, the latest version of OMV installed here is 6.0.5.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ dpkg -l | grep openme</span><br><span class=\"line\">ii  openmediavault                       6.0.5-1                          all          openmediavault - The open network attached storage solution</span><br><span class=\"line\">ii  openmediavault-flashmemory           6.0.2                            all          folder2ram plugin <span class=\"keyword\">for</span> openmediavault</span><br><span class=\"line\">ii  openmediavault-keyring               1.0                              all          GnuPG archive keys of the OpenMediaVault archive</span><br><span class=\"line\">ii  openmediavault-omvextrasorg          6.0.4                            all          OMV-Extras.org Package Repositories <span class=\"keyword\">for</span> OpenMediaVault</span><br></pre></td></tr></table></figure>\n<h4 id=\"omv-management-ui\">OMV Management UI</h4>\n<p>At this point OMV's workbench is live. Launching a browser on a macOS computer and typing in the IP address will open the beautiful login screen (click on the 🌍 icon in the upper right corner to select the user interface language): <img src=\"OMV-login-default.png\" style=\"width:70.0%;height:70.0%\" /> After logging in with the default username and password shown above, you will see the Workbench screen. The first thing you should do at this point is to click the ⚙️ icon in the top right corner to bring up the settings menu and click \"Change Password\". You can also change the language here <img src=\"OMV-start-en.png\" style=\"width:80.0%;height:80.0%\" /> Clicking on \"Dashboard\" in the settings menu allows you to select the relevant components to be enabled. The menu on the left side provides task navigation for administrators and can be hidden when not needed. The complete OMV administration manual can be found in the <a href=\"https://openmediavault.readthedocs.io/en/latest/index.html\">online documentation</a></p>\n<h4 id=\"configure-file-services\">Configure File Services</h4>\n<p>Next is the key process for configuring the NAS, which consists of the following 5 steps.</p>\n<ol type=\"1\">\n<li><p><strong>Scan for system mounted disk drives</strong></p>\n<p>Click <strong>Storage &gt; Disks</strong> from the sidebar menu to enter the hard drive management page. If there is an external USB storage device just plugged in, you can click 🔍 here to scan it out. The scan results for this system are as follows. The internal Samsung 500GB SSD and external Seagate 2TB HDD are detected, and the 32GB microSD that contains the entire software system is listed at the top: <img src=\"OMV-Storage-Disks-en.png\" style=\"width:80.0%;height:80.0%\" /></p>\n<p>On the SSH terminal, we could see the information for the same set of mounted drivers</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ df -h | grep disk</span><br><span class=\"line\">/dev/sdb2       466G   13G  454G   3% /srv/dev-disk-by-uuid-D0604B68604B547E</span><br><span class=\"line\">/dev/sda1       1.9T  131G  1.7T   7% /srv/dev-disk-by-uuid-DEB2474FB2472B7B</span><br></pre></td></tr></table></figure></p></li>\n<li><p><strong>Mount disk drive file systems</strong></p>\n<p>Click <strong>Storage &gt; File Systems</strong> from the sidebar menu to enter the file system management page. If the storage device does not have a file system yet, click ⨁ to Create or Mount file system. OMV can create/mount ext4, ext3, jfs, xfs file systems, but only mounts are supported for ntfs file system. The following figure shows that OMV correctly mounts ntfs file systems for SSDs and HDDs: <img src=\"OMV-Storage-FS-en.png\" style=\"width:80.0%;height:80.0%\" /></p></li>\n<li><p><strong>Set Shared Folders</strong></p>\n<p>From the sidebar menu, click <strong>Storage &gt; File Systems</strong> to access the shared folder management page. Here, click ⨁ to create a shared folder. When creating it, specify the name, corresponding file system and relative path, and you can also add comments. Select the created folder and click the pencil icon again to edit the related information. This system sets the relative paths of shared folders Zixi-Primary and Zixi-Secondary for SSD and HDD respectively <img src=\"OMV-Storage-SharedFolders-en.png\" style=\"width:80.0%;height:80.0%\" /> Notice the orange alert at the top of the figure above, which alerts the administrator that the configurations have changed and must click on the ✔️ icon to take effect.</p></li>\n<li><p><strong>Add shared folder access users</strong></p>\n<p>Click <strong>User Management &gt; Users</strong> from the sidebar menu to enter the user management page. The system's default user pi has root privileges and cannot be used for file sharing access due to security concerns. So you need to add a new user separately. In this page, click ⨁ to Create or Import user, only user name and password are required when creating a new user, others are optional. Once created, select this user and click the third folder+key icon (prompting \"Shared folder privileges\") to enter the following privileges settings page <img src=\"OMV-User-authorize-en.png\" style=\"width:80.0%;height:80.0%\" /> As shown in the figure, for this new user zixi, the administrator can set the read and write access permissions for each shared folder.</p></li>\n<li><p><strong>Start file share services</strong></p>\n<p>If you expand the \"Services\" item in the navigation menu, you can see that OMV manages five services: FTP, NFS, Rsync, SMB/CIFS and SSH. SSH is enabled at the beginning of the system OS image preparation. NFS and SMB/CIFS are the most common network file sharing protocols, and both are supported by macOS. Take SMB/CIFS as the example here. Click <strong>Services &gt; SMB/CIFS</strong> from the sidebar menu to enter the management page. The page contains two buttons: Settings and Shares. Click \"Settings\" first to activate the SMB/CIFS service and configure the workgroup name in the new page, other options can be left as default. After saving, it returns to the SMB/CIFS administration page. Then enter \"Shares\", click ⨁ to Create shared folders Zixi-Primary and Zixi-Secondary on the new page and save. After that, click the ✔️ icon in the orange warning bar to make all configuration updates take effect, and you will end up with the following result <img src=\"OMV-SMB-Shares-en.png\" style=\"width:80.0%;height:80.0%\" /></p></li>\n</ol>\n<p>Now our Raspberry Pi NAS system is ready for file sharing and the SMB/CIFS service is started. After checking the relevant components to turn on, our dashboard live monitoring looks like this <img src=\"OMV-Dashboard-en.png\" style=\"width:85.0%;height:85.0%\" /></p>\n<h4 id=\"set-up-client-device\">Set Up Client Device</h4>\n<p>Once the server side is ready, we need to add the network share folder on the client side as follows.</p>\n<ul>\n<li>Windows PC client\n<ul>\n<li>Open File Explore, click “This PC”</li>\n<li>Right click on the blank area at the right pane, select \"Add a network location” on the popup menu</li>\n<li>Enter “\\\\&lt;IP-address&gt;\\<shared-folder>” in the “Internet or network address\" input box</li>\n<li>Enter username and password when prompted</li>\n</ul></li>\n<li>MacBook client (screenshot below)\n<ul>\n<li>Open Finder, click menu item Go</li>\n<li>Click “Connect to Server...”</li>\n<li>Enter URL “smb://&lt;IP-address&gt;/<shared-folder>”, then click Connect</li>\n<li>Enter username and password when prompted<br />\n<img src=\"macOS-SMB.png\" style=\"width:80.0%;height:80.0%\" /></li>\n</ul></li>\n</ul>\n<p>Once the client side is set up, users can perform various operations on the network share folder as if it were a local directory, such as previewing, creating new, opening or copying files, creating new subdirectories or deleting existing subdirectories.</p>\n<h3 id=\"plex-installation-and-configuration\">Plex Installation and Configuration</h3>\n<p>The last stage is to install and configure the Plex Media Server, and start a network streaming service.</p>\n<h4 id=\"install-media-server\">Install Media Server</h4>\n<p>The process of installing Plex Media Server requires HTTPS transport support, so we must first install the https-transport package. SSH to our Raspberry Pi NAS and execute the install command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install apt-transport-https</span><br></pre></td></tr></table></figure>\n<p>Next add the Plex repository to the system, which requires downloading the Plex sign key first. Here are the related commands and run logs</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ curl https://downloads.plex.tv/plex-keys/PlexSign.key | sudo apt-key add -</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0</span><br><span class=\"line\">  Warning: apt-key is deprecated. Manage keyring files <span class=\"keyword\">in</span> trusted.gpg.d instead (see apt-key(8)).</span><br><span class=\"line\">100  3072  100  3072    0     0  10039      0 --:--:-- --:--:-- --:--:-- 10039</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n<p>Use the same <code>apt-key</code> command to check the newly added Plex sign key</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ apt-key list</span><br><span class=\"line\">Warning: apt-key is deprecated. Manage keyring files <span class=\"keyword\">in</span> trusted.gpg.d instead (see apt-key(8)).</span><br><span class=\"line\">/etc/apt/trusted.gpg</span><br><span class=\"line\">...</span><br><span class=\"line\">pub   rsa4096 2015-03-22 [SC]</span><br><span class=\"line\">      CD66 5CBA 0E2F 88B7 373F  7CB9 9720 3C7B 3ADC A79D</span><br><span class=\"line\">uid           [ unknown] Plex Inc.</span><br><span class=\"line\">sub   rsa4096 2015-03-22 [E]</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>You can see that Plex uses 4096-bit RSA keys. For the warning message \"apt-key is deprecated...\" in the above log, you can ignore it for now. Go to read <a href=\"https://askubuntu.com/questions/1286545/what-commands-exactly-should-replace-the-deprecated-apt-key?newreg=20085e604ada43c2a3466bb51eb4349a\">some discussion on the askubuntu forum</a> if you are interested.</p>\n<p>Netx step is to add Plex repository to system repository list, then update packages <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo deb https://downloads.plex.tv/repo/deb public main | sudo tee /etc/apt/sources.list.d/plexmediaserver.list</span><br><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure> Now we can start the actual Plex Media Server installation with the following installation commands</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ sudo apt install plexmediaserver</span><br><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree... Done</span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">The following NEW packages will be installed:</span><br><span class=\"line\">  plexmediaserver</span><br><span class=\"line\">0 upgraded, 1 newly installed, 0 to remove and 20 not upgraded.</span><br><span class=\"line\">Need to get 66.1 MB of archives.</span><br><span class=\"line\">After this operation, 146 MB of additional disk space will be used.</span><br><span class=\"line\">Get:1 https://downloads.plex.tv/repo/deb public/main armhf plexmediaserver armhf 1.25.0.5282-2edd3c44d [66.1 MB]</span><br><span class=\"line\">Fetched 66.1 MB <span class=\"keyword\">in</span> 28s (2392 kB/s)</span><br><span class=\"line\">Selecting previously unselected package plexmediaserver.</span><br><span class=\"line\">(Reading database ... 51783 files and directories currently installed.)</span><br><span class=\"line\">Preparing to unpack .../plexmediaserver_1.25.0.5282-2edd3c44d_armhf.deb ...</span><br><span class=\"line\">PlexMediaServer install: Pre-installation Validation.</span><br><span class=\"line\">PlexMediaServer install: Pre-installation Validation complete.</span><br><span class=\"line\">Unpacking plexmediaserver (1.25.0.5282-2edd3c44d) ...</span><br><span class=\"line\">Setting up plexmediaserver (1.25.0.5282-2edd3c44d) ...</span><br><span class=\"line\"></span><br><span class=\"line\">Configuration file <span class=\"string\">&#x27;/etc/apt/sources.list.d/plexmediaserver.list&#x27;</span></span><br><span class=\"line\"> ==&gt; File on system created by you or by a script.</span><br><span class=\"line\"> ==&gt; File also <span class=\"keyword\">in</span> package provided by package maintainer.</span><br><span class=\"line\">   What would you like to <span class=\"keyword\">do</span> about it ?  Your options are:</span><br><span class=\"line\">    Y or I  : install the package maintainer<span class=\"string\">&#x27;s version</span></span><br><span class=\"line\"><span class=\"string\">    N or O  : keep your currently-installed version</span></span><br><span class=\"line\"><span class=\"string\">      D     : show the differences between the versions</span></span><br><span class=\"line\"><span class=\"string\">      Z     : start a shell to examine the situation</span></span><br><span class=\"line\"><span class=\"string\"> The default action is to keep your current version.</span></span><br><span class=\"line\"><span class=\"string\">*** plexmediaserver.list (Y/I/N/O/D/Z) [default=N] ?</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: PlexMediaServer-1.25.0.5282-2edd3c44d - Installation starting.</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: Now installing based on:</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Installation Type:   New</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Process Control:     systemd</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Plex User:           plex</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Plex Group:          plex</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Video Group:         video</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Metadata Dir:        /var/lib/plexmediaserver/Library/Application Support</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Temp Directory:      /tmp</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Lang Encoding:       en_US.UTF-8</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:   Nvidia GPU card:     Not Found</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install:</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: Completing final configuration.</span></span><br><span class=\"line\"><span class=\"string\">Created symlink /etc/systemd/system/multi-user.target.wants/plexmediaserver.service → /lib/systemd/system/plexmediaserver.service.</span></span><br><span class=\"line\"><span class=\"string\">PlexMediaServer install: PlexMediaServer-1.25.0.5282-2edd3c44d - Installation successful.  Errors: 0, Warnings: 0</span></span><br></pre></td></tr></table></figure>\n<p>The log shows a question is asked about the Plex media server list (plexmediaserver.list), just choose the default N. When we see \"Installation successful\", we know that the installation was successful. At this point, the Plex streaming service is up and running. Invoking the nmap scan again from the macOS side, we find that TCP port 32400 for Plex service is open.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ nmap -p1-65535 192.168.2.4 | grep open</span><br><span class=\"line\">22/tcp    open     ssh</span><br><span class=\"line\">80/tcp    open     http</span><br><span class=\"line\">111/tcp   open     rpcbind</span><br><span class=\"line\">139/tcp   open     netbios-ssn</span><br><span class=\"line\">445/tcp   open     microsoft-ds</span><br><span class=\"line\">2049/tcp  open     nfs</span><br><span class=\"line\">5357/tcp  open     wsdapi</span><br><span class=\"line\">32400/tcp open     plex</span><br></pre></td></tr></table></figure>\n<h4 id=\"configure-media-server\">Configure Media Server</h4>\n<p>The configuration of Plex Media Server has been done on the web GUI. Launch a browser on the macOS computer and type in the URL <strong>http://&lt;IP-address&gt;:32400/web</strong>, now we can see the following page if no surprise <img src=\"Plex-notice.png\" style=\"width:80.0%;height:80.0%\" /> We can sign in with a Google, Facebook or Apple account, or we can enter an email to create a new account. Follow the instructions on the page step by step, no need for any payment, soon we reach the <strong>Server Setup</strong> page. Here we can configure the server name and add libraries. Normally we don't need to access our home media server from outside, so remember to uncheck the \"Allow me to access my media outside my home\" box in this step. To add a library, first select the type of library (movies, TV episodes, music, photos, etc.), then click the \"BROWSE FOR MEDIA FOLDER\" button to browse and select the corresponding folder. Once the library is added, the included media files will immediately appear in the local service directory, as shown in the screenshot below <img src=\"Plex-movie-en.png\" style=\"width:90.0%;height:90.0%\" /> Here we have a local server named ZIXI-RPI-NAS for our Raspberry Pi NAS, the movie directory in the library shows The Matrix trilogy and is playing the first one <em>The Matrix</em>. Move your mouse over the server name and ➕ icon will appear to the right, click on it to continue adding new media libraries.</p>\n<p>Once the Plex Media Server is configured, we can open a browser from any device on our home network to do streaming on-demand, without the need to download additional applications. The whole experience is just like our own proprietary home Netflix service. This is really awesome!</p>\n<h2 id=\"performance-review\">Performance Review</h2>\n<p>By connecting a macOS laptop to one of the remaining ports of the TL-SG105, we could perform some simple same-subnet tests to fully evaluate the performance of this NAS system.</p>\n<h3 id=\"system-stress-test\">System Stress Test</h3>\n<p>Referring to Geekworm <a href=\"https://wiki.geekworm.com/Naspi_stress_test\">NASPi Stress Test Wiki page</a>, we executed the following command over SSH connection, which cloned test script from GutHub and run the stress test:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/geekworm-com/rpi-cpu-stress</span><br><span class=\"line\"><span class=\"built_in\">cd</span> rpi-cpu-stress</span><br><span class=\"line\">chmod +x stress.sh</span><br><span class=\"line\">sudo ./stress.sh</span><br></pre></td></tr></table></figure>\n<p>Simulataneously we established a second SSH session and run <code>htop</code> to monitor system status. The screenshot below was taken while close to the 5 minute mark (left is the htop real time display, right is the stress test output)<img src=\"RPi-stress-test.png\" style=\"width:80.0%;height:80.0%\" /> Dividing the <code>temp</code> value on the right side by 1000 gave the CPU temperature. Clearly, all 4 CPU cores reached 100% full load during the test, while the maximum temperature did not exceed 70°C. At this moment, there was no obvious heat sensation when touching the case. Typing <code>ctrl-c</code> to stop the stress test, and then executing the temperature measurement script again</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pi@raspberrypi:~ $ ./pi-temp.sh</span><br><span class=\"line\">Fri Dec 24 15:59:21 PST 2021 @ raspberrypi</span><br><span class=\"line\">-------------------------------------------</span><br><span class=\"line\">GPU =&gt; temp=39.9<span class=\"string\">&#x27;C</span></span><br><span class=\"line\"><span class=\"string\">CPU =&gt; temp=40&#x27;</span>C</span><br></pre></td></tr></table></figure>\n<p>The system tempreture returned to a low range value. This test result assures the system meets the design goal.</p>\n<h3 id=\"file-transfer-speed-test\">File Transfer Speed Test</h3>\n<p>The file transfer speed can be roughly measured with the seure remote copy tool scp. First creating a 1GB size file by running the <code>mkfile</code> command on the macOS client and then copying it to the user directory of the remote NAS system with the <code>scp</code> command</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ mkfile 1G test-nas.dmg</span><br><span class=\"line\">❯ ls -al test-nas.dmg</span><br><span class=\"line\">rw-------    1 sxiao  staff  1073741824 Dec 19 20:53 test-nas.dmg</span><br><span class=\"line\">❯ scp test-nas.dmg pi@192.168.2.4:/home/pi/</span><br><span class=\"line\">pi@192.168.2.4<span class=\"string\">&#x27;s password:</span></span><br><span class=\"line\"><span class=\"string\">test-nas.dmg                        100% 1024MB  19.2MB/s   00:53</span></span><br></pre></td></tr></table></figure>\n<p>After the copy was done, it would print the time spent and the deduced speed. Running the command with the source and the destination reversed would give us the speed of receiving file from NAS system.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">❯ scp pi@192.168.2.4:/home/pi/test-nas.dmg test-nas-rx.dmg</span><br><span class=\"line\">pi@192.168.2.4<span class=\"string\">&#x27;s password:</span></span><br><span class=\"line\"><span class=\"string\">test-nas.dmg                        100% 1024MB  65.7MB/s   00:15</span></span><br></pre></td></tr></table></figure>\n<p>Repeated 3 times and got the results listed as below</p>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Transfor Type</th>\n<th style=\"text-align: center;\">Server Operation</th>\n<th style=\"text-align: center;\">Time (s)</th>\n<th style=\"text-align: center;\">Speed (MB/s)</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Send</td>\n<td style=\"text-align: center;\">Write</td>\n<td style=\"text-align: center;\">53</td>\n<td style=\"text-align: center;\">19.2</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Send</td>\n<td style=\"text-align: center;\">Write</td>\n<td style=\"text-align: center;\">45</td>\n<td style=\"text-align: center;\">22.5</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Send</td>\n<td style=\"text-align: center;\">Write</td>\n<td style=\"text-align: center;\">50</td>\n<td style=\"text-align: center;\">20.4</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Receive</td>\n<td style=\"text-align: center;\">Read</td>\n<td style=\"text-align: center;\">15</td>\n<td style=\"text-align: center;\">65.7</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Receive</td>\n<td style=\"text-align: center;\">Read</td>\n<td style=\"text-align: center;\">16</td>\n<td style=\"text-align: center;\">60.3</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Receive</td>\n<td style=\"text-align: center;\">Read</td>\n<td style=\"text-align: center;\">15</td>\n<td style=\"text-align: center;\">66.3</td>\n</tr>\n</tbody>\n</table>\n<p>As can be seen, rhe speed of remote write is around 20MB/s, while the speed of remote read file can reach over 60MB/s. Considering that scp-related encryption and decryption are implemented in software on general-purpose Raspberry Pi systems, this result should be considered passable.</p>\n<h3 id=\"disk-access-speed-test\">Disk Access Speed Test</h3>\n<p>The real test of the NAS own performance is the network drive read/write speed test. For this, we downloaded the AmorphousDiskMark app from Apple's App Store. This is an easy and efficient drive speed test that measures the read/write performance of a storage device in terms of MB/s and IOPS (input/output operations per second). It has four types of tests:</p>\n<ol type=\"1\">\n<li>sequential read/write, 1MB block, queue depth 8</li>\n<li>sequential read/write, 1MB block, queue depth 1</li>\n<li>random read/write, 4KB block, queue depth 64</li>\n<li>random read/write, 4KB block, queue depth 1</li>\n</ol>\n<p>The above queue depths are the default values, but other values are also available. In addition, users can also modify the test file size and duration.</p>\n<p>Run the application on the macOS client and select the remote SMB folders Zixi-Primary (Samsung SSD) and Zixi-Secondary (Seagate HDD) respectively at the top, then click the <code>All</code> button in the upper left corner to start the NAS drive speed test process. A side-by-side comparison of the two test results is shown below</p>\n<div class=\"group-picture\"><div class=\"group-picture-row\"><div class=\"group-picture-column\"><img src=\"ADM-SSD.png\" /></div><div class=\"group-picture-column\"><img src=\"ADM-HDD.png\" /></div></div></div>\n<p>This gives a few observations:</p>\n<ul>\n<li>Reads are fast than writes for NAS drives, and the difference under random access is hugh.</li>\n<li>SSD outperforms HDD for both sequential and random accesses.</li>\n<li>Large queue depth speeds up reads, especially for random accesses, but there is little impact on writes.</li>\n<li>For both SSDs and HDDs, sequential reads/writes are significantly more efficient than random reads/writes.</li>\n<li>For both SSDs and HDDs, sequential reads/writes reach their highest speeds at large queue depths.</li>\n</ul>\n<p>These are not really surprising, and are consistent with the test results on macOS laptops with direct external SSDs and HDDs, only with lower number. With this NAS system, both the SSD and HDD are connected via the USB 3.0 interface. USB 3.0 supports transfer speeds of up to 5Gbit/s, so the performance bottleneck of the system is the network interface bandwidth and processor power.</p>\n<p>That being said, for both SSDs and HDDs the transfer speeds has been in excess of 900Mbit/s at 1MB sequential read and queue depth 8, close to the upper bandwidth limit of the Gigabit Ethernet interface. This read speed can support a single 1080p60 video stream at a frame rate of 60fps or 2 parallel 1080i50 video streams at a frame rate of 25fps, which is sufficient for home streaming services. In another media service test, the NAS system performs satisfactorily with three computers playing HD video on demand and one phone playing MP3 music without any lag.</p>\n<h2 id=\"project-summary\">Project Summary</h2>\n<p>This completes our Raspberry Pi home NAS project. Now we can move our NAS to a more permanent location to provide network file and streaming services for the whole family.</p>\n<p><img src=\"NASPi-final.jpg\" style=\"width:80.0%;height:80.0%\" /></p>\n<p>Economically, our home NAS has the cost summarized in the table below (excluding SSD/HDD)</p>\n<table>\n<colgroup>\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: center;\">Devices</th>\n<th style=\"text-align: center;\">Functions</th>\n<th style=\"text-align: center;\">Cost（$）</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Raspberry Pi 4B 2/4/8GB RAM</td>\n<td style=\"text-align: center;\">Primary hardwre system</td>\n<td style=\"text-align: center;\">45/55/75</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Samsung 32GB EVO+ Class-10 Micro SDHC</td>\n<td style=\"text-align: center;\">OS storage</td>\n<td style=\"text-align: center;\">10</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">Geekworm NASPi Raspberry Pi 4B NAS Storage Kit</td>\n<td style=\"text-align: center;\">Case, extending board and PWM fan</td>\n<td style=\"text-align: center;\">60</td>\n</tr>\n<tr class=\"even\">\n<td style=\"text-align: center;\">Geekworm 20W 5V 4A USB-C Power Adaptor</td>\n<td style=\"text-align: center;\">Power supply</td>\n<td style=\"text-align: center;\">15</td>\n</tr>\n<tr class=\"odd\">\n<td style=\"text-align: center;\">TP-Link TL-SG105 5-Port Gigabit Ethernet Switch</td>\n<td style=\"text-align: center;\">Desktop switch</td>\n<td style=\"text-align: center;\">15</td>\n</tr>\n</tbody>\n</table>\n<p>Even with the choice of 8GB RAM Raspberry Pi 4B, the whole cost is only $175, a little more than half of the price of the low-end brand NAS sold in the market. In fact, unless there are a lot of client devices that need streaming services, the memory consumption is usually under 2GB, so the 2GB Raspberry Pi 4B should be able to work in most home scenarios. That cuts the cost down to $145, less than half the MSRP.</p>\n<p>On the other hand, this DIY project was a very good exercise of hands-on practice, helping us gain valuable intuitive experience in building network connections, configuring system hardware and software, and tuning and testing application layer services. To sum up, the home NAS system built with Raspberry Pi 4B and OMV, combined with Plex media server, provides a cost-effective solution for file backup and streaming media services in the home network.</p>\n<p>Appendix: List of related devices and Amazon links</p>\n<blockquote>\n<p><strong><em>Disclosure</em></strong>: <em>This blog site is reader-supported. When you buy through affiliate links below, we may earn a tiny commission. Thank you.</em></p>\n<p><strong>CanaKit Raspberry Pi 4B 8GB RAM + 128GB MicroSD Extrem Kit</strong> <a href=\"https://amzn.to/3DUeDfm\">https://amzn.to/3DUeDfm</a><br />\n<strong>Samsung 32GB EVO+ Class 10 Micro SDHC with Adapter</strong> <a href=\"https://amzn.to/3FLkTb7\">https://amzn.to/3FLkTb7</a><br />\n<strong>Geekworm NASPi 2.5\" SATA HDD/SSD Raspberry Pi 4B NAS Storage Kit</strong> <a href=\"https://amzn.to/3m5djAi\">https://amzn.to/3m5djAi</a><br />\n<strong>Geekworm Raspberry Pi 4 20W 5V 4A USB-C Power Adaptor</strong> <a href=\"https://amzn.to/3m1EXOf\">https://amzn.to/3m1EXOf</a><br />\n<strong>TP-Link TL-SG105 5-Port Gigabit Ethernet Switch</strong> <a href=\"https://amzn.to/3pRkBsi\">https://amzn.to/3pRkBsi</a><br />\n<strong>Samsung 870 EVO 500GB 2.5\" SATA III Internal SSD</strong> <a href=\"https://amzn.to/3DPKnCl\">https://amzn.to/3DPKnCl</a><br />\n<strong>Seagate Portable 2TB USB 3.0 External HDD</strong> <a href=\"https://amzn.to/3EYegl4\">https://amzn.to/3EYegl4</a><br />\n<strong>Synology 2-Bay 2GB NAS DiskStation DS220+</strong> <a href=\"https://amzn.to/3Jp5qjd\">https://amzn.to/3Jp5qjd</a><br />\n<strong>Synology 5-Bay 8GB NAS DiskStation DS1520+</strong> <a href=\"https://amzn.to/3qniQDm\">https://amzn.to/3qniQDm</a></p>\n</blockquote>\n","categories":["DIY Projects"],"tags":["Raspberry Pi","NAS"]}]